
d-mironovbno055.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007df8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  08007fc8  08007fc8  00008fc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085e4  080085e4  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080085e4  080085e4  000095e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085ec  080085ec  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085ec  080085ec  000095ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085f0  080085f0  000095f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080085f4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200001d4  080087c8  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  080087c8  0000a454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5c1  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7d  00000000  00000000  000147c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  00016248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000756  00000000  00000000  00016bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224cd  00000000  00000000  00017326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c76e  00000000  00000000  000397f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbb61  00000000  00000000  00045f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111ac2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003810  00000000  00000000  00111b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00115318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007fb0 	.word	0x08007fb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08007fb0 	.word	0x08007fb0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b0af      	sub	sp, #188	@ 0xbc
 8000f18:	af2a      	add	r7, sp, #168	@ 0xa8
 8000f1a:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	799b      	ldrb	r3, [r3, #6]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8000f2c:	687c      	ldr	r4, [r7, #4]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000f32:	f107 030e 	add.w	r3, r7, #14
 8000f36:	9328      	str	r3, [sp, #160]	@ 0xa0
 8000f38:	2300      	movs	r3, #0
 8000f3a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8000f3c:	4668      	mov	r0, sp
 8000f3e:	f104 0310 	add.w	r3, r4, #16
 8000f42:	229c      	movs	r2, #156	@ 0x9c
 8000f44:	4619      	mov	r1, r3
 8000f46:	f005 fa20 	bl	800638a <memcpy>
 8000f4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f4e:	f001 fbd2 	bl	80026f6 <bno055_read_regs>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <bno055_init+0x4c>
        return err;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	e0b6      	b.n	80010ce <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8000f60:	7bbb      	ldrb	r3, [r7, #14]
 8000f62:	2ba0      	cmp	r3, #160	@ 0xa0
 8000f64:	d001      	beq.n	8000f6a <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8000f66:	2306      	movs	r3, #6
 8000f68:	e0b1      	b.n	80010ce <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f001 fa90 	bl	8002492 <bno055_set_opmode>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <bno055_init+0x6c>
        return err;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	e0a6      	b.n	80010ce <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8000f80:	2002      	movs	r0, #2
 8000f82:	f002 f9ad 	bl	80032e0 <HAL_Delay>
    bno055_reset(imu);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f001 fb6f 	bl	800266a <bno055_reset>
    HAL_Delay(5000);
 8000f8c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f90:	f002 f9a6 	bl	80032e0 <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000f94:	2100      	movs	r1, #0
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f001 fb0a 	bl	80025b0 <bno055_set_pwr_mode>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <bno055_init+0x96>
        return err;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	e091      	b.n	80010ce <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f002 f998 	bl	80032e0 <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f001 fc03 	bl	80027be <bno055_set_page>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <bno055_init+0xb2>
        return err;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	e083      	b.n	80010ce <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8000fc6:	200c      	movs	r0, #12
 8000fc8:	f002 f98a 	bl	80032e0 <HAL_Delay>
    bno055_on(imu);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f001 fb6f 	bl	80026b0 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	791b      	ldrb	r3, [r3, #4]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f001 fa5a 	bl	8002492 <bno055_set_opmode>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <bno055_init+0xd8>
        return err;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	e070      	b.n	80010ce <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8000fec:	2018      	movs	r0, #24
 8000fee:	f002 f977 	bl	80032e0 <HAL_Delay>

    imu->temperature = &bno055_temperature;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a38      	ldr	r2, [pc, #224]	@ (80010d8 <bno055_init+0x1c4>)
 8000ff6:	625a      	str	r2, [r3, #36]	@ 0x24
    imu->acc_x = &bno055_acc_x;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a38      	ldr	r2, [pc, #224]	@ (80010dc <bno055_init+0x1c8>)
 8000ffc:	629a      	str	r2, [r3, #40]	@ 0x28
    imu->acc_y = &bno055_acc_y;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a37      	ldr	r2, [pc, #220]	@ (80010e0 <bno055_init+0x1cc>)
 8001002:	62da      	str	r2, [r3, #44]	@ 0x2c
    imu->acc_z = &bno055_acc_z;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a37      	ldr	r2, [pc, #220]	@ (80010e4 <bno055_init+0x1d0>)
 8001008:	631a      	str	r2, [r3, #48]	@ 0x30
    imu->acc = &bno055_acc;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a36      	ldr	r2, [pc, #216]	@ (80010e8 <bno055_init+0x1d4>)
 800100e:	635a      	str	r2, [r3, #52]	@ 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a36      	ldr	r2, [pc, #216]	@ (80010ec <bno055_init+0x1d8>)
 8001014:	639a      	str	r2, [r3, #56]	@ 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a35      	ldr	r2, [pc, #212]	@ (80010f0 <bno055_init+0x1dc>)
 800101a:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a35      	ldr	r2, [pc, #212]	@ (80010f4 <bno055_init+0x1e0>)
 8001020:	641a      	str	r2, [r3, #64]	@ 0x40
    imu->linear_acc = &bno055_linear_acc;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a34      	ldr	r2, [pc, #208]	@ (80010f8 <bno055_init+0x1e4>)
 8001026:	645a      	str	r2, [r3, #68]	@ 0x44
    imu->gyro_x = &bno055_gyro_x;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a34      	ldr	r2, [pc, #208]	@ (80010fc <bno055_init+0x1e8>)
 800102c:	649a      	str	r2, [r3, #72]	@ 0x48
    imu->gyro_y = &bno055_gyro_y;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a33      	ldr	r2, [pc, #204]	@ (8001100 <bno055_init+0x1ec>)
 8001032:	64da      	str	r2, [r3, #76]	@ 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a33      	ldr	r2, [pc, #204]	@ (8001104 <bno055_init+0x1f0>)
 8001038:	651a      	str	r2, [r3, #80]	@ 0x50
    imu->gyro = &bno055_gyro;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a32      	ldr	r2, [pc, #200]	@ (8001108 <bno055_init+0x1f4>)
 800103e:	655a      	str	r2, [r3, #84]	@ 0x54
    imu->mag_x = &bno055_mag_x;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a32      	ldr	r2, [pc, #200]	@ (800110c <bno055_init+0x1f8>)
 8001044:	659a      	str	r2, [r3, #88]	@ 0x58
    imu->mag_y = &bno055_mag_y;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a31      	ldr	r2, [pc, #196]	@ (8001110 <bno055_init+0x1fc>)
 800104a:	65da      	str	r2, [r3, #92]	@ 0x5c
    imu->mag_z = &bno055_mag_z;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a31      	ldr	r2, [pc, #196]	@ (8001114 <bno055_init+0x200>)
 8001050:	661a      	str	r2, [r3, #96]	@ 0x60
    imu->mag = &bno055_mag;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a30      	ldr	r2, [pc, #192]	@ (8001118 <bno055_init+0x204>)
 8001056:	665a      	str	r2, [r3, #100]	@ 0x64
    imu->gravity_x = &bno055_gravity_x;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a30      	ldr	r2, [pc, #192]	@ (800111c <bno055_init+0x208>)
 800105c:	669a      	str	r2, [r3, #104]	@ 0x68
    imu->gravity_y = &bno055_gravity_y;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a2f      	ldr	r2, [pc, #188]	@ (8001120 <bno055_init+0x20c>)
 8001062:	66da      	str	r2, [r3, #108]	@ 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a2f      	ldr	r2, [pc, #188]	@ (8001124 <bno055_init+0x210>)
 8001068:	671a      	str	r2, [r3, #112]	@ 0x70
    imu->gravity = &bno055_gravity;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a2e      	ldr	r2, [pc, #184]	@ (8001128 <bno055_init+0x214>)
 800106e:	675a      	str	r2, [r3, #116]	@ 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a2e      	ldr	r2, [pc, #184]	@ (800112c <bno055_init+0x218>)
 8001074:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    imu->euler_roll = &bno055_euler_roll;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a2d      	ldr	r2, [pc, #180]	@ (8001130 <bno055_init+0x21c>)
 800107c:	679a      	str	r2, [r3, #120]	@ 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a2c      	ldr	r2, [pc, #176]	@ (8001134 <bno055_init+0x220>)
 8001082:	67da      	str	r2, [r3, #124]	@ 0x7c
    imu->euler = &bno055_euler;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a2c      	ldr	r2, [pc, #176]	@ (8001138 <bno055_init+0x224>)
 8001088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a2b      	ldr	r2, [pc, #172]	@ (800113c <bno055_init+0x228>)
 8001090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a2a      	ldr	r2, [pc, #168]	@ (8001140 <bno055_init+0x22c>)
 8001098:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a29      	ldr	r2, [pc, #164]	@ (8001144 <bno055_init+0x230>)
 80010a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a28      	ldr	r2, [pc, #160]	@ (8001148 <bno055_init+0x234>)
 80010a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    imu->quaternion = &bno055_quaternion;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a27      	ldr	r2, [pc, #156]	@ (800114c <bno055_init+0x238>)
 80010b0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    imu->acc_config = &bno055_acc_conf;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a26      	ldr	r2, [pc, #152]	@ (8001150 <bno055_init+0x23c>)
 80010b8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a25      	ldr	r2, [pc, #148]	@ (8001154 <bno055_init+0x240>)
 80010c0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    imu->mag_config = &bno055_mag_conf;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a24      	ldr	r2, [pc, #144]	@ (8001158 <bno055_init+0x244>)
 80010c8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    return BNO_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd90      	pop	{r4, r7, pc}
 80010d6:	bf00      	nop
 80010d8:	0800115d 	.word	0x0800115d
 80010dc:	080011c5 	.word	0x080011c5
 80010e0:	08001245 	.word	0x08001245
 80010e4:	080012c5 	.word	0x080012c5
 80010e8:	08001345 	.word	0x08001345
 80010ec:	08001415 	.word	0x08001415
 80010f0:	08001495 	.word	0x08001495
 80010f4:	08001515 	.word	0x08001515
 80010f8:	08001595 	.word	0x08001595
 80010fc:	08001665 	.word	0x08001665
 8001100:	080016e5 	.word	0x080016e5
 8001104:	08001765 	.word	0x08001765
 8001108:	080017e5 	.word	0x080017e5
 800110c:	080018b5 	.word	0x080018b5
 8001110:	08001923 	.word	0x08001923
 8001114:	08001991 	.word	0x08001991
 8001118:	080019ff 	.word	0x080019ff
 800111c:	08001ab9 	.word	0x08001ab9
 8001120:	08001b3d 	.word	0x08001b3d
 8001124:	08001bc1 	.word	0x08001bc1
 8001128:	08001c45 	.word	0x08001c45
 800112c:	08001d15 	.word	0x08001d15
 8001130:	08001d99 	.word	0x08001d99
 8001134:	08001e1d 	.word	0x08001e1d
 8001138:	08001ea1 	.word	0x08001ea1
 800113c:	08001f71 	.word	0x08001f71
 8001140:	08001fe5 	.word	0x08001fe5
 8001144:	08002059 	.word	0x08002059
 8001148:	080020cd 	.word	0x080020cd
 800114c:	08002141 	.word	0x08002141
 8001150:	08002225 	.word	0x08002225
 8001154:	080022f5 	.word	0x080022f5
 8001158:	080023c3 	.word	0x080023c3

0800115c <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b0af      	sub	sp, #188	@ 0xbc
 8001160:	af2a      	add	r7, sp, #168	@ 0xa8
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 800116a:	687c      	ldr	r4, [r7, #4]
 800116c:	2301      	movs	r3, #1
 800116e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001170:	f107 030e 	add.w	r3, r7, #14
 8001174:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001176:	2334      	movs	r3, #52	@ 0x34
 8001178:	9327      	str	r3, [sp, #156]	@ 0x9c
 800117a:	4668      	mov	r0, sp
 800117c:	f104 0310 	add.w	r3, r4, #16
 8001180:	229c      	movs	r2, #156	@ 0x9c
 8001182:	4619      	mov	r1, r3
 8001184:	f005 f901 	bl	800638a <memcpy>
 8001188:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800118c:	f001 fab3 	bl	80026f6 <bno055_read_regs>
 8001190:	4603      	mov	r3, r0
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <bno055_temperature+0x42>
        return err;
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	e00d      	b.n	80011ba <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7bdb      	ldrb	r3, [r3, #15]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <bno055_temperature+0x54>
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	e001      	b.n	80011b4 <bno055_temperature+0x58>
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd90      	pop	{r4, r7, pc}
	...

080011c4 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b0af      	sub	sp, #188	@ 0xbc
 80011c8:	af2a      	add	r7, sp, #168	@ 0xa8
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 80011ce:	687c      	ldr	r4, [r7, #4]
 80011d0:	2302      	movs	r3, #2
 80011d2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80011da:	2308      	movs	r3, #8
 80011dc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80011de:	4668      	mov	r0, sp
 80011e0:	f104 0310 	add.w	r3, r4, #16
 80011e4:	229c      	movs	r2, #156	@ 0x9c
 80011e6:	4619      	mov	r1, r3
 80011e8:	f005 f8cf 	bl	800638a <memcpy>
 80011ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011f0:	f001 fa81 	bl	80026f6 <bno055_read_regs>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <bno055_acc_x+0x3e>
        return err;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	e01a      	b.n	8001238 <bno055_acc_x+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001202:	7b7b      	ldrb	r3, [r7, #13]
 8001204:	b21b      	sxth	r3, r3
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	b21a      	sxth	r2, r3
 800120a:	7b3b      	ldrb	r3, [r7, #12]
 800120c:	b21b      	sxth	r3, r3
 800120e:	4313      	orrs	r3, r2
 8001210:	b21b      	sxth	r3, r3
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <bno055_acc_x+0x64>
 8001222:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001240 <bno055_acc_x+0x7c>
 8001226:	e001      	b.n	800122c <bno055_acc_x+0x68>
 8001228:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800122c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001236:	2300      	movs	r3, #0
};
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bd90      	pop	{r4, r7, pc}
 8001240:	42c80000 	.word	0x42c80000

08001244 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b0af      	sub	sp, #188	@ 0xbc
 8001248:	af2a      	add	r7, sp, #168	@ 0xa8
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800124e:	687c      	ldr	r4, [r7, #4]
 8001250:	2302      	movs	r3, #2
 8001252:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	9328      	str	r3, [sp, #160]	@ 0xa0
 800125a:	230a      	movs	r3, #10
 800125c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800125e:	4668      	mov	r0, sp
 8001260:	f104 0310 	add.w	r3, r4, #16
 8001264:	229c      	movs	r2, #156	@ 0x9c
 8001266:	4619      	mov	r1, r3
 8001268:	f005 f88f 	bl	800638a <memcpy>
 800126c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001270:	f001 fa41 	bl	80026f6 <bno055_read_regs>
 8001274:	4603      	mov	r3, r0
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <bno055_acc_y+0x3e>
        return err;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	e01a      	b.n	80012b8 <bno055_acc_y+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001282:	7b7b      	ldrb	r3, [r7, #13]
 8001284:	b21b      	sxth	r3, r3
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	b21a      	sxth	r2, r3
 800128a:	7b3b      	ldrb	r3, [r7, #12]
 800128c:	b21b      	sxth	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	b21b      	sxth	r3, r3
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d102      	bne.n	80012a8 <bno055_acc_y+0x64>
 80012a2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80012c0 <bno055_acc_y+0x7c>
 80012a6:	e001      	b.n	80012ac <bno055_acc_y+0x68>
 80012a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80012ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80012b6:	2300      	movs	r3, #0
};
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd90      	pop	{r4, r7, pc}
 80012c0:	42c80000 	.word	0x42c80000

080012c4 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b0af      	sub	sp, #188	@ 0xbc
 80012c8:	af2a      	add	r7, sp, #168	@ 0xa8
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80012ce:	687c      	ldr	r4, [r7, #4]
 80012d0:	2302      	movs	r3, #2
 80012d2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80012da:	230c      	movs	r3, #12
 80012dc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80012de:	4668      	mov	r0, sp
 80012e0:	f104 0310 	add.w	r3, r4, #16
 80012e4:	229c      	movs	r2, #156	@ 0x9c
 80012e6:	4619      	mov	r1, r3
 80012e8:	f005 f84f 	bl	800638a <memcpy>
 80012ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012f0:	f001 fa01 	bl	80026f6 <bno055_read_regs>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <bno055_acc_z+0x3e>
        return err;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	e01a      	b.n	8001338 <bno055_acc_z+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001302:	7b7b      	ldrb	r3, [r7, #13]
 8001304:	b21b      	sxth	r3, r3
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b21a      	sxth	r2, r3
 800130a:	7b3b      	ldrb	r3, [r7, #12]
 800130c:	b21b      	sxth	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	b21b      	sxth	r3, r3
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <bno055_acc_z+0x64>
 8001322:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001340 <bno055_acc_z+0x7c>
 8001326:	e001      	b.n	800132c <bno055_acc_z+0x68>
 8001328:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800132c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001336:	2300      	movs	r3, #0
};
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	bd90      	pop	{r4, r7, pc}
 8001340:	42c80000 	.word	0x42c80000

08001344 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b0b1      	sub	sp, #196	@ 0xc4
 8001348:	af2a      	add	r7, sp, #168	@ 0xa8
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 800134e:	687c      	ldr	r4, [r7, #4]
 8001350:	2306      	movs	r3, #6
 8001352:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	9328      	str	r3, [sp, #160]	@ 0xa0
 800135a:	2308      	movs	r3, #8
 800135c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800135e:	4668      	mov	r0, sp
 8001360:	f104 0310 	add.w	r3, r4, #16
 8001364:	229c      	movs	r2, #156	@ 0x9c
 8001366:	4619      	mov	r1, r3
 8001368:	f005 f80f 	bl	800638a <memcpy>
 800136c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001370:	f001 f9c1 	bl	80026f6 <bno055_read_regs>
 8001374:	4603      	mov	r3, r0
 8001376:	75fb      	strb	r3, [r7, #23]
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <bno055_acc+0x3e>
        return err;
 800137e:	7dfb      	ldrb	r3, [r7, #23]
 8001380:	e042      	b.n	8001408 <bno055_acc+0xc4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <bno055_acc+0x4a>
 800138a:	4b21      	ldr	r3, [pc, #132]	@ (8001410 <bno055_acc+0xcc>)
 800138c:	e001      	b.n	8001392 <bno055_acc+0x4e>
 800138e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001392:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001394:	7a7b      	ldrb	r3, [r7, #9]
 8001396:	b21b      	sxth	r3, r3
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b21a      	sxth	r2, r3
 800139c:	7a3b      	ldrb	r3, [r7, #8]
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80013b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80013ba:	7afb      	ldrb	r3, [r7, #11]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	7abb      	ldrb	r3, [r7, #10]
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80013d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80013e0:	7b7b      	ldrb	r3, [r7, #13]
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	7b3b      	ldrb	r3, [r7, #12]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013f8:	ed97 7a04 	vldr	s14, [r7, #16]
 80013fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001406:	2300      	movs	r3, #0
};
 8001408:	4618      	mov	r0, r3
 800140a:	371c      	adds	r7, #28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd90      	pop	{r4, r7, pc}
 8001410:	42c80000 	.word	0x42c80000

08001414 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b0af      	sub	sp, #188	@ 0xbc
 8001418:	af2a      	add	r7, sp, #168	@ 0xa8
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 800141e:	687c      	ldr	r4, [r7, #4]
 8001420:	2302      	movs	r3, #2
 8001422:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	9328      	str	r3, [sp, #160]	@ 0xa0
 800142a:	2328      	movs	r3, #40	@ 0x28
 800142c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800142e:	4668      	mov	r0, sp
 8001430:	f104 0310 	add.w	r3, r4, #16
 8001434:	229c      	movs	r2, #156	@ 0x9c
 8001436:	4619      	mov	r1, r3
 8001438:	f004 ffa7 	bl	800638a <memcpy>
 800143c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001440:	f001 f959 	bl	80026f6 <bno055_read_regs>
 8001444:	4603      	mov	r3, r0
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <bno055_linear_acc_x+0x3e>
        return err;
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	e01a      	b.n	8001488 <bno055_linear_acc_x+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001452:	7b7b      	ldrb	r3, [r7, #13]
 8001454:	b21b      	sxth	r3, r3
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b21a      	sxth	r2, r3
 800145a:	7b3b      	ldrb	r3, [r7, #12]
 800145c:	b21b      	sxth	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b21b      	sxth	r3, r3
 8001462:	ee07 3a90 	vmov	s15, r3
 8001466:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <bno055_linear_acc_x+0x64>
 8001472:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001490 <bno055_linear_acc_x+0x7c>
 8001476:	e001      	b.n	800147c <bno055_linear_acc_x+0x68>
 8001478:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800147c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001486:	2300      	movs	r3, #0
};
 8001488:	4618      	mov	r0, r3
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bd90      	pop	{r4, r7, pc}
 8001490:	42c80000 	.word	0x42c80000

08001494 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b0af      	sub	sp, #188	@ 0xbc
 8001498:	af2a      	add	r7, sp, #168	@ 0xa8
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800149e:	687c      	ldr	r4, [r7, #4]
 80014a0:	2302      	movs	r3, #2
 80014a2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80014aa:	232a      	movs	r3, #42	@ 0x2a
 80014ac:	9327      	str	r3, [sp, #156]	@ 0x9c
 80014ae:	4668      	mov	r0, sp
 80014b0:	f104 0310 	add.w	r3, r4, #16
 80014b4:	229c      	movs	r2, #156	@ 0x9c
 80014b6:	4619      	mov	r1, r3
 80014b8:	f004 ff67 	bl	800638a <memcpy>
 80014bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014c0:	f001 f919 	bl	80026f6 <bno055_read_regs>
 80014c4:	4603      	mov	r3, r0
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <bno055_linear_acc_y+0x3e>
        return err;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	e01a      	b.n	8001508 <bno055_linear_acc_y+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80014d2:	7b7b      	ldrb	r3, [r7, #13]
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	b21a      	sxth	r2, r3
 80014da:	7b3b      	ldrb	r3, [r7, #12]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	ee07 3a90 	vmov	s15, r3
 80014e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <bno055_linear_acc_y+0x64>
 80014f2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001510 <bno055_linear_acc_y+0x7c>
 80014f6:	e001      	b.n	80014fc <bno055_linear_acc_y+0x68>
 80014f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80014fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001506:	2300      	movs	r3, #0
};
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bd90      	pop	{r4, r7, pc}
 8001510:	42c80000 	.word	0x42c80000

08001514 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b0af      	sub	sp, #188	@ 0xbc
 8001518:	af2a      	add	r7, sp, #168	@ 0xa8
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800151e:	687c      	ldr	r4, [r7, #4]
 8001520:	2302      	movs	r3, #2
 8001522:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	9328      	str	r3, [sp, #160]	@ 0xa0
 800152a:	232c      	movs	r3, #44	@ 0x2c
 800152c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800152e:	4668      	mov	r0, sp
 8001530:	f104 0310 	add.w	r3, r4, #16
 8001534:	229c      	movs	r2, #156	@ 0x9c
 8001536:	4619      	mov	r1, r3
 8001538:	f004 ff27 	bl	800638a <memcpy>
 800153c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001540:	f001 f8d9 	bl	80026f6 <bno055_read_regs>
 8001544:	4603      	mov	r3, r0
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <bno055_linear_acc_z+0x3e>
        return err;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	e01a      	b.n	8001588 <bno055_linear_acc_z+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001552:	7b7b      	ldrb	r3, [r7, #13]
 8001554:	b21b      	sxth	r3, r3
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	b21a      	sxth	r2, r3
 800155a:	7b3b      	ldrb	r3, [r7, #12]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21b      	sxth	r3, r3
 8001562:	ee07 3a90 	vmov	s15, r3
 8001566:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800156e:	2b00      	cmp	r3, #0
 8001570:	d102      	bne.n	8001578 <bno055_linear_acc_z+0x64>
 8001572:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001590 <bno055_linear_acc_z+0x7c>
 8001576:	e001      	b.n	800157c <bno055_linear_acc_z+0x68>
 8001578:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800157c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001586:	2300      	movs	r3, #0
};
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bd90      	pop	{r4, r7, pc}
 8001590:	42c80000 	.word	0x42c80000

08001594 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b0b1      	sub	sp, #196	@ 0xc4
 8001598:	af2a      	add	r7, sp, #168	@ 0xa8
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 800159e:	687c      	ldr	r4, [r7, #4]
 80015a0:	2306      	movs	r3, #6
 80015a2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80015a4:	f107 0308 	add.w	r3, r7, #8
 80015a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80015aa:	2328      	movs	r3, #40	@ 0x28
 80015ac:	9327      	str	r3, [sp, #156]	@ 0x9c
 80015ae:	4668      	mov	r0, sp
 80015b0:	f104 0310 	add.w	r3, r4, #16
 80015b4:	229c      	movs	r2, #156	@ 0x9c
 80015b6:	4619      	mov	r1, r3
 80015b8:	f004 fee7 	bl	800638a <memcpy>
 80015bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015c0:	f001 f899 	bl	80026f6 <bno055_read_regs>
 80015c4:	4603      	mov	r3, r0
 80015c6:	75fb      	strb	r3, [r7, #23]
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <bno055_linear_acc+0x3e>
        return err;
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	e042      	b.n	8001658 <bno055_linear_acc+0xc4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <bno055_linear_acc+0x4a>
 80015da:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <bno055_linear_acc+0xcc>)
 80015dc:	e001      	b.n	80015e2 <bno055_linear_acc+0x4e>
 80015de:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80015e2:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80015e4:	7a7b      	ldrb	r3, [r7, #9]
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	7a3b      	ldrb	r3, [r7, #8]
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800160a:	7afb      	ldrb	r3, [r7, #11]
 800160c:	b21b      	sxth	r3, r3
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b21a      	sxth	r2, r3
 8001612:	7abb      	ldrb	r3, [r7, #10]
 8001614:	b21b      	sxth	r3, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	b21b      	sxth	r3, r3
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001622:	ed97 7a04 	vldr	s14, [r7, #16]
 8001626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001630:	7b7b      	ldrb	r3, [r7, #13]
 8001632:	b21b      	sxth	r3, r3
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b21a      	sxth	r2, r3
 8001638:	7b3b      	ldrb	r3, [r7, #12]
 800163a:	b21b      	sxth	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b21b      	sxth	r3, r3
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001648:	ed97 7a04 	vldr	s14, [r7, #16]
 800164c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001656:	2300      	movs	r3, #0
};
 8001658:	4618      	mov	r0, r3
 800165a:	371c      	adds	r7, #28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd90      	pop	{r4, r7, pc}
 8001660:	42c80000 	.word	0x42c80000

08001664 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b0af      	sub	sp, #188	@ 0xbc
 8001668:	af2a      	add	r7, sp, #168	@ 0xa8
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 800166e:	687c      	ldr	r4, [r7, #4]
 8001670:	2302      	movs	r3, #2
 8001672:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	9328      	str	r3, [sp, #160]	@ 0xa0
 800167a:	2314      	movs	r3, #20
 800167c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800167e:	4668      	mov	r0, sp
 8001680:	f104 0310 	add.w	r3, r4, #16
 8001684:	229c      	movs	r2, #156	@ 0x9c
 8001686:	4619      	mov	r1, r3
 8001688:	f004 fe7f 	bl	800638a <memcpy>
 800168c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001690:	f001 f831 	bl	80026f6 <bno055_read_regs>
 8001694:	4603      	mov	r3, r0
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <bno055_gyro_x+0x3e>
        return err;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	e01a      	b.n	80016d8 <bno055_gyro_x+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80016a2:	7b7b      	ldrb	r3, [r7, #13]
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	7b3b      	ldrb	r3, [r7, #12]
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <bno055_gyro_x+0x64>
 80016c2:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80016c6:	e001      	b.n	80016cc <bno055_gyro_x+0x68>
 80016c8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80016e0 <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80016cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80016d6:	2300      	movs	r3, #0
};
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd90      	pop	{r4, r7, pc}
 80016e0:	44610000 	.word	0x44610000

080016e4 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b0af      	sub	sp, #188	@ 0xbc
 80016e8:	af2a      	add	r7, sp, #168	@ 0xa8
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80016ee:	687c      	ldr	r4, [r7, #4]
 80016f0:	2302      	movs	r3, #2
 80016f2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80016fa:	2316      	movs	r3, #22
 80016fc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80016fe:	4668      	mov	r0, sp
 8001700:	f104 0310 	add.w	r3, r4, #16
 8001704:	229c      	movs	r2, #156	@ 0x9c
 8001706:	4619      	mov	r1, r3
 8001708:	f004 fe3f 	bl	800638a <memcpy>
 800170c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001710:	f000 fff1 	bl	80026f6 <bno055_read_regs>
 8001714:	4603      	mov	r3, r0
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <bno055_gyro_y+0x3e>
        return err;
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	e01a      	b.n	8001758 <bno055_gyro_y+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001722:	7b7b      	ldrb	r3, [r7, #13]
 8001724:	b21b      	sxth	r3, r3
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b21a      	sxth	r2, r3
 800172a:	7b3b      	ldrb	r3, [r7, #12]
 800172c:	b21b      	sxth	r3, r3
 800172e:	4313      	orrs	r3, r2
 8001730:	b21b      	sxth	r3, r3
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <bno055_gyro_y+0x64>
 8001742:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001746:	e001      	b.n	800174c <bno055_gyro_y+0x68>
 8001748:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001760 <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 800174c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001756:	2300      	movs	r3, #0
};
 8001758:	4618      	mov	r0, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	44610000 	.word	0x44610000

08001764 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b0af      	sub	sp, #188	@ 0xbc
 8001768:	af2a      	add	r7, sp, #168	@ 0xa8
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800176e:	687c      	ldr	r4, [r7, #4]
 8001770:	2302      	movs	r3, #2
 8001772:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	9328      	str	r3, [sp, #160]	@ 0xa0
 800177a:	2318      	movs	r3, #24
 800177c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800177e:	4668      	mov	r0, sp
 8001780:	f104 0310 	add.w	r3, r4, #16
 8001784:	229c      	movs	r2, #156	@ 0x9c
 8001786:	4619      	mov	r1, r3
 8001788:	f004 fdff 	bl	800638a <memcpy>
 800178c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001790:	f000 ffb1 	bl	80026f6 <bno055_read_regs>
 8001794:	4603      	mov	r3, r0
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <bno055_gyro_z+0x3e>
        return err;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	e01a      	b.n	80017d8 <bno055_gyro_z+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80017a2:	7b7b      	ldrb	r3, [r7, #13]
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	7b3b      	ldrb	r3, [r7, #12]
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	ee07 3a90 	vmov	s15, r3
 80017b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <bno055_gyro_z+0x64>
 80017c2:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80017c6:	e001      	b.n	80017cc <bno055_gyro_z+0x68>
 80017c8:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80017e0 <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80017cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80017d6:	2300      	movs	r3, #0
};
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	44610000 	.word	0x44610000

080017e4 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b0b1      	sub	sp, #196	@ 0xc4
 80017e8:	af2a      	add	r7, sp, #168	@ 0xa8
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 80017ee:	687c      	ldr	r4, [r7, #4]
 80017f0:	2306      	movs	r3, #6
 80017f2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80017fa:	2314      	movs	r3, #20
 80017fc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80017fe:	4668      	mov	r0, sp
 8001800:	f104 0310 	add.w	r3, r4, #16
 8001804:	229c      	movs	r2, #156	@ 0x9c
 8001806:	4619      	mov	r1, r3
 8001808:	f004 fdbf 	bl	800638a <memcpy>
 800180c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001810:	f000 ff71 	bl	80026f6 <bno055_read_regs>
 8001814:	4603      	mov	r3, r0
 8001816:	75fb      	strb	r3, [r7, #23]
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <bno055_gyro+0x3e>
        return err;
 800181e:	7dfb      	ldrb	r3, [r7, #23]
 8001820:	e042      	b.n	80018a8 <bno055_gyro+0xc4>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <bno055_gyro+0x4c>
 800182a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800182e:	e000      	b.n	8001832 <bno055_gyro+0x4e>
 8001830:	4b1f      	ldr	r3, [pc, #124]	@ (80018b0 <bno055_gyro+0xcc>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001832:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001834:	7a7b      	ldrb	r3, [r7, #9]
 8001836:	b21b      	sxth	r3, r3
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	b21a      	sxth	r2, r3
 800183c:	7a3b      	ldrb	r3, [r7, #8]
 800183e:	b21b      	sxth	r3, r3
 8001840:	4313      	orrs	r3, r2
 8001842:	b21b      	sxth	r3, r3
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800184c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800185a:	7afb      	ldrb	r3, [r7, #11]
 800185c:	b21b      	sxth	r3, r3
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	b21a      	sxth	r2, r3
 8001862:	7abb      	ldrb	r3, [r7, #10]
 8001864:	b21b      	sxth	r3, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	b21b      	sxth	r3, r3
 800186a:	ee07 3a90 	vmov	s15, r3
 800186e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001872:	ed97 7a04 	vldr	s14, [r7, #16]
 8001876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001880:	7b7b      	ldrb	r3, [r7, #13]
 8001882:	b21b      	sxth	r3, r3
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	b21a      	sxth	r2, r3
 8001888:	7b3b      	ldrb	r3, [r7, #12]
 800188a:	b21b      	sxth	r3, r3
 800188c:	4313      	orrs	r3, r2
 800188e:	b21b      	sxth	r3, r3
 8001890:	ee07 3a90 	vmov	s15, r3
 8001894:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001898:	ed97 7a04 	vldr	s14, [r7, #16]
 800189c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd90      	pop	{r4, r7, pc}
 80018b0:	44610000 	.word	0x44610000

080018b4 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b0af      	sub	sp, #188	@ 0xbc
 80018b8:	af2a      	add	r7, sp, #168	@ 0xa8
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 80018be:	687c      	ldr	r4, [r7, #4]
 80018c0:	2302      	movs	r3, #2
 80018c2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80018ca:	230e      	movs	r3, #14
 80018cc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80018ce:	4668      	mov	r0, sp
 80018d0:	f104 0310 	add.w	r3, r4, #16
 80018d4:	229c      	movs	r2, #156	@ 0x9c
 80018d6:	4619      	mov	r1, r3
 80018d8:	f004 fd57 	bl	800638a <memcpy>
 80018dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018e0:	f000 ff09 	bl	80026f6 <bno055_read_regs>
 80018e4:	4603      	mov	r3, r0
 80018e6:	73fb      	strb	r3, [r7, #15]
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <bno055_mag_x+0x3e>
        return err;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	e013      	b.n	800191a <bno055_mag_x+0x66>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80018f2:	7b7b      	ldrb	r3, [r7, #13]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	7b3b      	ldrb	r3, [r7, #12]
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	4313      	orrs	r3, r2
 8001900:	b21b      	sxth	r3, r3
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800190a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800190e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bd90      	pop	{r4, r7, pc}

08001922 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8001922:	b590      	push	{r4, r7, lr}
 8001924:	b0af      	sub	sp, #188	@ 0xbc
 8001926:	af2a      	add	r7, sp, #168	@ 0xa8
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800192c:	687c      	ldr	r4, [r7, #4]
 800192e:	2302      	movs	r3, #2
 8001930:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001938:	2310      	movs	r3, #16
 800193a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800193c:	4668      	mov	r0, sp
 800193e:	f104 0310 	add.w	r3, r4, #16
 8001942:	229c      	movs	r2, #156	@ 0x9c
 8001944:	4619      	mov	r1, r3
 8001946:	f004 fd20 	bl	800638a <memcpy>
 800194a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800194e:	f000 fed2 	bl	80026f6 <bno055_read_regs>
 8001952:	4603      	mov	r3, r0
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <bno055_mag_y+0x3e>
        return err;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	e013      	b.n	8001988 <bno055_mag_y+0x66>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001960:	7b7b      	ldrb	r3, [r7, #13]
 8001962:	b21b      	sxth	r3, r3
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	b21a      	sxth	r2, r3
 8001968:	7b3b      	ldrb	r3, [r7, #12]
 800196a:	b21b      	sxth	r3, r3
 800196c:	4313      	orrs	r3, r2
 800196e:	b21b      	sxth	r3, r3
 8001970:	ee07 3a90 	vmov	s15, r3
 8001974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001978:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800197c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	bd90      	pop	{r4, r7, pc}

08001990 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b0af      	sub	sp, #188	@ 0xbc
 8001994:	af2a      	add	r7, sp, #168	@ 0xa8
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800199a:	687c      	ldr	r4, [r7, #4]
 800199c:	2302      	movs	r3, #2
 800199e:	9329      	str	r3, [sp, #164]	@ 0xa4
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80019a6:	2312      	movs	r3, #18
 80019a8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80019aa:	4668      	mov	r0, sp
 80019ac:	f104 0310 	add.w	r3, r4, #16
 80019b0:	229c      	movs	r2, #156	@ 0x9c
 80019b2:	4619      	mov	r1, r3
 80019b4:	f004 fce9 	bl	800638a <memcpy>
 80019b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019bc:	f000 fe9b 	bl	80026f6 <bno055_read_regs>
 80019c0:	4603      	mov	r3, r0
 80019c2:	73fb      	strb	r3, [r7, #15]
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <bno055_mag_z+0x3e>
        return err;
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	e013      	b.n	80019f6 <bno055_mag_z+0x66>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80019ce:	7b7b      	ldrb	r3, [r7, #13]
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b21a      	sxth	r2, r3
 80019d6:	7b3b      	ldrb	r3, [r7, #12]
 80019d8:	b21b      	sxth	r3, r3
 80019da:	4313      	orrs	r3, r2
 80019dc:	b21b      	sxth	r3, r3
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e6:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80019ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd90      	pop	{r4, r7, pc}

080019fe <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 80019fe:	b590      	push	{r4, r7, lr}
 8001a00:	b0af      	sub	sp, #188	@ 0xbc
 8001a02:	af2a      	add	r7, sp, #168	@ 0xa8
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001a08:	687c      	ldr	r4, [r7, #4]
 8001a0a:	2306      	movs	r3, #6
 8001a0c:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001a14:	230e      	movs	r3, #14
 8001a16:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001a18:	4668      	mov	r0, sp
 8001a1a:	f104 0310 	add.w	r3, r4, #16
 8001a1e:	229c      	movs	r2, #156	@ 0x9c
 8001a20:	4619      	mov	r1, r3
 8001a22:	f004 fcb2 	bl	800638a <memcpy>
 8001a26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a2a:	f000 fe64 	bl	80026f6 <bno055_read_regs>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	73fb      	strb	r3, [r7, #15]
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <bno055_mag+0x3e>
        return err;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	e039      	b.n	8001ab0 <bno055_mag+0xb2>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001a3c:	7a7b      	ldrb	r3, [r7, #9]
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	7a3b      	ldrb	r3, [r7, #8]
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a54:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001a58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 8001a62:	7afb      	ldrb	r3, [r7, #11]
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	7abb      	ldrb	r3, [r7, #10]
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a7a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001a7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8001a88:	7b7b      	ldrb	r3, [r7, #13]
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	b21a      	sxth	r2, r3
 8001a90:	7b3b      	ldrb	r3, [r7, #12]
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001aa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001aae:	2300      	movs	r3, #0
};
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd90      	pop	{r4, r7, pc}

08001ab8 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b0b1      	sub	sp, #196	@ 0xc4
 8001abc:	af2a      	add	r7, sp, #168	@ 0xa8
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001ac2:	687c      	ldr	r4, [r7, #4]
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001ace:	232e      	movs	r3, #46	@ 0x2e
 8001ad0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001ad2:	4668      	mov	r0, sp
 8001ad4:	f104 0310 	add.w	r3, r4, #16
 8001ad8:	229c      	movs	r2, #156	@ 0x9c
 8001ada:	4619      	mov	r1, r3
 8001adc:	f004 fc55 	bl	800638a <memcpy>
 8001ae0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ae4:	f000 fe07 	bl	80026f6 <bno055_read_regs>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	75fb      	strb	r3, [r7, #23]
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <bno055_gravity_x+0x3e>
        return err;
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	e01c      	b.n	8001b30 <bno055_gravity_x+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <bno055_gravity_x+0x4a>
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <bno055_gravity_x+0x80>)
 8001b00:	e001      	b.n	8001b06 <bno055_gravity_x+0x4e>
 8001b02:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b06:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b08:	7b7b      	ldrb	r3, [r7, #13]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	7b3b      	ldrb	r3, [r7, #12]
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	ee07 3a90 	vmov	s15, r3
 8001b1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b20:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd90      	pop	{r4, r7, pc}
 8001b38:	42c80000 	.word	0x42c80000

08001b3c <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b0b1      	sub	sp, #196	@ 0xc4
 8001b40:	af2a      	add	r7, sp, #168	@ 0xa8
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001b46:	687c      	ldr	r4, [r7, #4]
 8001b48:	2302      	movs	r3, #2
 8001b4a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001b52:	2330      	movs	r3, #48	@ 0x30
 8001b54:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001b56:	4668      	mov	r0, sp
 8001b58:	f104 0310 	add.w	r3, r4, #16
 8001b5c:	229c      	movs	r2, #156	@ 0x9c
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f004 fc13 	bl	800638a <memcpy>
 8001b64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b68:	f000 fdc5 	bl	80026f6 <bno055_read_regs>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	75fb      	strb	r3, [r7, #23]
 8001b70:	7dfb      	ldrb	r3, [r7, #23]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <bno055_gravity_y+0x3e>
        return err;
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
 8001b78:	e01c      	b.n	8001bb4 <bno055_gravity_y+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <bno055_gravity_y+0x4a>
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <bno055_gravity_y+0x80>)
 8001b84:	e001      	b.n	8001b8a <bno055_gravity_y+0x4e>
 8001b86:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b8a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b8c:	7b7b      	ldrb	r3, [r7, #13]
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	b21a      	sxth	r2, r3
 8001b94:	7b3b      	ldrb	r3, [r7, #12]
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	ee07 3a90 	vmov	s15, r3
 8001ba0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ba4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd90      	pop	{r4, r7, pc}
 8001bbc:	42c80000 	.word	0x42c80000

08001bc0 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b0b1      	sub	sp, #196	@ 0xc4
 8001bc4:	af2a      	add	r7, sp, #168	@ 0xa8
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001bca:	687c      	ldr	r4, [r7, #4]
 8001bcc:	2302      	movs	r3, #2
 8001bce:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001bd0:	f107 030c 	add.w	r3, r7, #12
 8001bd4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001bd6:	2332      	movs	r3, #50	@ 0x32
 8001bd8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001bda:	4668      	mov	r0, sp
 8001bdc:	f104 0310 	add.w	r3, r4, #16
 8001be0:	229c      	movs	r2, #156	@ 0x9c
 8001be2:	4619      	mov	r1, r3
 8001be4:	f004 fbd1 	bl	800638a <memcpy>
 8001be8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bec:	f000 fd83 	bl	80026f6 <bno055_read_regs>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	75fb      	strb	r3, [r7, #23]
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <bno055_gravity_z+0x3e>
        return err;
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	e01c      	b.n	8001c38 <bno055_gravity_z+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <bno055_gravity_z+0x4a>
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <bno055_gravity_z+0x80>)
 8001c08:	e001      	b.n	8001c0e <bno055_gravity_z+0x4e>
 8001c0a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001c0e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001c10:	7b7b      	ldrb	r3, [r7, #13]
 8001c12:	b21b      	sxth	r3, r3
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	b21a      	sxth	r2, r3
 8001c18:	7b3b      	ldrb	r3, [r7, #12]
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	ee07 3a90 	vmov	s15, r3
 8001c24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c28:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	371c      	adds	r7, #28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}
 8001c40:	42c80000 	.word	0x42c80000

08001c44 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b0b1      	sub	sp, #196	@ 0xc4
 8001c48:	af2a      	add	r7, sp, #168	@ 0xa8
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001c4e:	687c      	ldr	r4, [r7, #4]
 8001c50:	2306      	movs	r3, #6
 8001c52:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001c5a:	232e      	movs	r3, #46	@ 0x2e
 8001c5c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001c5e:	4668      	mov	r0, sp
 8001c60:	f104 0310 	add.w	r3, r4, #16
 8001c64:	229c      	movs	r2, #156	@ 0x9c
 8001c66:	4619      	mov	r1, r3
 8001c68:	f004 fb8f 	bl	800638a <memcpy>
 8001c6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c70:	f000 fd41 	bl	80026f6 <bno055_read_regs>
 8001c74:	4603      	mov	r3, r0
 8001c76:	75fb      	strb	r3, [r7, #23]
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <bno055_gravity+0x3e>
        return err;
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
 8001c80:	e042      	b.n	8001d08 <bno055_gravity+0xc4>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <bno055_gravity+0x4a>
 8001c8a:	4b21      	ldr	r3, [pc, #132]	@ (8001d10 <bno055_gravity+0xcc>)
 8001c8c:	e001      	b.n	8001c92 <bno055_gravity+0x4e>
 8001c8e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001c92:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001c94:	7a7b      	ldrb	r3, [r7, #9]
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	021b      	lsls	r3, r3, #8
 8001c9a:	b21a      	sxth	r2, r3
 8001c9c:	7a3b      	ldrb	r3, [r7, #8]
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cac:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001cba:	7afb      	ldrb	r3, [r7, #11]
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	b21a      	sxth	r2, r3
 8001cc2:	7abb      	ldrb	r3, [r7, #10]
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	ee07 3a90 	vmov	s15, r3
 8001cce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cd2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001ce0:	7b7b      	ldrb	r3, [r7, #13]
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	7b3b      	ldrb	r3, [r7, #12]
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	4313      	orrs	r3, r2
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	ee07 3a90 	vmov	s15, r3
 8001cf4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cf8:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	371c      	adds	r7, #28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd90      	pop	{r4, r7, pc}
 8001d10:	42c80000 	.word	0x42c80000

08001d14 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b0b1      	sub	sp, #196	@ 0xc4
 8001d18:	af2a      	add	r7, sp, #168	@ 0xa8
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001d1e:	687c      	ldr	r4, [r7, #4]
 8001d20:	2302      	movs	r3, #2
 8001d22:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001d24:	f107 030c 	add.w	r3, r7, #12
 8001d28:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001d2a:	231a      	movs	r3, #26
 8001d2c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001d2e:	4668      	mov	r0, sp
 8001d30:	f104 0310 	add.w	r3, r4, #16
 8001d34:	229c      	movs	r2, #156	@ 0x9c
 8001d36:	4619      	mov	r1, r3
 8001d38:	f004 fb27 	bl	800638a <memcpy>
 8001d3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d40:	f000 fcd9 	bl	80026f6 <bno055_read_regs>
 8001d44:	4603      	mov	r3, r0
 8001d46:	75fb      	strb	r3, [r7, #23]
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 8001d4e:	7dfb      	ldrb	r3, [r7, #23]
 8001d50:	e01c      	b.n	8001d8c <bno055_euler_yaw+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <bno055_euler_yaw+0x4c>
 8001d5a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001d5e:	e000      	b.n	8001d62 <bno055_euler_yaw+0x4e>
 8001d60:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001d62:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001d64:	7b7b      	ldrb	r3, [r7, #13]
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	021b      	lsls	r3, r3, #8
 8001d6a:	b21a      	sxth	r2, r3
 8001d6c:	7b3b      	ldrb	r3, [r7, #12]
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	4313      	orrs	r3, r2
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	ee07 3a90 	vmov	s15, r3
 8001d78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d7c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd90      	pop	{r4, r7, pc}
 8001d94:	44610000 	.word	0x44610000

08001d98 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b0b1      	sub	sp, #196	@ 0xc4
 8001d9c:	af2a      	add	r7, sp, #168	@ 0xa8
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001da2:	687c      	ldr	r4, [r7, #4]
 8001da4:	2302      	movs	r3, #2
 8001da6:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001dae:	231c      	movs	r3, #28
 8001db0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001db2:	4668      	mov	r0, sp
 8001db4:	f104 0310 	add.w	r3, r4, #16
 8001db8:	229c      	movs	r2, #156	@ 0x9c
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f004 fae5 	bl	800638a <memcpy>
 8001dc0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dc4:	f000 fc97 	bl	80026f6 <bno055_read_regs>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	75fb      	strb	r3, [r7, #23]
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <bno055_euler_roll+0x3e>
        return err;
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
 8001dd4:	e01c      	b.n	8001e10 <bno055_euler_roll+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <bno055_euler_roll+0x4c>
 8001dde:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001de2:	e000      	b.n	8001de6 <bno055_euler_roll+0x4e>
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001de6:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001de8:	7b7b      	ldrb	r3, [r7, #13]
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	b21a      	sxth	r2, r3
 8001df0:	7b3b      	ldrb	r3, [r7, #12]
 8001df2:	b21b      	sxth	r3, r3
 8001df4:	4313      	orrs	r3, r2
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e00:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	371c      	adds	r7, #28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd90      	pop	{r4, r7, pc}
 8001e18:	44610000 	.word	0x44610000

08001e1c <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001e1c:	b590      	push	{r4, r7, lr}
 8001e1e:	b0b1      	sub	sp, #196	@ 0xc4
 8001e20:	af2a      	add	r7, sp, #168	@ 0xa8
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8001e26:	687c      	ldr	r4, [r7, #4]
 8001e28:	2302      	movs	r3, #2
 8001e2a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001e32:	231e      	movs	r3, #30
 8001e34:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001e36:	4668      	mov	r0, sp
 8001e38:	f104 0310 	add.w	r3, r4, #16
 8001e3c:	229c      	movs	r2, #156	@ 0x9c
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f004 faa3 	bl	800638a <memcpy>
 8001e44:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e48:	f000 fc55 	bl	80026f6 <bno055_read_regs>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	75fb      	strb	r3, [r7, #23]
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <bno055_euler_pitch+0x3e>
        return err;
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	e01c      	b.n	8001e94 <bno055_euler_pitch+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <bno055_euler_pitch+0x4c>
 8001e62:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001e66:	e000      	b.n	8001e6a <bno055_euler_pitch+0x4e>
 8001e68:	4b0c      	ldr	r3, [pc, #48]	@ (8001e9c <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e6a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001e6c:	7b7b      	ldrb	r3, [r7, #13]
 8001e6e:	b21b      	sxth	r3, r3
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	b21a      	sxth	r2, r3
 8001e74:	7b3b      	ldrb	r3, [r7, #12]
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	ee07 3a90 	vmov	s15, r3
 8001e80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e84:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd90      	pop	{r4, r7, pc}
 8001e9c:	44610000 	.word	0x44610000

08001ea0 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b0b1      	sub	sp, #196	@ 0xc4
 8001ea4:	af2a      	add	r7, sp, #168	@ 0xa8
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8001eaa:	687c      	ldr	r4, [r7, #4]
 8001eac:	2306      	movs	r3, #6
 8001eae:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001eb0:	f107 0308 	add.w	r3, r7, #8
 8001eb4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001eb6:	231a      	movs	r3, #26
 8001eb8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001eba:	4668      	mov	r0, sp
 8001ebc:	f104 0310 	add.w	r3, r4, #16
 8001ec0:	229c      	movs	r2, #156	@ 0x9c
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f004 fa61 	bl	800638a <memcpy>
 8001ec8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ecc:	f000 fc13 	bl	80026f6 <bno055_read_regs>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	75fb      	strb	r3, [r7, #23]
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
 8001edc:	e042      	b.n	8001f64 <bno055_euler+0xc4>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <bno055_euler+0x4c>
 8001ee6:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001eea:	e000      	b.n	8001eee <bno055_euler+0x4e>
 8001eec:	4b1f      	ldr	r3, [pc, #124]	@ (8001f6c <bno055_euler+0xcc>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001eee:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001ef0:	7a7b      	ldrb	r3, [r7, #9]
 8001ef2:	b21b      	sxth	r3, r3
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	b21a      	sxth	r2, r3
 8001ef8:	7a3b      	ldrb	r3, [r7, #8]
 8001efa:	b21b      	sxth	r3, r3
 8001efc:	4313      	orrs	r3, r2
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f08:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	7abb      	ldrb	r3, [r7, #10]
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	4313      	orrs	r3, r2
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8001f3c:	7b7b      	ldrb	r3, [r7, #13]
 8001f3e:	b21b      	sxth	r3, r3
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	b21a      	sxth	r2, r3
 8001f44:	7b3b      	ldrb	r3, [r7, #12]
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f54:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd90      	pop	{r4, r7, pc}
 8001f6c:	44610000 	.word	0x44610000

08001f70 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b0af      	sub	sp, #188	@ 0xbc
 8001f74:	af2a      	add	r7, sp, #168	@ 0xa8
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8001f7a:	687c      	ldr	r4, [r7, #4]
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001f80:	f107 030c 	add.w	r3, r7, #12
 8001f84:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001f86:	2320      	movs	r3, #32
 8001f88:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001f8a:	4668      	mov	r0, sp
 8001f8c:	f104 0310 	add.w	r3, r4, #16
 8001f90:	229c      	movs	r2, #156	@ 0x9c
 8001f92:	4619      	mov	r1, r3
 8001f94:	f004 f9f9 	bl	800638a <memcpy>
 8001f98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f9c:	f000 fbab 	bl	80026f6 <bno055_read_regs>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <bno055_quaternion_w+0x3e>
        return err;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	e013      	b.n	8001fd6 <bno055_quaternion_w+0x66>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001fae:	7b7b      	ldrb	r3, [r7, #13]
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	b21a      	sxth	r2, r3
 8001fb6:	7b3b      	ldrb	r3, [r7, #12]
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc6:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001fe0 <bno055_quaternion_w+0x70>
 8001fca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd90      	pop	{r4, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	46800000 	.word	0x46800000

08001fe4 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b0af      	sub	sp, #188	@ 0xbc
 8001fe8:	af2a      	add	r7, sp, #168	@ 0xa8
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001fee:	687c      	ldr	r4, [r7, #4]
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001ffa:	2322      	movs	r3, #34	@ 0x22
 8001ffc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001ffe:	4668      	mov	r0, sp
 8002000:	f104 0310 	add.w	r3, r4, #16
 8002004:	229c      	movs	r2, #156	@ 0x9c
 8002006:	4619      	mov	r1, r3
 8002008:	f004 f9bf 	bl	800638a <memcpy>
 800200c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002010:	f000 fb71 	bl	80026f6 <bno055_read_regs>
 8002014:	4603      	mov	r3, r0
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <bno055_quaternion_x+0x3e>
        return err;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	e013      	b.n	800204a <bno055_quaternion_x+0x66>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002022:	7b7b      	ldrb	r3, [r7, #13]
 8002024:	b21b      	sxth	r3, r3
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	b21a      	sxth	r2, r3
 800202a:	7b3b      	ldrb	r3, [r7, #12]
 800202c:	b21b      	sxth	r3, r3
 800202e:	4313      	orrs	r3, r2
 8002030:	b21b      	sxth	r3, r3
 8002032:	ee07 3a90 	vmov	s15, r3
 8002036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800203a:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002054 <bno055_quaternion_x+0x70>
 800203e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	bd90      	pop	{r4, r7, pc}
 8002052:	bf00      	nop
 8002054:	46800000 	.word	0x46800000

08002058 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b0af      	sub	sp, #188	@ 0xbc
 800205c:	af2a      	add	r7, sp, #168	@ 0xa8
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002062:	687c      	ldr	r4, [r7, #4]
 8002064:	2302      	movs	r3, #2
 8002066:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800206e:	2324      	movs	r3, #36	@ 0x24
 8002070:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002072:	4668      	mov	r0, sp
 8002074:	f104 0310 	add.w	r3, r4, #16
 8002078:	229c      	movs	r2, #156	@ 0x9c
 800207a:	4619      	mov	r1, r3
 800207c:	f004 f985 	bl	800638a <memcpy>
 8002080:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002084:	f000 fb37 	bl	80026f6 <bno055_read_regs>
 8002088:	4603      	mov	r3, r0
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <bno055_quaternion_y+0x3e>
        return err;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	e013      	b.n	80020be <bno055_quaternion_y+0x66>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002096:	7b7b      	ldrb	r3, [r7, #13]
 8002098:	b21b      	sxth	r3, r3
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	b21a      	sxth	r2, r3
 800209e:	7b3b      	ldrb	r3, [r7, #12]
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	ee07 3a90 	vmov	s15, r3
 80020aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ae:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80020c8 <bno055_quaternion_y+0x70>
 80020b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd90      	pop	{r4, r7, pc}
 80020c6:	bf00      	nop
 80020c8:	46800000 	.word	0x46800000

080020cc <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b0af      	sub	sp, #188	@ 0xbc
 80020d0:	af2a      	add	r7, sp, #168	@ 0xa8
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80020d6:	687c      	ldr	r4, [r7, #4]
 80020d8:	2302      	movs	r3, #2
 80020da:	9329      	str	r3, [sp, #164]	@ 0xa4
 80020dc:	f107 030c 	add.w	r3, r7, #12
 80020e0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80020e2:	2326      	movs	r3, #38	@ 0x26
 80020e4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80020e6:	4668      	mov	r0, sp
 80020e8:	f104 0310 	add.w	r3, r4, #16
 80020ec:	229c      	movs	r2, #156	@ 0x9c
 80020ee:	4619      	mov	r1, r3
 80020f0:	f004 f94b 	bl	800638a <memcpy>
 80020f4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020f8:	f000 fafd 	bl	80026f6 <bno055_read_regs>
 80020fc:	4603      	mov	r3, r0
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <bno055_quaternion_z+0x3e>
        return err;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	e013      	b.n	8002132 <bno055_quaternion_z+0x66>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800210a:	7b7b      	ldrb	r3, [r7, #13]
 800210c:	b21b      	sxth	r3, r3
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	b21a      	sxth	r2, r3
 8002112:	7b3b      	ldrb	r3, [r7, #12]
 8002114:	b21b      	sxth	r3, r3
 8002116:	4313      	orrs	r3, r2
 8002118:	b21b      	sxth	r3, r3
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002122:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800213c <bno055_quaternion_z+0x70>
 8002126:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bd90      	pop	{r4, r7, pc}
 800213a:	bf00      	nop
 800213c:	46800000 	.word	0x46800000

08002140 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b0b1      	sub	sp, #196	@ 0xc4
 8002144:	af2a      	add	r7, sp, #168	@ 0xa8
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 800214a:	687c      	ldr	r4, [r7, #4]
 800214c:	2308      	movs	r3, #8
 800214e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002156:	2320      	movs	r3, #32
 8002158:	9327      	str	r3, [sp, #156]	@ 0x9c
 800215a:	4668      	mov	r0, sp
 800215c:	f104 0310 	add.w	r3, r4, #16
 8002160:	229c      	movs	r2, #156	@ 0x9c
 8002162:	4619      	mov	r1, r3
 8002164:	f004 f911 	bl	800638a <memcpy>
 8002168:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800216c:	f000 fac3 	bl	80026f6 <bno055_read_regs>
 8002170:	4603      	mov	r3, r0
 8002172:	75fb      	strb	r3, [r7, #23]
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <bno055_quaternion+0x3e>
        return err;
 800217a:	7dfb      	ldrb	r3, [r7, #23]
 800217c:	e04c      	b.n	8002218 <bno055_quaternion+0xd8>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800217e:	7b7b      	ldrb	r3, [r7, #13]
 8002180:	b21b      	sxth	r3, r3
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	b21a      	sxth	r2, r3
 8002186:	7b3b      	ldrb	r3, [r7, #12]
 8002188:	b21b      	sxth	r3, r3
 800218a:	4313      	orrs	r3, r2
 800218c:	b21b      	sxth	r3, r3
 800218e:	ee07 3a90 	vmov	s15, r3
 8002192:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002196:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8002220 <bno055_quaternion+0xe0>
 800219a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	7bbb      	ldrb	r3, [r7, #14]
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	ee07 3a90 	vmov	s15, r3
 80021b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021bc:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8002220 <bno055_quaternion+0xe0>
 80021c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 80021ca:	7c7b      	ldrb	r3, [r7, #17]
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	7c3b      	ldrb	r3, [r7, #16]
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b21b      	sxth	r3, r3
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021e2:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8002220 <bno055_quaternion+0xe0>
 80021e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	b21a      	sxth	r2, r3
 80021f8:	7cbb      	ldrb	r3, [r7, #18]
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	4313      	orrs	r3, r2
 80021fe:	b21b      	sxth	r3, r3
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002208:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002220 <bno055_quaternion+0xe0>
 800220c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd90      	pop	{r4, r7, pc}
 8002220:	46800000 	.word	0x46800000

08002224 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b0af      	sub	sp, #188	@ 0xbc
 8002228:	af2a      	add	r7, sp, #168	@ 0xa8
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	4608      	mov	r0, r1
 800222e:	4611      	mov	r1, r2
 8002230:	461a      	mov	r2, r3
 8002232:	4603      	mov	r3, r0
 8002234:	70fb      	strb	r3, [r7, #3]
 8002236:	460b      	mov	r3, r1
 8002238:	70bb      	strb	r3, [r7, #2]
 800223a:	4613      	mov	r3, r2
 800223c:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800223e:	2101      	movs	r1, #1
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fabc 	bl	80027be <bno055_set_page>
 8002246:	4603      	mov	r3, r0
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <bno055_acc_conf+0x30>
        return err;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	e04b      	b.n	80022ec <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002254:	2100      	movs	r1, #0
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f91b 	bl	8002492 <bno055_set_opmode>
 800225c:	4603      	mov	r3, r0
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <bno055_acc_conf+0x46>
        return err;
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	e040      	b.n	80022ec <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800226a:	200c      	movs	r0, #12
 800226c:	f001 f838 	bl	80032e0 <HAL_Delay>
    u8 config = range | bandwidth | mode;
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	78bb      	ldrb	r3, [r7, #2]
 8002274:	4313      	orrs	r3, r2
 8002276:	b2da      	uxtb	r2, r3
 8002278:	787b      	ldrb	r3, [r7, #1]
 800227a:	4313      	orrs	r3, r2
 800227c:	b2db      	uxtb	r3, r3
 800227e:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 8002280:	687c      	ldr	r4, [r7, #4]
 8002282:	2301      	movs	r3, #1
 8002284:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002286:	f107 030e 	add.w	r3, r7, #14
 800228a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800228c:	2308      	movs	r3, #8
 800228e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002290:	4668      	mov	r0, sp
 8002292:	f104 0310 	add.w	r3, r4, #16
 8002296:	229c      	movs	r2, #156	@ 0x9c
 8002298:	4619      	mov	r1, r3
 800229a:	f004 f876 	bl	800638a <memcpy>
 800229e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022a2:	f000 fa5e 	bl	8002762 <bno055_write_regs>
 80022a6:	4603      	mov	r3, r0
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <bno055_acc_conf+0x90>
        return err;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	e01b      	b.n	80022ec <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	791b      	ldrb	r3, [r3, #4]
 80022b8:	4619      	mov	r1, r3
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8e9 	bl	8002492 <bno055_set_opmode>
 80022c0:	4603      	mov	r3, r0
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <bno055_acc_conf+0xaa>
        return err;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	e00e      	b.n	80022ec <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80022ce:	2018      	movs	r0, #24
 80022d0:	f001 f806 	bl	80032e0 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80022d4:	2100      	movs	r1, #0
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fa71 	bl	80027be <bno055_set_page>
 80022dc:	4603      	mov	r3, r0
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <bno055_acc_conf+0xc6>
        return err;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	e000      	b.n	80022ec <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd90      	pop	{r4, r7, pc}

080022f4 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b0af      	sub	sp, #188	@ 0xbc
 80022f8:	af2a      	add	r7, sp, #168	@ 0xa8
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	4608      	mov	r0, r1
 80022fe:	4611      	mov	r1, r2
 8002300:	461a      	mov	r2, r3
 8002302:	4603      	mov	r3, r0
 8002304:	70fb      	strb	r3, [r7, #3]
 8002306:	460b      	mov	r3, r1
 8002308:	70bb      	strb	r3, [r7, #2]
 800230a:	4613      	mov	r3, r2
 800230c:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800230e:	2101      	movs	r1, #1
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 fa54 	bl	80027be <bno055_set_page>
 8002316:	4603      	mov	r3, r0
 8002318:	73fb      	strb	r3, [r7, #15]
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <bno055_gyr_conf+0x30>
        return err;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	e04a      	b.n	80023ba <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002324:	2100      	movs	r1, #0
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f8b3 	bl	8002492 <bno055_set_opmode>
 800232c:	4603      	mov	r3, r0
 800232e:	73fb      	strb	r3, [r7, #15]
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <bno055_gyr_conf+0x46>
        return err;
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	e03f      	b.n	80023ba <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800233a:	200c      	movs	r0, #12
 800233c:	f000 ffd0 	bl	80032e0 <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	78bb      	ldrb	r3, [r7, #2]
 8002344:	4313      	orrs	r3, r2
 8002346:	b2db      	uxtb	r3, r3
 8002348:	733b      	strb	r3, [r7, #12]
 800234a:	787b      	ldrb	r3, [r7, #1]
 800234c:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 800234e:	687c      	ldr	r4, [r7, #4]
 8002350:	2302      	movs	r3, #2
 8002352:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	9328      	str	r3, [sp, #160]	@ 0xa0
 800235a:	230a      	movs	r3, #10
 800235c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800235e:	4668      	mov	r0, sp
 8002360:	f104 0310 	add.w	r3, r4, #16
 8002364:	229c      	movs	r2, #156	@ 0x9c
 8002366:	4619      	mov	r1, r3
 8002368:	f004 f80f 	bl	800638a <memcpy>
 800236c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002370:	f000 f9f7 	bl	8002762 <bno055_write_regs>
 8002374:	4603      	mov	r3, r0
 8002376:	73fb      	strb	r3, [r7, #15]
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	e01b      	b.n	80023ba <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	791b      	ldrb	r3, [r3, #4]
 8002386:	4619      	mov	r1, r3
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f882 	bl	8002492 <bno055_set_opmode>
 800238e:	4603      	mov	r3, r0
 8002390:	73fb      	strb	r3, [r7, #15]
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <bno055_gyr_conf+0xa8>
        return err;
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	e00e      	b.n	80023ba <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800239c:	2018      	movs	r0, #24
 800239e:	f000 ff9f 	bl	80032e0 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80023a2:	2100      	movs	r1, #0
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fa0a 	bl	80027be <bno055_set_page>
 80023aa:	4603      	mov	r3, r0
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <bno055_gyr_conf+0xc4>
        return err;
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	e000      	b.n	80023ba <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd90      	pop	{r4, r7, pc}

080023c2 <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 80023c2:	b590      	push	{r4, r7, lr}
 80023c4:	b0af      	sub	sp, #188	@ 0xbc
 80023c6:	af2a      	add	r7, sp, #168	@ 0xa8
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	4608      	mov	r0, r1
 80023cc:	4611      	mov	r1, r2
 80023ce:	461a      	mov	r2, r3
 80023d0:	4603      	mov	r3, r0
 80023d2:	70fb      	strb	r3, [r7, #3]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70bb      	strb	r3, [r7, #2]
 80023d8:	4613      	mov	r3, r2
 80023da:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 80023dc:	2101      	movs	r1, #1
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f9ed 	bl	80027be <bno055_set_page>
 80023e4:	4603      	mov	r3, r0
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <bno055_mag_conf+0x30>
        return err;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	e04b      	b.n	800248a <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80023f2:	2100      	movs	r1, #0
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f84c 	bl	8002492 <bno055_set_opmode>
 80023fa:	4603      	mov	r3, r0
 80023fc:	73fb      	strb	r3, [r7, #15]
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <bno055_mag_conf+0x46>
        return err;
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	e040      	b.n	800248a <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002408:	200c      	movs	r0, #12
 800240a:	f000 ff69 	bl	80032e0 <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	78bb      	ldrb	r3, [r7, #2]
 8002412:	4313      	orrs	r3, r2
 8002414:	b2da      	uxtb	r2, r3
 8002416:	787b      	ldrb	r3, [r7, #1]
 8002418:	4313      	orrs	r3, r2
 800241a:	b2db      	uxtb	r3, r3
 800241c:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 800241e:	687c      	ldr	r4, [r7, #4]
 8002420:	2301      	movs	r3, #1
 8002422:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002424:	f107 030e 	add.w	r3, r7, #14
 8002428:	9328      	str	r3, [sp, #160]	@ 0xa0
 800242a:	2309      	movs	r3, #9
 800242c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800242e:	4668      	mov	r0, sp
 8002430:	f104 0310 	add.w	r3, r4, #16
 8002434:	229c      	movs	r2, #156	@ 0x9c
 8002436:	4619      	mov	r1, r3
 8002438:	f003 ffa7 	bl	800638a <memcpy>
 800243c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002440:	f000 f98f 	bl	8002762 <bno055_write_regs>
 8002444:	4603      	mov	r3, r0
 8002446:	73fb      	strb	r3, [r7, #15]
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <bno055_mag_conf+0x90>
        return err;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	e01b      	b.n	800248a <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	791b      	ldrb	r3, [r3, #4]
 8002456:	4619      	mov	r1, r3
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f81a 	bl	8002492 <bno055_set_opmode>
 800245e:	4603      	mov	r3, r0
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <bno055_mag_conf+0xaa>
        return err;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	e00e      	b.n	800248a <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800246c:	2018      	movs	r0, #24
 800246e:	f000 ff37 	bl	80032e0 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002472:	2100      	movs	r1, #0
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f9a2 	bl	80027be <bno055_set_page>
 800247a:	4603      	mov	r3, r0
 800247c:	73fb      	strb	r3, [r7, #15]
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <bno055_mag_conf+0xc6>
        return err;
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	e000      	b.n	800248a <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bd90      	pop	{r4, r7, pc}

08002492 <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 8002492:	b590      	push	{r4, r7, lr}
 8002494:	b0af      	sub	sp, #188	@ 0xbc
 8002496:	af2a      	add	r7, sp, #168	@ 0xa8
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 800249e:	687c      	ldr	r4, [r7, #4]
 80024a0:	2301      	movs	r3, #1
 80024a2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80024a4:	1cfb      	adds	r3, r7, #3
 80024a6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80024a8:	233d      	movs	r3, #61	@ 0x3d
 80024aa:	9327      	str	r3, [sp, #156]	@ 0x9c
 80024ac:	4668      	mov	r0, sp
 80024ae:	f104 0310 	add.w	r3, r4, #16
 80024b2:	229c      	movs	r2, #156	@ 0x9c
 80024b4:	4619      	mov	r1, r3
 80024b6:	f003 ff68 	bl	800638a <memcpy>
 80024ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024be:	f000 f950 	bl	8002762 <bno055_write_regs>
 80024c2:	4603      	mov	r3, r0
 80024c4:	73fb      	strb	r3, [r7, #15]
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	e003      	b.n	80024d8 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80024d0:	2018      	movs	r0, #24
 80024d2:	f000 ff05 	bl	80032e0 <HAL_Delay>
    return BNO_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd90      	pop	{r4, r7, pc}

080024e0 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b0af      	sub	sp, #188	@ 0xbc
 80024e4:	af2a      	add	r7, sp, #168	@ 0xa8
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	4608      	mov	r0, r1
 80024ea:	4611      	mov	r1, r2
 80024ec:	461a      	mov	r2, r3
 80024ee:	4603      	mov	r3, r0
 80024f0:	70fb      	strb	r3, [r7, #3]
 80024f2:	460b      	mov	r3, r1
 80024f4:	70bb      	strb	r3, [r7, #2]
 80024f6:	4613      	mov	r3, r2
 80024f8:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80024fa:	2100      	movs	r1, #0
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ffc8 	bl	8002492 <bno055_set_opmode>
 8002502:	4603      	mov	r3, r0
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <bno055_set_unit+0x30>
        return err;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	e04b      	b.n	80025a8 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002510:	2100      	movs	r1, #0
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f953 	bl	80027be <bno055_set_page>
 8002518:	4603      	mov	r3, r0
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <bno055_set_unit+0x46>
        return err;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	e040      	b.n	80025a8 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	78bb      	ldrb	r3, [r7, #2]
 800252a:	4313      	orrs	r3, r2
 800252c:	b2da      	uxtb	r2, r3
 800252e:	787b      	ldrb	r3, [r7, #1]
 8002530:	4313      	orrs	r3, r2
 8002532:	b2da      	uxtb	r2, r3
 8002534:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002538:	4313      	orrs	r3, r2
 800253a:	b2db      	uxtb	r3, r3
 800253c:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 800253e:	687c      	ldr	r4, [r7, #4]
 8002540:	2301      	movs	r3, #1
 8002542:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002544:	f107 030e 	add.w	r3, r7, #14
 8002548:	9328      	str	r3, [sp, #160]	@ 0xa0
 800254a:	233b      	movs	r3, #59	@ 0x3b
 800254c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800254e:	4668      	mov	r0, sp
 8002550:	f104 0310 	add.w	r3, r4, #16
 8002554:	229c      	movs	r2, #156	@ 0x9c
 8002556:	4619      	mov	r1, r3
 8002558:	f003 ff17 	bl	800638a <memcpy>
 800255c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002560:	f000 f8ff 	bl	8002762 <bno055_write_regs>
 8002564:	4603      	mov	r3, r0
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <bno055_set_unit+0x92>
        return err;
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	e01a      	b.n	80025a8 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	78ba      	ldrb	r2, [r7, #2]
 8002576:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	787a      	ldrb	r2, [r7, #1]
 800257c:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002584:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	791b      	ldrb	r3, [r3, #4]
 8002590:	4619      	mov	r1, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ff7d 	bl	8002492 <bno055_set_opmode>
 8002598:	4603      	mov	r3, r0
 800259a:	73fb      	strb	r3, [r7, #15]
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <bno055_set_unit+0xc6>
        return err;
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	e000      	b.n	80025a8 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd90      	pop	{r4, r7, pc}

080025b0 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b0af      	sub	sp, #188	@ 0xbc
 80025b4:	af2a      	add	r7, sp, #168	@ 0xa8
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 80025c2:	2304      	movs	r3, #4
 80025c4:	e04d      	b.n	8002662 <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 80025c6:	2100      	movs	r1, #0
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ff62 	bl	8002492 <bno055_set_opmode>
 80025ce:	4603      	mov	r3, r0
 80025d0:	73fb      	strb	r3, [r7, #15]
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <bno055_set_pwr_mode+0x2c>
        return err;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	e042      	b.n	8002662 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80025dc:	2100      	movs	r1, #0
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f8ed 	bl	80027be <bno055_set_page>
 80025e4:	4603      	mov	r3, r0
 80025e6:	73fb      	strb	r3, [r7, #15]
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <bno055_set_pwr_mode+0x42>
        return err;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	e037      	b.n	8002662 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 80025f2:	687c      	ldr	r4, [r7, #4]
 80025f4:	2301      	movs	r3, #1
 80025f6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80025f8:	1cfb      	adds	r3, r7, #3
 80025fa:	9328      	str	r3, [sp, #160]	@ 0xa0
 80025fc:	233e      	movs	r3, #62	@ 0x3e
 80025fe:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002600:	4668      	mov	r0, sp
 8002602:	f104 0310 	add.w	r3, r4, #16
 8002606:	229c      	movs	r2, #156	@ 0x9c
 8002608:	4619      	mov	r1, r3
 800260a:	f003 febe 	bl	800638a <memcpy>
 800260e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002612:	f000 f8a6 	bl	8002762 <bno055_write_regs>
 8002616:	4603      	mov	r3, r0
 8002618:	73fb      	strb	r3, [r7, #15]
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	e01e      	b.n	8002662 <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8002624:	78fa      	ldrb	r2, [r7, #3]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800262a:	2100      	movs	r1, #0
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f8c6 	bl	80027be <bno055_set_page>
 8002632:	4603      	mov	r3, r0
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <bno055_set_pwr_mode+0x90>
        return err;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	e010      	b.n	8002662 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	791b      	ldrb	r3, [r3, #4]
 8002644:	4619      	mov	r1, r3
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ff23 	bl	8002492 <bno055_set_opmode>
 800264c:	4603      	mov	r3, r0
 800264e:	73fb      	strb	r3, [r7, #15]
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <bno055_set_pwr_mode+0xaa>
        return err;
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	e003      	b.n	8002662 <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 800265a:	2002      	movs	r0, #2
 800265c:	f000 fe40 	bl	80032e0 <HAL_Delay>
    return BNO_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bd90      	pop	{r4, r7, pc}

0800266a <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 800266a:	b590      	push	{r4, r7, lr}
 800266c:	b0af      	sub	sp, #188	@ 0xbc
 800266e:	af2a      	add	r7, sp, #168	@ 0xa8
 8002670:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 8002672:	2320      	movs	r3, #32
 8002674:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8002676:	687c      	ldr	r4, [r7, #4]
 8002678:	2301      	movs	r3, #1
 800267a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800267c:	f107 030f 	add.w	r3, r7, #15
 8002680:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002682:	233f      	movs	r3, #63	@ 0x3f
 8002684:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002686:	4668      	mov	r0, sp
 8002688:	f104 0310 	add.w	r3, r4, #16
 800268c:	229c      	movs	r2, #156	@ 0x9c
 800268e:	4619      	mov	r1, r3
 8002690:	f003 fe7b 	bl	800638a <memcpy>
 8002694:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002698:	f000 f863 	bl	8002762 <bno055_write_regs>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <bno055_reset+0x3e>
    }
    return BNO_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd90      	pop	{r4, r7, pc}

080026b0 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b0af      	sub	sp, #188	@ 0xbc
 80026b4:	af2a      	add	r7, sp, #168	@ 0xa8
 80026b6:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80026bc:	687c      	ldr	r4, [r7, #4]
 80026be:	2301      	movs	r3, #1
 80026c0:	9329      	str	r3, [sp, #164]	@ 0xa4
 80026c2:	f107 030f 	add.w	r3, r7, #15
 80026c6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80026c8:	233f      	movs	r3, #63	@ 0x3f
 80026ca:	9327      	str	r3, [sp, #156]	@ 0x9c
 80026cc:	4668      	mov	r0, sp
 80026ce:	f104 0310 	add.w	r3, r4, #16
 80026d2:	229c      	movs	r2, #156	@ 0x9c
 80026d4:	4619      	mov	r1, r3
 80026d6:	f003 fe58 	bl	800638a <memcpy>
 80026da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026de:	f000 f840 	bl	8002762 <bno055_write_regs>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <bno055_on+0x3c>
        return BNO_ERR_I2C;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <bno055_on+0x3e>
    }
    return BNO_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd90      	pop	{r4, r7, pc}

080026f6 <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 80026f6:	b084      	sub	sp, #16
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	f107 0c10 	add.w	ip, r7, #16
 8002702:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8002706:	6938      	ldr	r0, [r7, #16]
 8002708:	7dbb      	ldrb	r3, [r7, #22]
 800270a:	4619      	mov	r1, r3
 800270c:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	2301      	movs	r3, #1
 8002718:	f001 f9c4 	bl	8003aa4 <HAL_I2C_Master_Transmit>
 800271c:	4603      	mov	r3, r0
 800271e:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8002726:	2301      	movs	r3, #1
 8002728:	e014      	b.n	8002754 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 800272a:	6938      	ldr	r0, [r7, #16]
 800272c:	7dbb      	ldrb	r3, [r7, #22]
 800272e:	4619      	mov	r1, r3
 8002730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002734:	b29b      	uxth	r3, r3
 8002736:	f04f 32ff 	mov.w	r2, #4294967295
 800273a:	9200      	str	r2, [sp, #0]
 800273c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002740:	f001 faae 	bl	8003ca0 <HAL_I2C_Master_Receive>
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800275e:	b004      	add	sp, #16
 8002760:	4770      	bx	lr

08002762 <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 8002762:	b084      	sub	sp, #16
 8002764:	b5b0      	push	{r4, r5, r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af04      	add	r7, sp, #16
 800276a:	f107 0418 	add.w	r4, r7, #24
 800276e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 8002772:	69b8      	ldr	r0, [r7, #24]
 8002774:	7fbb      	ldrb	r3, [r7, #30]
 8002776:	461d      	mov	r5, r3
 8002778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800277c:	b29a      	uxth	r2, r3
 800277e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002782:	b299      	uxth	r1, r3
 8002784:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002788:	b29b      	uxth	r3, r3
 800278a:	f04f 34ff 	mov.w	r4, #4294967295
 800278e:	9402      	str	r4, [sp, #8]
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	460b      	mov	r3, r1
 800279a:	4629      	mov	r1, r5
 800279c:	f001 fcb2 	bl	8004104 <HAL_I2C_Mem_Write>
 80027a0:	4603      	mov	r3, r0
 80027a2:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <bno055_write_regs+0x4c>
        return BNO_ERR_I2C;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <bno055_write_regs+0x4e>
    }
    return BNO_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80027ba:	b004      	add	sp, #16
 80027bc:	4770      	bx	lr

080027be <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 80027be:	b590      	push	{r4, r7, lr}
 80027c0:	b0af      	sub	sp, #188	@ 0xbc
 80027c2:	af2a      	add	r7, sp, #168	@ 0xa8
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	7b5a      	ldrb	r2, [r3, #13]
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <bno055_set_page+0x1a>
        return BNO_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e024      	b.n	8002822 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d901      	bls.n	80027e2 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 80027de:	2302      	movs	r3, #2
 80027e0:	e01f      	b.n	8002822 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 80027e2:	687c      	ldr	r4, [r7, #4]
 80027e4:	2301      	movs	r3, #1
 80027e6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80027e8:	1cfb      	adds	r3, r7, #3
 80027ea:	9328      	str	r3, [sp, #160]	@ 0xa0
 80027ec:	2307      	movs	r3, #7
 80027ee:	9327      	str	r3, [sp, #156]	@ 0x9c
 80027f0:	4668      	mov	r0, sp
 80027f2:	f104 0310 	add.w	r3, r4, #16
 80027f6:	229c      	movs	r2, #156	@ 0x9c
 80027f8:	4619      	mov	r1, r3
 80027fa:	f003 fdc6 	bl	800638a <memcpy>
 80027fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002802:	f7ff ffae 	bl	8002762 <bno055_write_regs>
 8002806:	4603      	mov	r3, r0
 8002808:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <bno055_set_page+0x56>
        return err;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	e006      	b.n	8002822 <bno055_set_page+0x64>
    }
    imu->_page = page;
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 800281a:	2002      	movs	r0, #2
 800281c:	f000 fd60 	bl	80032e0 <HAL_Delay>
    return BNO_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bd90      	pop	{r4, r7, pc}
	...

0800282c <bno055_err_str>:

char* bno055_err_str(const error_bno err) {
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
    switch (err) {
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	2b06      	cmp	r3, #6
 800283a:	d81f      	bhi.n	800287c <bno055_err_str+0x50>
 800283c:	a201      	add	r2, pc, #4	@ (adr r2, 8002844 <bno055_err_str+0x18>)
 800283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002842:	bf00      	nop
 8002844:	08002861 	.word	0x08002861
 8002848:	08002865 	.word	0x08002865
 800284c:	08002869 	.word	0x08002869
 8002850:	08002875 	.word	0x08002875
 8002854:	0800286d 	.word	0x0800286d
 8002858:	08002871 	.word	0x08002871
 800285c:	08002879 	.word	0x08002879
        case BNO_OK:
            return "[BNO] Ok!";
 8002860:	4b0a      	ldr	r3, [pc, #40]	@ (800288c <bno055_err_str+0x60>)
 8002862:	e00c      	b.n	800287e <bno055_err_str+0x52>
        case BNO_ERR_I2C:
            return "[BNO] I2C error!";
 8002864:	4b0a      	ldr	r3, [pc, #40]	@ (8002890 <bno055_err_str+0x64>)
 8002866:	e00a      	b.n	800287e <bno055_err_str+0x52>
        case BNO_ERR_PAGE_TOO_HIGH:
            return "[BNO] Page setting to high.";
 8002868:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <bno055_err_str+0x68>)
 800286a:	e008      	b.n	800287e <bno055_err_str+0x52>
        case BNO_ERR_NULL_PTR:
            return "[BNO] BNO struct is nullpointer.";
 800286c:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <bno055_err_str+0x6c>)
 800286e:	e006      	b.n	800287e <bno055_err_str+0x52>
        case BNO_ERR_AXIS_REMAP:
            return "[BNO] Axis remap error!";
 8002870:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <bno055_err_str+0x70>)
 8002872:	e004      	b.n	800287e <bno055_err_str+0x52>
        case BNO_ERR_SETTING_PAGE:
            return "[BNO] TODO";
 8002874:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <bno055_err_str+0x74>)
 8002876:	e002      	b.n	800287e <bno055_err_str+0x52>
        case BNO_ERR_WRONG_CHIP_ID:
            return "[BNO] Wrong Chip ID.";
 8002878:	4b0a      	ldr	r3, [pc, #40]	@ (80028a4 <bno055_err_str+0x78>)
 800287a:	e000      	b.n	800287e <bno055_err_str+0x52>
    }
    return "[BNO] Ok!";
 800287c:	4b03      	ldr	r3, [pc, #12]	@ (800288c <bno055_err_str+0x60>)
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	08007fc8 	.word	0x08007fc8
 8002890:	08007fd4 	.word	0x08007fd4
 8002894:	08007fe8 	.word	0x08007fe8
 8002898:	08008004 	.word	0x08008004
 800289c:	08008028 	.word	0x08008028
 80028a0:	08008040 	.word	0x08008040
 80028a4:	0800804c 	.word	0x0800804c

080028a8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80028b0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80028b4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80028c0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80028c4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80028c8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00b      	beq.n	80028e8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80028d0:	e000      	b.n	80028d4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80028d2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80028d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f9      	beq.n	80028d2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80028de:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80028e8:	687b      	ldr	r3, [r7, #4]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <_write>:
/* USER CODE BEGIN PD */
float accx,accy,accz;


int _write(int file, char *ptr, int len)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e009      	b.n	8002920 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	60ba      	str	r2, [r7, #8]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ffc7 	bl	80028a8 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	3301      	adds	r3, #1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	dbf1      	blt.n	800290c <_write+0x16>
  return len;
 8002928:	687b      	ldr	r3, [r7, #4]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002938:	b0c8      	sub	sp, #288	@ 0x120
 800293a:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800293c:	f000 fc5e 	bl	80031fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002940:	f000 f9e2 	bl	8002d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002944:	f000 fa82 	bl	8002e4c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002948:	f000 fa3e 	bl	8002dc8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  bno = (bno055_t){
 800294c:	4b26      	ldr	r3, [pc, #152]	@ (80029e8 <main+0xb4>)
 800294e:	4618      	mov	r0, r3
 8002950:	23ac      	movs	r3, #172	@ 0xac
 8002952:	461a      	mov	r2, r3
 8002954:	2100      	movs	r1, #0
 8002956:	f003 fc99 	bl	800628c <memset>
 800295a:	4b23      	ldr	r3, [pc, #140]	@ (80029e8 <main+0xb4>)
 800295c:	4a23      	ldr	r2, [pc, #140]	@ (80029ec <main+0xb8>)
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	4b21      	ldr	r3, [pc, #132]	@ (80029e8 <main+0xb4>)
 8002962:	2208      	movs	r2, #8
 8002964:	711a      	strb	r2, [r3, #4]
 8002966:	4b20      	ldr	r3, [pc, #128]	@ (80029e8 <main+0xb4>)
 8002968:	2228      	movs	r2, #40	@ 0x28
 800296a:	719a      	strb	r2, [r3, #6]
      .i2c = &hi2c1, .addr = BNO_ADDR, .mode = BNO_MODE_IMU, ._temp_unit = 0,
  };
  HAL_Delay(1000);
 800296c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002970:	f000 fcb6 	bl	80032e0 <HAL_Delay>
  if ((err = bno055_init(&bno)) == BNO_OK) {
 8002974:	481c      	ldr	r0, [pc, #112]	@ (80029e8 <main+0xb4>)
 8002976:	f7fe facd 	bl	8000f14 <bno055_init>
 800297a:	4603      	mov	r3, r0
 800297c:	461a      	mov	r2, r3
 800297e:	4b1c      	ldr	r3, [pc, #112]	@ (80029f0 <main+0xbc>)
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	4b1b      	ldr	r3, [pc, #108]	@ (80029f0 <main+0xbc>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <main+0x64>
	  printf("[+] BNO055 init success\r\n");
 800298a:	481a      	ldr	r0, [pc, #104]	@ (80029f4 <main+0xc0>)
 800298c:	f003 fb9e 	bl	80060cc <puts>
      HAL_Delay(100);
 8002990:	2064      	movs	r0, #100	@ 0x64
 8002992:	f000 fca5 	bl	80032e0 <HAL_Delay>
 8002996:	e00d      	b.n	80029b4 <main+0x80>
  } else {
      printf("[!] BNO055 init failed\r\n");
 8002998:	4817      	ldr	r0, [pc, #92]	@ (80029f8 <main+0xc4>)
 800299a:	f003 fb97 	bl	80060cc <puts>
      printf("%s\n", bno055_err_str(err));
 800299e:	4b14      	ldr	r3, [pc, #80]	@ (80029f0 <main+0xbc>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ff42 	bl	800282c <bno055_err_str>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f003 fb8e 	bl	80060cc <puts>
      Error_Handler();
 80029b0:	f000 fa90 	bl	8002ed4 <Error_Handler>
      }
      HAL_Delay(100);
 80029b4:	2064      	movs	r0, #100	@ 0x64
 80029b6:	f000 fc93 	bl	80032e0 <HAL_Delay>
      err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,
 80029ba:	2300      	movs	r3, #0
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	2300      	movs	r3, #0
 80029c0:	2200      	movs	r2, #0
 80029c2:	2100      	movs	r1, #0
 80029c4:	4808      	ldr	r0, [pc, #32]	@ (80029e8 <main+0xb4>)
 80029c6:	f7ff fd8b 	bl	80024e0 <bno055_set_unit>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <main+0xbc>)
 80029d0:	701a      	strb	r2, [r3, #0]
                            BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
   if (err != BNO_OK) {
 80029d2:	4b07      	ldr	r3, [pc, #28]	@ (80029f0 <main+0xbc>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d012      	beq.n	8002a00 <main+0xcc>
	   printf("[BNO] Failed to set units. Err: %d\r\n", err);
 80029da:	4b05      	ldr	r3, [pc, #20]	@ (80029f0 <main+0xbc>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4619      	mov	r1, r3
 80029e0:	4806      	ldr	r0, [pc, #24]	@ (80029fc <main+0xc8>)
 80029e2:	f003 fb0b 	bl	8005ffc <iprintf>
 80029e6:	e00e      	b.n	8002a06 <main+0xd2>
 80029e8:	20000250 	.word	0x20000250
 80029ec:	200001fc 	.word	0x200001fc
 80029f0:	200002fc 	.word	0x200002fc
 80029f4:	08008064 	.word	0x08008064
 80029f8:	08008080 	.word	0x08008080
 80029fc:	08008098 	.word	0x08008098
   } else {
	   printf("[BNO] Unit selection success\r\n");
 8002a00:	48b4      	ldr	r0, [pc, #720]	@ (8002cd4 <main+0x3a0>)
 8002a02:	f003 fb63 	bl	80060cc <puts>
     }
   HAL_Delay(1000);
 8002a06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a0a:	f000 fc69 	bl	80032e0 <HAL_Delay>
   s8 temperature = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
   // f32 acc_x = 0.0f, acc_y = 0.0f, acc_z = 0.0f;

   bno055_vec3_t acc = {0, 0, 0};
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	657b      	str	r3, [r7, #84]	@ 0x54
   bno055_vec3_t lia = {0, 0, 0};
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	64bb      	str	r3, [r7, #72]	@ 0x48
   bno055_vec3_t gyr = {0, 0, 0};
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   bno055_vec3_t mag = {0, 0, 0};
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	633b      	str	r3, [r7, #48]	@ 0x30
   bno055_vec3_t grv = {0, 0, 0};
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	623b      	str	r3, [r7, #32]
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
   bno055_euler_t eul = {0, 0, 0};
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	61bb      	str	r3, [r7, #24]
   bno055_vec4_t qua = {0, 0, 0};
 8002a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	6053      	str	r3, [r2, #4]
 8002a90:	6093      	str	r3, [r2, #8]
 8002a92:	60d3      	str	r3, [r2, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bno.temperature(&bno, &temperature);
 8002a94:	4b90      	ldr	r3, [pc, #576]	@ (8002cd8 <main+0x3a4>)
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	f107 025b 	add.w	r2, r7, #91	@ 0x5b
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	488e      	ldr	r0, [pc, #568]	@ (8002cd8 <main+0x3a4>)
 8002aa0:	4798      	blx	r3
	  bno.acc(&bno, &acc);
 8002aa2:	4b8d      	ldr	r3, [pc, #564]	@ (8002cd8 <main+0x3a4>)
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002aaa:	4611      	mov	r1, r2
 8002aac:	488a      	ldr	r0, [pc, #552]	@ (8002cd8 <main+0x3a4>)
 8002aae:	4798      	blx	r3
	  bno.linear_acc(&bno, &lia);
 8002ab0:	4b89      	ldr	r3, [pc, #548]	@ (8002cd8 <main+0x3a4>)
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4887      	ldr	r0, [pc, #540]	@ (8002cd8 <main+0x3a4>)
 8002abc:	4798      	blx	r3
	  bno.gyro(&bno, &gyr);
 8002abe:	4b86      	ldr	r3, [pc, #536]	@ (8002cd8 <main+0x3a4>)
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4883      	ldr	r0, [pc, #524]	@ (8002cd8 <main+0x3a4>)
 8002aca:	4798      	blx	r3
	  bno.mag(&bno, &mag);
 8002acc:	4b82      	ldr	r3, [pc, #520]	@ (8002cd8 <main+0x3a4>)
 8002ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ad0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4880      	ldr	r0, [pc, #512]	@ (8002cd8 <main+0x3a4>)
 8002ad8:	4798      	blx	r3
	  bno.gravity(&bno, &grv);
 8002ada:	4b7f      	ldr	r3, [pc, #508]	@ (8002cd8 <main+0x3a4>)
 8002adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ade:	f107 021c 	add.w	r2, r7, #28
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	487c      	ldr	r0, [pc, #496]	@ (8002cd8 <main+0x3a4>)
 8002ae6:	4798      	blx	r3
	  bno.euler(&bno, &eul);
 8002ae8:	4b7b      	ldr	r3, [pc, #492]	@ (8002cd8 <main+0x3a4>)
 8002aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aee:	f107 0210 	add.w	r2, r7, #16
 8002af2:	4611      	mov	r1, r2
 8002af4:	4878      	ldr	r0, [pc, #480]	@ (8002cd8 <main+0x3a4>)
 8002af6:	4798      	blx	r3
	  bno.quaternion(&bno, &qua);
 8002af8:	4b77      	ldr	r3, [pc, #476]	@ (8002cd8 <main+0x3a4>)
 8002afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002afe:	463a      	mov	r2, r7
 8002b00:	4611      	mov	r1, r2
 8002b02:	4875      	ldr	r0, [pc, #468]	@ (8002cd8 <main+0x3a4>)
 8002b04:	4798      	blx	r3
	  accx = acc.x;
 8002b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b08:	4a74      	ldr	r2, [pc, #464]	@ (8002cdc <main+0x3a8>)
 8002b0a:	6013      	str	r3, [r2, #0]
	  accy = acc.y;
 8002b0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b0e:	4a74      	ldr	r2, [pc, #464]	@ (8002ce0 <main+0x3ac>)
 8002b10:	6013      	str	r3, [r2, #0]
	  accz = acc.z;
 8002b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b14:	4a73      	ldr	r2, [pc, #460]	@ (8002ce4 <main+0x3b0>)
 8002b16:	6013      	str	r3, [r2, #0]
	  printf("test\n");
 8002b18:	4873      	ldr	r0, [pc, #460]	@ (8002ce8 <main+0x3b4>)
 8002b1a:	f003 fad7 	bl	80060cc <puts>
	  //printf("[+] Temperature: %2d°C\r\n", temperature);
	  printf("[+] ACC - x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", acc.x, acc.y, acc.z);
 8002b1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fd31 	bl	8000588 <__aeabi_f2d>
 8002b26:	4680      	mov	r8, r0
 8002b28:	4689      	mov	r9, r1
 8002b2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fd2b 	bl	8000588 <__aeabi_f2d>
 8002b32:	4604      	mov	r4, r0
 8002b34:	460d      	mov	r5, r1
 8002b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fd25 	bl	8000588 <__aeabi_f2d>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b46:	e9cd 4500 	strd	r4, r5, [sp]
 8002b4a:	4642      	mov	r2, r8
 8002b4c:	464b      	mov	r3, r9
 8002b4e:	4867      	ldr	r0, [pc, #412]	@ (8002cec <main+0x3b8>)
 8002b50:	f003 fa54 	bl	8005ffc <iprintf>
	  printf("[+] LIA - x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", lia.x, lia.y, lia.z);
 8002b54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fd16 	bl	8000588 <__aeabi_f2d>
 8002b5c:	4680      	mov	r8, r0
 8002b5e:	4689      	mov	r9, r1
 8002b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fd10 	bl	8000588 <__aeabi_f2d>
 8002b68:	4604      	mov	r4, r0
 8002b6a:	460d      	mov	r5, r1
 8002b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fd fd0a 	bl	8000588 <__aeabi_f2d>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b7c:	e9cd 4500 	strd	r4, r5, [sp]
 8002b80:	4642      	mov	r2, r8
 8002b82:	464b      	mov	r3, r9
 8002b84:	485a      	ldr	r0, [pc, #360]	@ (8002cf0 <main+0x3bc>)
 8002b86:	f003 fa39 	bl	8005ffc <iprintf>
	  printf("[+] GYR - x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", gyr.x, gyr.y, gyr.z);
 8002b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fcfb 	bl	8000588 <__aeabi_f2d>
 8002b92:	4680      	mov	r8, r0
 8002b94:	4689      	mov	r9, r1
 8002b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fcf5 	bl	8000588 <__aeabi_f2d>
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	460d      	mov	r5, r1
 8002ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fd fcef 	bl	8000588 <__aeabi_f2d>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002bb2:	e9cd 4500 	strd	r4, r5, [sp]
 8002bb6:	4642      	mov	r2, r8
 8002bb8:	464b      	mov	r3, r9
 8002bba:	484e      	ldr	r0, [pc, #312]	@ (8002cf4 <main+0x3c0>)
 8002bbc:	f003 fa1e 	bl	8005ffc <iprintf>
	  printf("[+] MAG - x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", mag.x, mag.y, mag.z);
 8002bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fce0 	bl	8000588 <__aeabi_f2d>
 8002bc8:	4680      	mov	r8, r0
 8002bca:	4689      	mov	r9, r1
 8002bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd fcda 	bl	8000588 <__aeabi_f2d>
 8002bd4:	4604      	mov	r4, r0
 8002bd6:	460d      	mov	r5, r1
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fcd4 	bl	8000588 <__aeabi_f2d>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002be8:	e9cd 4500 	strd	r4, r5, [sp]
 8002bec:	4642      	mov	r2, r8
 8002bee:	464b      	mov	r3, r9
 8002bf0:	4841      	ldr	r0, [pc, #260]	@ (8002cf8 <main+0x3c4>)
 8002bf2:	f003 fa03 	bl	8005ffc <iprintf>
	  printf("[+] GRV - x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", grv.x, grv.y, grv.z);
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fcc5 	bl	8000588 <__aeabi_f2d>
 8002bfe:	4680      	mov	r8, r0
 8002c00:	4689      	mov	r9, r1
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fd fcbf 	bl	8000588 <__aeabi_f2d>
 8002c0a:	4604      	mov	r4, r0
 8002c0c:	460d      	mov	r5, r1
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd fcb9 	bl	8000588 <__aeabi_f2d>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c1e:	e9cd 4500 	strd	r4, r5, [sp]
 8002c22:	4642      	mov	r2, r8
 8002c24:	464b      	mov	r3, r9
 8002c26:	4835      	ldr	r0, [pc, #212]	@ (8002cfc <main+0x3c8>)
 8002c28:	f003 f9e8 	bl	8005ffc <iprintf>
	  printf("[+] Roll: %+2.2f | Pitch: %+2.2f | Yaw: %+2.2f\r\n", eul.roll, eul.pitch, eul.yaw);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fcaa 	bl	8000588 <__aeabi_f2d>
 8002c34:	4680      	mov	r8, r0
 8002c36:	4689      	mov	r9, r1
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fd fca4 	bl	8000588 <__aeabi_f2d>
 8002c40:	4604      	mov	r4, r0
 8002c42:	460d      	mov	r5, r1
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fc9e 	bl	8000588 <__aeabi_f2d>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c54:	e9cd 4500 	strd	r4, r5, [sp]
 8002c58:	4642      	mov	r2, r8
 8002c5a:	464b      	mov	r3, r9
 8002c5c:	4828      	ldr	r0, [pc, #160]	@ (8002d00 <main+0x3cc>)
 8002c5e:	f003 f9cd 	bl	8005ffc <iprintf>
	  printf("[+] QUA - w: %+2.2f | x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", qua.w, qua.x, qua.y, qua.z);
 8002c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd fc8b 	bl	8000588 <__aeabi_f2d>
 8002c72:	4682      	mov	sl, r0
 8002c74:	468b      	mov	fp, r1
 8002c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd fc81 	bl	8000588 <__aeabi_f2d>
 8002c86:	4604      	mov	r4, r0
 8002c88:	460d      	mov	r5, r1
 8002c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002c8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fc77 	bl	8000588 <__aeabi_f2d>
 8002c9a:	4680      	mov	r8, r0
 8002c9c:	4689      	mov	r9, r1
 8002c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fd fc6d 	bl	8000588 <__aeabi_f2d>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002cb6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002cba:	e9cd 4500 	strd	r4, r5, [sp]
 8002cbe:	4652      	mov	r2, sl
 8002cc0:	465b      	mov	r3, fp
 8002cc2:	4810      	ldr	r0, [pc, #64]	@ (8002d04 <main+0x3d0>)
 8002cc4:	f003 f99a 	bl	8005ffc <iprintf>
	  HAL_Delay(100);
 8002cc8:	2064      	movs	r0, #100	@ 0x64
 8002cca:	f000 fb09 	bl	80032e0 <HAL_Delay>
	  bno.temperature(&bno, &temperature);
 8002cce:	bf00      	nop
 8002cd0:	e6e0      	b.n	8002a94 <main+0x160>
 8002cd2:	bf00      	nop
 8002cd4:	080080c0 	.word	0x080080c0
 8002cd8:	20000250 	.word	0x20000250
 8002cdc:	200001f0 	.word	0x200001f0
 8002ce0:	200001f4 	.word	0x200001f4
 8002ce4:	200001f8 	.word	0x200001f8
 8002ce8:	080080e0 	.word	0x080080e0
 8002cec:	080080e8 	.word	0x080080e8
 8002cf0:	08008118 	.word	0x08008118
 8002cf4:	08008148 	.word	0x08008148
 8002cf8:	08008178 	.word	0x08008178
 8002cfc:	080081a8 	.word	0x080081a8
 8002d00:	080081d8 	.word	0x080081d8
 8002d04:	0800820c 	.word	0x0800820c

08002d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b094      	sub	sp, #80	@ 0x50
 8002d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d0e:	f107 031c 	add.w	r3, r7, #28
 8002d12:	2234      	movs	r2, #52	@ 0x34
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f003 fab8 	bl	800628c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d1c:	f107 0308 	add.w	r3, r7, #8
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	4b23      	ldr	r3, [pc, #140]	@ (8002dc0 <SystemClock_Config+0xb8>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	4a22      	ldr	r2, [pc, #136]	@ (8002dc0 <SystemClock_Config+0xb8>)
 8002d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d3c:	4b20      	ldr	r3, [pc, #128]	@ (8002dc0 <SystemClock_Config+0xb8>)
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002d48:	2300      	movs	r3, #0
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc4 <SystemClock_Config+0xbc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002d54:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc4 <SystemClock_Config+0xbc>)
 8002d56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	4b19      	ldr	r3, [pc, #100]	@ (8002dc4 <SystemClock_Config+0xbc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d70:	2310      	movs	r3, #16
 8002d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d78:	f107 031c 	add.w	r3, r7, #28
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f002 f987 	bl	8005090 <HAL_RCC_OscConfig>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002d88:	f000 f8a4 	bl	8002ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d8c:	230f      	movs	r3, #15
 8002d8e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002da0:	f107 0308 	add.w	r3, r7, #8
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f001 fec2 	bl	8004b30 <HAL_RCC_ClockConfig>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002db2:	f000 f88f 	bl	8002ed4 <Error_Handler>
  }
}
 8002db6:	bf00      	nop
 8002db8:	3750      	adds	r7, #80	@ 0x50
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40007000 	.word	0x40007000

08002dc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e3c <MX_I2C1_Init+0x74>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	4a19      	ldr	r2, [pc, #100]	@ (8002e3c <MX_I2C1_Init+0x74>)
 8002dd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dde:	4b17      	ldr	r3, [pc, #92]	@ (8002e3c <MX_I2C1_Init+0x74>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002dea:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <MX_I2C1_Init+0x78>)
 8002dec:	4a15      	ldr	r2, [pc, #84]	@ (8002e44 <MX_I2C1_Init+0x7c>)
 8002dee:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002df0:	4b13      	ldr	r3, [pc, #76]	@ (8002e40 <MX_I2C1_Init+0x78>)
 8002df2:	4a15      	ldr	r2, [pc, #84]	@ (8002e48 <MX_I2C1_Init+0x80>)
 8002df4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002df6:	4b12      	ldr	r3, [pc, #72]	@ (8002e40 <MX_I2C1_Init+0x78>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002dfc:	4b10      	ldr	r3, [pc, #64]	@ (8002e40 <MX_I2C1_Init+0x78>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e02:	4b0f      	ldr	r3, [pc, #60]	@ (8002e40 <MX_I2C1_Init+0x78>)
 8002e04:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e40 <MX_I2C1_Init+0x78>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e10:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <MX_I2C1_Init+0x78>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e16:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <MX_I2C1_Init+0x78>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e1c:	4b08      	ldr	r3, [pc, #32]	@ (8002e40 <MX_I2C1_Init+0x78>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e22:	4807      	ldr	r0, [pc, #28]	@ (8002e40 <MX_I2C1_Init+0x78>)
 8002e24:	f000 fcfa 	bl	800381c <HAL_I2C_Init>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_I2C1_Init+0x6a>
  {
    Error_Handler();
 8002e2e:	f000 f851 	bl	8002ed4 <Error_Handler>
  /* USER CODE BEGIN I2C1_Init 2 */


  /* USER CODE END I2C1_Init 2 */

}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	200001fc 	.word	0x200001fc
 8002e44:	40005400 	.word	0x40005400
 8002e48:	000186a0 	.word	0x000186a0

08002e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed0 <MX_GPIO_Init+0x84>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed0 <MX_GPIO_Init+0x84>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e62:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed0 <MX_GPIO_Init+0x84>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	4b17      	ldr	r3, [pc, #92]	@ (8002ed0 <MX_GPIO_Init+0x84>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	4a16      	ldr	r2, [pc, #88]	@ (8002ed0 <MX_GPIO_Init+0x84>)
 8002e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e7e:	4b14      	ldr	r3, [pc, #80]	@ (8002ed0 <MX_GPIO_Init+0x84>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ed0 <MX_GPIO_Init+0x84>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	4a0f      	ldr	r2, [pc, #60]	@ (8002ed0 <MX_GPIO_Init+0x84>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed0 <MX_GPIO_Init+0x84>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	607b      	str	r3, [r7, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ed0 <MX_GPIO_Init+0x84>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eae:	4a08      	ldr	r2, [pc, #32]	@ (8002ed0 <MX_GPIO_Init+0x84>)
 8002eb0:	f043 0302 	orr.w	r3, r3, #2
 8002eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eb6:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <MX_GPIO_Init+0x84>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800

08002ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed8:	b672      	cpsid	i
}
 8002eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Init Failed \n");
 8002edc:	4803      	ldr	r0, [pc, #12]	@ (8002eec <Error_Handler+0x18>)
 8002ede:	f003 f8f5 	bl	80060cc <puts>
	  HAL_Delay(100);
 8002ee2:	2064      	movs	r0, #100	@ 0x64
 8002ee4:	f000 f9fc 	bl	80032e0 <HAL_Delay>
	  printf("Init Failed \n");
 8002ee8:	bf00      	nop
 8002eea:	e7f7      	b.n	8002edc <Error_Handler+0x8>
 8002eec:	08008248 	.word	0x08008248

08002ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]
 8002efa:	4b10      	ldr	r3, [pc, #64]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efe:	4a0f      	ldr	r2, [pc, #60]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f06:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f0e:	607b      	str	r3, [r7, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	4b09      	ldr	r3, [pc, #36]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	4a08      	ldr	r2, [pc, #32]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f22:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800

08002f40 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	@ 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a19      	ldr	r2, [pc, #100]	@ (8002fc4 <HAL_I2C_MspInit+0x84>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d12c      	bne.n	8002fbc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	4b18      	ldr	r3, [pc, #96]	@ (8002fc8 <HAL_I2C_MspInit+0x88>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	4a17      	ldr	r2, [pc, #92]	@ (8002fc8 <HAL_I2C_MspInit+0x88>)
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f72:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <HAL_I2C_MspInit+0x88>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f84:	2312      	movs	r3, #18
 8002f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f90:	2304      	movs	r3, #4
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f94:	f107 0314 	add.w	r3, r7, #20
 8002f98:	4619      	mov	r1, r3
 8002f9a:	480c      	ldr	r0, [pc, #48]	@ (8002fcc <HAL_I2C_MspInit+0x8c>)
 8002f9c:	f000 faaa 	bl	80034f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	4b08      	ldr	r3, [pc, #32]	@ (8002fc8 <HAL_I2C_MspInit+0x88>)
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa8:	4a07      	ldr	r2, [pc, #28]	@ (8002fc8 <HAL_I2C_MspInit+0x88>)
 8002faa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002fae:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <HAL_I2C_MspInit+0x88>)
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002fbc:	bf00      	nop
 8002fbe:	3728      	adds	r7, #40	@ 0x28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40005400 	.word	0x40005400
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40020400 	.word	0x40020400

08002fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fd4:	bf00      	nop
 8002fd6:	e7fd      	b.n	8002fd4 <NMI_Handler+0x4>

08002fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fdc:	bf00      	nop
 8002fde:	e7fd      	b.n	8002fdc <HardFault_Handler+0x4>

08002fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fe4:	bf00      	nop
 8002fe6:	e7fd      	b.n	8002fe4 <MemManage_Handler+0x4>

08002fe8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fec:	bf00      	nop
 8002fee:	e7fd      	b.n	8002fec <BusFault_Handler+0x4>

08002ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ff4:	bf00      	nop
 8002ff6:	e7fd      	b.n	8002ff4 <UsageFault_Handler+0x4>

08002ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003006:	b480      	push	{r7}
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003026:	f000 f93b 	bl	80032a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	bd80      	pop	{r7, pc}

0800302e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0
  return 1;
 8003032:	2301      	movs	r3, #1
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <_kill>:

int _kill(int pid, int sig)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003048:	f003 f972 	bl	8006330 <__errno>
 800304c:	4603      	mov	r3, r0
 800304e:	2216      	movs	r2, #22
 8003050:	601a      	str	r2, [r3, #0]
  return -1;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <_exit>:

void _exit (int status)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003066:	f04f 31ff 	mov.w	r1, #4294967295
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ffe7 	bl	800303e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003070:	bf00      	nop
 8003072:	e7fd      	b.n	8003070 <_exit+0x12>

08003074 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	e00a      	b.n	800309c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003086:	f3af 8000 	nop.w
 800308a:	4601      	mov	r1, r0
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	60ba      	str	r2, [r7, #8]
 8003092:	b2ca      	uxtb	r2, r1
 8003094:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	3301      	adds	r3, #1
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	dbf0      	blt.n	8003086 <_read+0x12>
  }

  return len;
 80030a4:	687b      	ldr	r3, [r7, #4]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <_close>:
  }
  return len;
}

int _close(int file)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030d6:	605a      	str	r2, [r3, #4]
  return 0;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <_isatty>:

int _isatty(int file)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030ee:	2301      	movs	r3, #1
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003120:	4a14      	ldr	r2, [pc, #80]	@ (8003174 <_sbrk+0x5c>)
 8003122:	4b15      	ldr	r3, [pc, #84]	@ (8003178 <_sbrk+0x60>)
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800312c:	4b13      	ldr	r3, [pc, #76]	@ (800317c <_sbrk+0x64>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003134:	4b11      	ldr	r3, [pc, #68]	@ (800317c <_sbrk+0x64>)
 8003136:	4a12      	ldr	r2, [pc, #72]	@ (8003180 <_sbrk+0x68>)
 8003138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800313a:	4b10      	ldr	r3, [pc, #64]	@ (800317c <_sbrk+0x64>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	429a      	cmp	r2, r3
 8003146:	d207      	bcs.n	8003158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003148:	f003 f8f2 	bl	8006330 <__errno>
 800314c:	4603      	mov	r3, r0
 800314e:	220c      	movs	r2, #12
 8003150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003152:	f04f 33ff 	mov.w	r3, #4294967295
 8003156:	e009      	b.n	800316c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003158:	4b08      	ldr	r3, [pc, #32]	@ (800317c <_sbrk+0x64>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800315e:	4b07      	ldr	r3, [pc, #28]	@ (800317c <_sbrk+0x64>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	4a05      	ldr	r2, [pc, #20]	@ (800317c <_sbrk+0x64>)
 8003168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800316a:	68fb      	ldr	r3, [r7, #12]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20020000 	.word	0x20020000
 8003178:	00000400 	.word	0x00000400
 800317c:	20000300 	.word	0x20000300
 8003180:	20000458 	.word	0x20000458

08003184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003188:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <SystemInit+0x20>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318e:	4a05      	ldr	r2, [pc, #20]	@ (80031a4 <SystemInit+0x20>)
 8003190:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003194:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80031ac:	f7ff ffea 	bl	8003184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031b0:	480c      	ldr	r0, [pc, #48]	@ (80031e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031b2:	490d      	ldr	r1, [pc, #52]	@ (80031e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031b4:	4a0d      	ldr	r2, [pc, #52]	@ (80031ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b8:	e002      	b.n	80031c0 <LoopCopyDataInit>

080031ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031be:	3304      	adds	r3, #4

080031c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c4:	d3f9      	bcc.n	80031ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031c6:	4a0a      	ldr	r2, [pc, #40]	@ (80031f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031c8:	4c0a      	ldr	r4, [pc, #40]	@ (80031f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031cc:	e001      	b.n	80031d2 <LoopFillZerobss>

080031ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031d0:	3204      	adds	r2, #4

080031d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d4:	d3fb      	bcc.n	80031ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80031d6:	f003 f8b1 	bl	800633c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031da:	f7ff fbab 	bl	8002934 <main>
  bx  lr    
 80031de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80031ec:	080085f4 	.word	0x080085f4
  ldr r2, =_sbss
 80031f0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80031f4:	20000454 	.word	0x20000454

080031f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031f8:	e7fe      	b.n	80031f8 <ADC_IRQHandler>
	...

080031fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003200:	4b0e      	ldr	r3, [pc, #56]	@ (800323c <HAL_Init+0x40>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0d      	ldr	r2, [pc, #52]	@ (800323c <HAL_Init+0x40>)
 8003206:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800320a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800320c:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <HAL_Init+0x40>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a0a      	ldr	r2, [pc, #40]	@ (800323c <HAL_Init+0x40>)
 8003212:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003216:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003218:	4b08      	ldr	r3, [pc, #32]	@ (800323c <HAL_Init+0x40>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a07      	ldr	r2, [pc, #28]	@ (800323c <HAL_Init+0x40>)
 800321e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003224:	2003      	movs	r0, #3
 8003226:	f000 f931 	bl	800348c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800322a:	200f      	movs	r0, #15
 800322c:	f000 f808 	bl	8003240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003230:	f7ff fe5e 	bl	8002ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023c00 	.word	0x40023c00

08003240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003248:	4b12      	ldr	r3, [pc, #72]	@ (8003294 <HAL_InitTick+0x54>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4b12      	ldr	r3, [pc, #72]	@ (8003298 <HAL_InitTick+0x58>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	4619      	mov	r1, r3
 8003252:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003256:	fbb3 f3f1 	udiv	r3, r3, r1
 800325a:	fbb2 f3f3 	udiv	r3, r2, r3
 800325e:	4618      	mov	r0, r3
 8003260:	f000 f93b 	bl	80034da <HAL_SYSTICK_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e00e      	b.n	800328c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b0f      	cmp	r3, #15
 8003272:	d80a      	bhi.n	800328a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003274:	2200      	movs	r2, #0
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	f04f 30ff 	mov.w	r0, #4294967295
 800327c:	f000 f911 	bl	80034a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003280:	4a06      	ldr	r2, [pc, #24]	@ (800329c <HAL_InitTick+0x5c>)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	e000      	b.n	800328c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20000000 	.word	0x20000000
 8003298:	20000008 	.word	0x20000008
 800329c:	20000004 	.word	0x20000004

080032a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032a4:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_IncTick+0x20>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <HAL_IncTick+0x24>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	4a04      	ldr	r2, [pc, #16]	@ (80032c4 <HAL_IncTick+0x24>)
 80032b2:	6013      	str	r3, [r2, #0]
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000008 	.word	0x20000008
 80032c4:	20000304 	.word	0x20000304

080032c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return uwTick;
 80032cc:	4b03      	ldr	r3, [pc, #12]	@ (80032dc <HAL_GetTick+0x14>)
 80032ce:	681b      	ldr	r3, [r3, #0]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000304 	.word	0x20000304

080032e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032e8:	f7ff ffee 	bl	80032c8 <HAL_GetTick>
 80032ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f8:	d005      	beq.n	8003306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003324 <HAL_Delay+0x44>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003306:	bf00      	nop
 8003308:	f7ff ffde 	bl	80032c8 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	429a      	cmp	r2, r3
 8003316:	d8f7      	bhi.n	8003308 <HAL_Delay+0x28>
  {
  }
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000008 	.word	0x20000008

08003328 <__NVIC_SetPriorityGrouping>:
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003338:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <__NVIC_SetPriorityGrouping+0x44>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003344:	4013      	ands	r3, r2
 8003346:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003350:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800335a:	4a04      	ldr	r2, [pc, #16]	@ (800336c <__NVIC_SetPriorityGrouping+0x44>)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	60d3      	str	r3, [r2, #12]
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <__NVIC_GetPriorityGrouping>:
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003374:	4b04      	ldr	r3, [pc, #16]	@ (8003388 <__NVIC_GetPriorityGrouping+0x18>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	0a1b      	lsrs	r3, r3, #8
 800337a:	f003 0307 	and.w	r3, r3, #7
}
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <__NVIC_SetPriority>:
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	2b00      	cmp	r3, #0
 800339e:	db0a      	blt.n	80033b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	490c      	ldr	r1, [pc, #48]	@ (80033d8 <__NVIC_SetPriority+0x4c>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	440b      	add	r3, r1
 80033b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80033b4:	e00a      	b.n	80033cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4908      	ldr	r1, [pc, #32]	@ (80033dc <__NVIC_SetPriority+0x50>)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	3b04      	subs	r3, #4
 80033c4:	0112      	lsls	r2, r2, #4
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	440b      	add	r3, r1
 80033ca:	761a      	strb	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <NVIC_EncodePriority>:
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	@ 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f1c3 0307 	rsb	r3, r3, #7
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	bf28      	it	cs
 80033fe:	2304      	movcs	r3, #4
 8003400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3304      	adds	r3, #4
 8003406:	2b06      	cmp	r3, #6
 8003408:	d902      	bls.n	8003410 <NVIC_EncodePriority+0x30>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3b03      	subs	r3, #3
 800340e:	e000      	b.n	8003412 <NVIC_EncodePriority+0x32>
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	f04f 32ff 	mov.w	r2, #4294967295
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	401a      	ands	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003428:	f04f 31ff 	mov.w	r1, #4294967295
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	43d9      	mvns	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	4313      	orrs	r3, r2
}
 800343a:	4618      	mov	r0, r3
 800343c:	3724      	adds	r7, #36	@ 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <SysTick_Config>:
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003458:	d301      	bcc.n	800345e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800345a:	2301      	movs	r3, #1
 800345c:	e00f      	b.n	800347e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345e:	4a0a      	ldr	r2, [pc, #40]	@ (8003488 <SysTick_Config+0x40>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003466:	210f      	movs	r1, #15
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	f7ff ff8e 	bl	800338c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003470:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <SysTick_Config+0x40>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003476:	4b04      	ldr	r3, [pc, #16]	@ (8003488 <SysTick_Config+0x40>)
 8003478:	2207      	movs	r2, #7
 800347a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	e000e010 	.word	0xe000e010

0800348c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff47 	bl	8003328 <__NVIC_SetPriorityGrouping>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b086      	sub	sp, #24
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b4:	f7ff ff5c 	bl	8003370 <__NVIC_GetPriorityGrouping>
 80034b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	6978      	ldr	r0, [r7, #20]
 80034c0:	f7ff ff8e 	bl	80033e0 <NVIC_EncodePriority>
 80034c4:	4602      	mov	r2, r0
 80034c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff5d 	bl	800338c <__NVIC_SetPriority>
}
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff ffb0 	bl	8003448 <SysTick_Config>
 80034e8:	4603      	mov	r3, r0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	@ 0x24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003506:	2300      	movs	r3, #0
 8003508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	e165      	b.n	80037dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003510:	2201      	movs	r2, #1
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4013      	ands	r3, r2
 8003522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	429a      	cmp	r2, r3
 800352a:	f040 8154 	bne.w	80037d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d005      	beq.n	8003546 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003542:	2b02      	cmp	r3, #2
 8003544:	d130      	bne.n	80035a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	2203      	movs	r2, #3
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4313      	orrs	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800357c:	2201      	movs	r2, #1
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	091b      	lsrs	r3, r3, #4
 8003592:	f003 0201 	and.w	r2, r3, #1
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d017      	beq.n	80035e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	2203      	movs	r2, #3
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d123      	bne.n	8003638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	08da      	lsrs	r2, r3, #3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3208      	adds	r2, #8
 80035f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	220f      	movs	r2, #15
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	08da      	lsrs	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3208      	adds	r2, #8
 8003632:	69b9      	ldr	r1, [r7, #24]
 8003634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	2203      	movs	r2, #3
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0203 	and.w	r2, r3, #3
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80ae 	beq.w	80037d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	4b5d      	ldr	r3, [pc, #372]	@ (80037f4 <HAL_GPIO_Init+0x300>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	4a5c      	ldr	r2, [pc, #368]	@ (80037f4 <HAL_GPIO_Init+0x300>)
 8003684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003688:	6453      	str	r3, [r2, #68]	@ 0x44
 800368a:	4b5a      	ldr	r3, [pc, #360]	@ (80037f4 <HAL_GPIO_Init+0x300>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003696:	4a58      	ldr	r2, [pc, #352]	@ (80037f8 <HAL_GPIO_Init+0x304>)
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	089b      	lsrs	r3, r3, #2
 800369c:	3302      	adds	r3, #2
 800369e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	220f      	movs	r2, #15
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a4f      	ldr	r2, [pc, #316]	@ (80037fc <HAL_GPIO_Init+0x308>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d025      	beq.n	800370e <HAL_GPIO_Init+0x21a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a4e      	ldr	r2, [pc, #312]	@ (8003800 <HAL_GPIO_Init+0x30c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d01f      	beq.n	800370a <HAL_GPIO_Init+0x216>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a4d      	ldr	r2, [pc, #308]	@ (8003804 <HAL_GPIO_Init+0x310>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d019      	beq.n	8003706 <HAL_GPIO_Init+0x212>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a4c      	ldr	r2, [pc, #304]	@ (8003808 <HAL_GPIO_Init+0x314>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d013      	beq.n	8003702 <HAL_GPIO_Init+0x20e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a4b      	ldr	r2, [pc, #300]	@ (800380c <HAL_GPIO_Init+0x318>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00d      	beq.n	80036fe <HAL_GPIO_Init+0x20a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003810 <HAL_GPIO_Init+0x31c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d007      	beq.n	80036fa <HAL_GPIO_Init+0x206>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a49      	ldr	r2, [pc, #292]	@ (8003814 <HAL_GPIO_Init+0x320>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d101      	bne.n	80036f6 <HAL_GPIO_Init+0x202>
 80036f2:	2306      	movs	r3, #6
 80036f4:	e00c      	b.n	8003710 <HAL_GPIO_Init+0x21c>
 80036f6:	2307      	movs	r3, #7
 80036f8:	e00a      	b.n	8003710 <HAL_GPIO_Init+0x21c>
 80036fa:	2305      	movs	r3, #5
 80036fc:	e008      	b.n	8003710 <HAL_GPIO_Init+0x21c>
 80036fe:	2304      	movs	r3, #4
 8003700:	e006      	b.n	8003710 <HAL_GPIO_Init+0x21c>
 8003702:	2303      	movs	r3, #3
 8003704:	e004      	b.n	8003710 <HAL_GPIO_Init+0x21c>
 8003706:	2302      	movs	r3, #2
 8003708:	e002      	b.n	8003710 <HAL_GPIO_Init+0x21c>
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_GPIO_Init+0x21c>
 800370e:	2300      	movs	r3, #0
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	f002 0203 	and.w	r2, r2, #3
 8003716:	0092      	lsls	r2, r2, #2
 8003718:	4093      	lsls	r3, r2
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4313      	orrs	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003720:	4935      	ldr	r1, [pc, #212]	@ (80037f8 <HAL_GPIO_Init+0x304>)
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	089b      	lsrs	r3, r3, #2
 8003726:	3302      	adds	r3, #2
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800372e:	4b3a      	ldr	r3, [pc, #232]	@ (8003818 <HAL_GPIO_Init+0x324>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003752:	4a31      	ldr	r2, [pc, #196]	@ (8003818 <HAL_GPIO_Init+0x324>)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003758:	4b2f      	ldr	r3, [pc, #188]	@ (8003818 <HAL_GPIO_Init+0x324>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800377c:	4a26      	ldr	r2, [pc, #152]	@ (8003818 <HAL_GPIO_Init+0x324>)
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003782:	4b25      	ldr	r3, [pc, #148]	@ (8003818 <HAL_GPIO_Init+0x324>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	43db      	mvns	r3, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4013      	ands	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003818 <HAL_GPIO_Init+0x324>)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <HAL_GPIO_Init+0x324>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037d0:	4a11      	ldr	r2, [pc, #68]	@ (8003818 <HAL_GPIO_Init+0x324>)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3301      	adds	r3, #1
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	2b0f      	cmp	r3, #15
 80037e0:	f67f ae96 	bls.w	8003510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	3724      	adds	r7, #36	@ 0x24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40013800 	.word	0x40013800
 80037fc:	40020000 	.word	0x40020000
 8003800:	40020400 	.word	0x40020400
 8003804:	40020800 	.word	0x40020800
 8003808:	40020c00 	.word	0x40020c00
 800380c:	40021000 	.word	0x40021000
 8003810:	40021400 	.word	0x40021400
 8003814:	40021800 	.word	0x40021800
 8003818:	40013c00 	.word	0x40013c00

0800381c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e12b      	b.n	8003a86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff fb7c 	bl	8002f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2224      	movs	r2, #36	@ 0x24
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0201 	bic.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800386e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800387e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003880:	f001 fa48 	bl	8004d14 <HAL_RCC_GetPCLK1Freq>
 8003884:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4a81      	ldr	r2, [pc, #516]	@ (8003a90 <HAL_I2C_Init+0x274>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d807      	bhi.n	80038a0 <HAL_I2C_Init+0x84>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4a80      	ldr	r2, [pc, #512]	@ (8003a94 <HAL_I2C_Init+0x278>)
 8003894:	4293      	cmp	r3, r2
 8003896:	bf94      	ite	ls
 8003898:	2301      	movls	r3, #1
 800389a:	2300      	movhi	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e006      	b.n	80038ae <HAL_I2C_Init+0x92>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4a7d      	ldr	r2, [pc, #500]	@ (8003a98 <HAL_I2C_Init+0x27c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	bf94      	ite	ls
 80038a8:	2301      	movls	r3, #1
 80038aa:	2300      	movhi	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e0e7      	b.n	8003a86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4a78      	ldr	r2, [pc, #480]	@ (8003a9c <HAL_I2C_Init+0x280>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	0c9b      	lsrs	r3, r3, #18
 80038c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003a90 <HAL_I2C_Init+0x274>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d802      	bhi.n	80038f0 <HAL_I2C_Init+0xd4>
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	3301      	adds	r3, #1
 80038ee:	e009      	b.n	8003904 <HAL_I2C_Init+0xe8>
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
 80038fa:	4a69      	ldr	r2, [pc, #420]	@ (8003aa0 <HAL_I2C_Init+0x284>)
 80038fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003900:	099b      	lsrs	r3, r3, #6
 8003902:	3301      	adds	r3, #1
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	430b      	orrs	r3, r1
 800390a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003916:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	495c      	ldr	r1, [pc, #368]	@ (8003a90 <HAL_I2C_Init+0x274>)
 8003920:	428b      	cmp	r3, r1
 8003922:	d819      	bhi.n	8003958 <HAL_I2C_Init+0x13c>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1e59      	subs	r1, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003932:	1c59      	adds	r1, r3, #1
 8003934:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003938:	400b      	ands	r3, r1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_I2C_Init+0x138>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1e59      	subs	r1, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	fbb1 f3f3 	udiv	r3, r1, r3
 800394c:	3301      	adds	r3, #1
 800394e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003952:	e051      	b.n	80039f8 <HAL_I2C_Init+0x1dc>
 8003954:	2304      	movs	r3, #4
 8003956:	e04f      	b.n	80039f8 <HAL_I2C_Init+0x1dc>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d111      	bne.n	8003984 <HAL_I2C_Init+0x168>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1e58      	subs	r0, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	440b      	add	r3, r1
 800396e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003972:	3301      	adds	r3, #1
 8003974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003978:	2b00      	cmp	r3, #0
 800397a:	bf0c      	ite	eq
 800397c:	2301      	moveq	r3, #1
 800397e:	2300      	movne	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	e012      	b.n	80039aa <HAL_I2C_Init+0x18e>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1e58      	subs	r0, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	0099      	lsls	r1, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	fbb0 f3f3 	udiv	r3, r0, r3
 800399a:	3301      	adds	r3, #1
 800399c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Init+0x196>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e022      	b.n	80039f8 <HAL_I2C_Init+0x1dc>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10e      	bne.n	80039d8 <HAL_I2C_Init+0x1bc>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1e58      	subs	r0, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6859      	ldr	r1, [r3, #4]
 80039c2:	460b      	mov	r3, r1
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	440b      	add	r3, r1
 80039c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039cc:	3301      	adds	r3, #1
 80039ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039d6:	e00f      	b.n	80039f8 <HAL_I2C_Init+0x1dc>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	1e58      	subs	r0, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6859      	ldr	r1, [r3, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	0099      	lsls	r1, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ee:	3301      	adds	r3, #1
 80039f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	6809      	ldr	r1, [r1, #0]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69da      	ldr	r2, [r3, #28]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6911      	ldr	r1, [r2, #16]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68d2      	ldr	r2, [r2, #12]
 8003a32:	4311      	orrs	r1, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	000186a0 	.word	0x000186a0
 8003a94:	001e847f 	.word	0x001e847f
 8003a98:	003d08ff 	.word	0x003d08ff
 8003a9c:	431bde83 	.word	0x431bde83
 8003aa0:	10624dd3 	.word	0x10624dd3

08003aa4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	607a      	str	r2, [r7, #4]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	817b      	strh	r3, [r7, #10]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ab8:	f7ff fc06 	bl	80032c8 <HAL_GetTick>
 8003abc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	f040 80e0 	bne.w	8003c8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	2319      	movs	r3, #25
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	4970      	ldr	r1, [pc, #448]	@ (8003c98 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fdf4 	bl	80046c4 <I2C_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e0d3      	b.n	8003c8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_I2C_Master_Transmit+0x50>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e0cc      	b.n	8003c8e <HAL_I2C_Master_Transmit+0x1ea>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d007      	beq.n	8003b1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2221      	movs	r2, #33	@ 0x21
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2210      	movs	r2, #16
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	893a      	ldrh	r2, [r7, #8]
 8003b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a50      	ldr	r2, [pc, #320]	@ (8003c9c <HAL_I2C_Master_Transmit+0x1f8>)
 8003b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b5c:	8979      	ldrh	r1, [r7, #10]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	6a3a      	ldr	r2, [r7, #32]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 fbc8 	bl	80042f8 <I2C_MasterRequestWrite>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e08d      	b.n	8003c8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b72:	2300      	movs	r3, #0
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b88:	e066      	b.n	8003c58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	6a39      	ldr	r1, [r7, #32]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 feb2 	bl	80048f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00d      	beq.n	8003bb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d107      	bne.n	8003bb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e06b      	b.n	8003c8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	781a      	ldrb	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d11b      	bne.n	8003c2c <HAL_I2C_Master_Transmit+0x188>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d017      	beq.n	8003c2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	781a      	ldrb	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	6a39      	ldr	r1, [r7, #32]
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 fea9 	bl	8004988 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00d      	beq.n	8003c58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d107      	bne.n	8003c54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e01a      	b.n	8003c8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d194      	bne.n	8003b8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e000      	b.n	8003c8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c8c:	2302      	movs	r3, #2
  }
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	00100002 	.word	0x00100002
 8003c9c:	ffff0000 	.word	0xffff0000

08003ca0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08c      	sub	sp, #48	@ 0x30
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	607a      	str	r2, [r7, #4]
 8003caa:	461a      	mov	r2, r3
 8003cac:	460b      	mov	r3, r1
 8003cae:	817b      	strh	r3, [r7, #10]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cb4:	f7ff fb08 	bl	80032c8 <HAL_GetTick>
 8003cb8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	f040 8217 	bne.w	80040f6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	2319      	movs	r3, #25
 8003cce:	2201      	movs	r2, #1
 8003cd0:	497c      	ldr	r1, [pc, #496]	@ (8003ec4 <HAL_I2C_Master_Receive+0x224>)
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fcf6 	bl	80046c4 <I2C_WaitOnFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e20a      	b.n	80040f8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_I2C_Master_Receive+0x50>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e203      	b.n	80040f8 <HAL_I2C_Master_Receive+0x458>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d007      	beq.n	8003d16 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2222      	movs	r2, #34	@ 0x22
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2210      	movs	r2, #16
 8003d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	893a      	ldrh	r2, [r7, #8]
 8003d46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4a5c      	ldr	r2, [pc, #368]	@ (8003ec8 <HAL_I2C_Master_Receive+0x228>)
 8003d56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d58:	8979      	ldrh	r1, [r7, #10]
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fb4c 	bl	80043fc <I2C_MasterRequestRead>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e1c4      	b.n	80040f8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d113      	bne.n	8003d9e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d76:	2300      	movs	r3, #0
 8003d78:	623b      	str	r3, [r7, #32]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	623b      	str	r3, [r7, #32]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	623b      	str	r3, [r7, #32]
 8003d8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	e198      	b.n	80040d0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d11b      	bne.n	8003dde <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	e178      	b.n	80040d0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d11b      	bne.n	8003e1e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e06:	2300      	movs	r3, #0
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	e158      	b.n	80040d0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e44:	e144      	b.n	80040d0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	f200 80f1 	bhi.w	8004032 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d123      	bne.n	8003ea0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fddb 	bl	8004a18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e145      	b.n	80040f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e9e:	e117      	b.n	80040d0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d14e      	bne.n	8003f46 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eae:	2200      	movs	r2, #0
 8003eb0:	4906      	ldr	r1, [pc, #24]	@ (8003ecc <HAL_I2C_Master_Receive+0x22c>)
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 fc06 	bl	80046c4 <I2C_WaitOnFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e11a      	b.n	80040f8 <HAL_I2C_Master_Receive+0x458>
 8003ec2:	bf00      	nop
 8003ec4:	00100002 	.word	0x00100002
 8003ec8:	ffff0000 	.word	0xffff0000
 8003ecc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ede:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f44:	e0c4      	b.n	80040d0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	496c      	ldr	r1, [pc, #432]	@ (8004100 <HAL_I2C_Master_Receive+0x460>)
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 fbb7 	bl	80046c4 <I2C_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0cb      	b.n	80040f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	2200      	movs	r2, #0
 8003faa:	4955      	ldr	r1, [pc, #340]	@ (8004100 <HAL_I2C_Master_Receive+0x460>)
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fb89 	bl	80046c4 <I2C_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e09d      	b.n	80040f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004008:	b2d2      	uxtb	r2, r2
 800400a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004030:	e04e      	b.n	80040d0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004034:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fcee 	bl	8004a18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e058      	b.n	80040f8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b04      	cmp	r3, #4
 8004084:	d124      	bne.n	80040d0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408a:	2b03      	cmp	r3, #3
 800408c:	d107      	bne.n	800409e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800409c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f47f aeb6 	bne.w	8003e46 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e000      	b.n	80040f8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80040f6:	2302      	movs	r3, #2
  }
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3728      	adds	r7, #40	@ 0x28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	00010004 	.word	0x00010004

08004104 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	4608      	mov	r0, r1
 800410e:	4611      	mov	r1, r2
 8004110:	461a      	mov	r2, r3
 8004112:	4603      	mov	r3, r0
 8004114:	817b      	strh	r3, [r7, #10]
 8004116:	460b      	mov	r3, r1
 8004118:	813b      	strh	r3, [r7, #8]
 800411a:	4613      	mov	r3, r2
 800411c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800411e:	f7ff f8d3 	bl	80032c8 <HAL_GetTick>
 8004122:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b20      	cmp	r3, #32
 800412e:	f040 80d9 	bne.w	80042e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	2319      	movs	r3, #25
 8004138:	2201      	movs	r2, #1
 800413a:	496d      	ldr	r1, [pc, #436]	@ (80042f0 <HAL_I2C_Mem_Write+0x1ec>)
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 fac1 	bl	80046c4 <I2C_WaitOnFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
 800414a:	e0cc      	b.n	80042e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_I2C_Mem_Write+0x56>
 8004156:	2302      	movs	r3, #2
 8004158:	e0c5      	b.n	80042e6 <HAL_I2C_Mem_Write+0x1e2>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b01      	cmp	r3, #1
 800416e:	d007      	beq.n	8004180 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800418e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2221      	movs	r2, #33	@ 0x21
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2240      	movs	r2, #64	@ 0x40
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a3a      	ldr	r2, [r7, #32]
 80041aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4a4d      	ldr	r2, [pc, #308]	@ (80042f4 <HAL_I2C_Mem_Write+0x1f0>)
 80041c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041c2:	88f8      	ldrh	r0, [r7, #6]
 80041c4:	893a      	ldrh	r2, [r7, #8]
 80041c6:	8979      	ldrh	r1, [r7, #10]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	4603      	mov	r3, r0
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f9e0 	bl	8004598 <I2C_RequestMemoryWrite>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d052      	beq.n	8004284 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e081      	b.n	80042e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fb86 	bl	80048f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00d      	beq.n	800420e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d107      	bne.n	800420a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004208:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e06b      	b.n	80042e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004212:	781a      	ldrb	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b04      	cmp	r3, #4
 800424a:	d11b      	bne.n	8004284 <HAL_I2C_Mem_Write+0x180>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004250:	2b00      	cmp	r3, #0
 8004252:	d017      	beq.n	8004284 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004258:	781a      	ldrb	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1aa      	bne.n	80041e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 fb79 	bl	8004988 <I2C_WaitOnBTFFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00d      	beq.n	80042b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d107      	bne.n	80042b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e016      	b.n	80042e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	00100002 	.word	0x00100002
 80042f4:	ffff0000 	.word	0xffff0000

080042f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	607a      	str	r2, [r7, #4]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	460b      	mov	r3, r1
 8004306:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d006      	beq.n	8004322 <I2C_MasterRequestWrite+0x2a>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d003      	beq.n	8004322 <I2C_MasterRequestWrite+0x2a>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004320:	d108      	bne.n	8004334 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e00b      	b.n	800434c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004338:	2b12      	cmp	r3, #18
 800433a:	d107      	bne.n	800434c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800434a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f9b3 	bl	80046c4 <I2C_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00d      	beq.n	8004380 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004372:	d103      	bne.n	800437c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800437a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e035      	b.n	80043ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004388:	d108      	bne.n	800439c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800438a:	897b      	ldrh	r3, [r7, #10]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004398:	611a      	str	r2, [r3, #16]
 800439a:	e01b      	b.n	80043d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800439c:	897b      	ldrh	r3, [r7, #10]
 800439e:	11db      	asrs	r3, r3, #7
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f003 0306 	and.w	r3, r3, #6
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f063 030f 	orn	r3, r3, #15
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	490e      	ldr	r1, [pc, #56]	@ (80043f4 <I2C_MasterRequestWrite+0xfc>)
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f9fc 	bl	80047b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e010      	b.n	80043ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043ca:	897b      	ldrh	r3, [r7, #10]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4907      	ldr	r1, [pc, #28]	@ (80043f8 <I2C_MasterRequestWrite+0x100>)
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f9ec 	bl	80047b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	00010008 	.word	0x00010008
 80043f8:	00010002 	.word	0x00010002

080043fc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	607a      	str	r2, [r7, #4]
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	460b      	mov	r3, r1
 800440a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004410:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004420:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d006      	beq.n	8004436 <I2C_MasterRequestRead+0x3a>
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d003      	beq.n	8004436 <I2C_MasterRequestRead+0x3a>
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004434:	d108      	bne.n	8004448 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	e00b      	b.n	8004460 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444c:	2b11      	cmp	r3, #17
 800444e:	d107      	bne.n	8004460 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800445e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f929 	bl	80046c4 <I2C_WaitOnFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00d      	beq.n	8004494 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004486:	d103      	bne.n	8004490 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800448e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e079      	b.n	8004588 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800449c:	d108      	bne.n	80044b0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800449e:	897b      	ldrh	r3, [r7, #10]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	611a      	str	r2, [r3, #16]
 80044ae:	e05f      	b.n	8004570 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044b0:	897b      	ldrh	r3, [r7, #10]
 80044b2:	11db      	asrs	r3, r3, #7
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	f003 0306 	and.w	r3, r3, #6
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	f063 030f 	orn	r3, r3, #15
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	4930      	ldr	r1, [pc, #192]	@ (8004590 <I2C_MasterRequestRead+0x194>)
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 f972 	bl	80047b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e054      	b.n	8004588 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044de:	897b      	ldrh	r3, [r7, #10]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	4929      	ldr	r1, [pc, #164]	@ (8004594 <I2C_MasterRequestRead+0x198>)
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f962 	bl	80047b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e044      	b.n	8004588 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004522:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f8c7 	bl	80046c4 <I2C_WaitOnFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00d      	beq.n	8004558 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800454a:	d103      	bne.n	8004554 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004552:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e017      	b.n	8004588 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004558:	897b      	ldrh	r3, [r7, #10]
 800455a:	11db      	asrs	r3, r3, #7
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f003 0306 	and.w	r3, r3, #6
 8004562:	b2db      	uxtb	r3, r3
 8004564:	f063 030e 	orn	r3, r3, #14
 8004568:	b2da      	uxtb	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	4907      	ldr	r1, [pc, #28]	@ (8004594 <I2C_MasterRequestRead+0x198>)
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f91e 	bl	80047b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	00010008 	.word	0x00010008
 8004594:	00010002 	.word	0x00010002

08004598 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	4608      	mov	r0, r1
 80045a2:	4611      	mov	r1, r2
 80045a4:	461a      	mov	r2, r3
 80045a6:	4603      	mov	r3, r0
 80045a8:	817b      	strh	r3, [r7, #10]
 80045aa:	460b      	mov	r3, r1
 80045ac:	813b      	strh	r3, [r7, #8]
 80045ae:	4613      	mov	r3, r2
 80045b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f878 	bl	80046c4 <I2C_WaitOnFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00d      	beq.n	80045f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045e8:	d103      	bne.n	80045f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e05f      	b.n	80046b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045f6:	897b      	ldrh	r3, [r7, #10]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	461a      	mov	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004604:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	6a3a      	ldr	r2, [r7, #32]
 800460a:	492d      	ldr	r1, [pc, #180]	@ (80046c0 <I2C_RequestMemoryWrite+0x128>)
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f8d3 	bl	80047b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e04c      	b.n	80046b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004634:	6a39      	ldr	r1, [r7, #32]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f95e 	bl	80048f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00d      	beq.n	800465e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	2b04      	cmp	r3, #4
 8004648:	d107      	bne.n	800465a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004658:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e02b      	b.n	80046b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d105      	bne.n	8004670 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004664:	893b      	ldrh	r3, [r7, #8]
 8004666:	b2da      	uxtb	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	611a      	str	r2, [r3, #16]
 800466e:	e021      	b.n	80046b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004670:	893b      	ldrh	r3, [r7, #8]
 8004672:	0a1b      	lsrs	r3, r3, #8
 8004674:	b29b      	uxth	r3, r3
 8004676:	b2da      	uxtb	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800467e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004680:	6a39      	ldr	r1, [r7, #32]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 f938 	bl	80048f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00d      	beq.n	80046aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004692:	2b04      	cmp	r3, #4
 8004694:	d107      	bne.n	80046a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e005      	b.n	80046b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046aa:	893b      	ldrh	r3, [r7, #8]
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	00010002 	.word	0x00010002

080046c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	4613      	mov	r3, r2
 80046d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046d4:	e048      	b.n	8004768 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046dc:	d044      	beq.n	8004768 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046de:	f7fe fdf3 	bl	80032c8 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d302      	bcc.n	80046f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d139      	bne.n	8004768 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	0c1b      	lsrs	r3, r3, #16
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d10d      	bne.n	800471a <I2C_WaitOnFlagUntilTimeout+0x56>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	43da      	mvns	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	4013      	ands	r3, r2
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	e00c      	b.n	8004734 <I2C_WaitOnFlagUntilTimeout+0x70>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	43da      	mvns	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	4013      	ands	r3, r2
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	bf0c      	ite	eq
 800472c:	2301      	moveq	r3, #1
 800472e:	2300      	movne	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	461a      	mov	r2, r3
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	429a      	cmp	r2, r3
 8004738:	d116      	bne.n	8004768 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004754:	f043 0220 	orr.w	r2, r3, #32
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e023      	b.n	80047b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	0c1b      	lsrs	r3, r3, #16
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b01      	cmp	r3, #1
 8004770:	d10d      	bne.n	800478e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	43da      	mvns	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4013      	ands	r3, r2
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	e00c      	b.n	80047a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	43da      	mvns	r2, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	4013      	ands	r3, r2
 800479a:	b29b      	uxth	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	79fb      	ldrb	r3, [r7, #7]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d093      	beq.n	80046d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047c6:	e071      	b.n	80048ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047d6:	d123      	bne.n	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480c:	f043 0204 	orr.w	r2, r3, #4
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e067      	b.n	80048f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004826:	d041      	beq.n	80048ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004828:	f7fe fd4e 	bl	80032c8 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	d302      	bcc.n	800483e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d136      	bne.n	80048ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b01      	cmp	r3, #1
 8004846:	d10c      	bne.n	8004862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	43da      	mvns	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4013      	ands	r3, r2
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	bf14      	ite	ne
 800485a:	2301      	movne	r3, #1
 800485c:	2300      	moveq	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	e00b      	b.n	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	43da      	mvns	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4013      	ands	r3, r2
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	bf14      	ite	ne
 8004874:	2301      	movne	r3, #1
 8004876:	2300      	moveq	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d016      	beq.n	80048ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004898:	f043 0220 	orr.w	r2, r3, #32
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e021      	b.n	80048f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	0c1b      	lsrs	r3, r3, #16
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d10c      	bne.n	80048d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	43da      	mvns	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4013      	ands	r3, r2
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bf14      	ite	ne
 80048c8:	2301      	movne	r3, #1
 80048ca:	2300      	moveq	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	e00b      	b.n	80048e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	43da      	mvns	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4013      	ands	r3, r2
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	bf14      	ite	ne
 80048e2:	2301      	movne	r3, #1
 80048e4:	2300      	moveq	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f47f af6d 	bne.w	80047c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004904:	e034      	b.n	8004970 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f8e3 	bl	8004ad2 <I2C_IsAcknowledgeFailed>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e034      	b.n	8004980 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d028      	beq.n	8004970 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491e:	f7fe fcd3 	bl	80032c8 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	429a      	cmp	r2, r3
 800492c:	d302      	bcc.n	8004934 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d11d      	bne.n	8004970 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493e:	2b80      	cmp	r3, #128	@ 0x80
 8004940:	d016      	beq.n	8004970 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	f043 0220 	orr.w	r2, r3, #32
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e007      	b.n	8004980 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800497a:	2b80      	cmp	r3, #128	@ 0x80
 800497c:	d1c3      	bne.n	8004906 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004994:	e034      	b.n	8004a00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f89b 	bl	8004ad2 <I2C_IsAcknowledgeFailed>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e034      	b.n	8004a10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ac:	d028      	beq.n	8004a00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ae:	f7fe fc8b 	bl	80032c8 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d302      	bcc.n	80049c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d11d      	bne.n	8004a00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d016      	beq.n	8004a00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ec:	f043 0220 	orr.w	r2, r3, #32
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e007      	b.n	8004a10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d1c3      	bne.n	8004996 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a24:	e049      	b.n	8004aba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b10      	cmp	r3, #16
 8004a32:	d119      	bne.n	8004a68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0210 	mvn.w	r2, #16
 8004a3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e030      	b.n	8004aca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a68:	f7fe fc2e 	bl	80032c8 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d302      	bcc.n	8004a7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d11d      	bne.n	8004aba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a88:	2b40      	cmp	r3, #64	@ 0x40
 8004a8a:	d016      	beq.n	8004aba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa6:	f043 0220 	orr.w	r2, r3, #32
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e007      	b.n	8004aca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac4:	2b40      	cmp	r3, #64	@ 0x40
 8004ac6:	d1ae      	bne.n	8004a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ae8:	d11b      	bne.n	8004b22 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004af2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0e:	f043 0204 	orr.w	r2, r3, #4
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0cc      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b44:	4b68      	ldr	r3, [pc, #416]	@ (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d90c      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b52:	4b65      	ldr	r3, [pc, #404]	@ (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b63      	ldr	r3, [pc, #396]	@ (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0b8      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d020      	beq.n	8004bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b84:	4b59      	ldr	r3, [pc, #356]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a58      	ldr	r2, [pc, #352]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b9c:	4b53      	ldr	r3, [pc, #332]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4a52      	ldr	r2, [pc, #328]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba8:	4b50      	ldr	r3, [pc, #320]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	494d      	ldr	r1, [pc, #308]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d044      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d107      	bne.n	8004bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bce:	4b47      	ldr	r3, [pc, #284]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d119      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e07f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d003      	beq.n	8004bee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d107      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bee:	4b3f      	ldr	r3, [pc, #252]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e06f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e067      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c0e:	4b37      	ldr	r3, [pc, #220]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f023 0203 	bic.w	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	4934      	ldr	r1, [pc, #208]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c20:	f7fe fb52 	bl	80032c8 <HAL_GetTick>
 8004c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c26:	e00a      	b.n	8004c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c28:	f7fe fb4e 	bl	80032c8 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e04f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 020c 	and.w	r2, r3, #12
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d1eb      	bne.n	8004c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c50:	4b25      	ldr	r3, [pc, #148]	@ (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d20c      	bcs.n	8004c78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5e:	4b22      	ldr	r3, [pc, #136]	@ (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c66:	4b20      	ldr	r3, [pc, #128]	@ (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d001      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e032      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c84:	4b19      	ldr	r3, [pc, #100]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4916      	ldr	r1, [pc, #88]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ca2:	4b12      	ldr	r3, [pc, #72]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	490e      	ldr	r1, [pc, #56]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cb6:	f000 f841 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	091b      	lsrs	r3, r3, #4
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	490a      	ldr	r1, [pc, #40]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc8:	5ccb      	ldrb	r3, [r1, r3]
 8004cca:	fa22 f303 	lsr.w	r3, r2, r3
 8004cce:	4a09      	ldr	r2, [pc, #36]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004cd2:	4b09      	ldr	r3, [pc, #36]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe fab2 	bl	8003240 <HAL_InitTick>

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40023c00 	.word	0x40023c00
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	08008258 	.word	0x08008258
 8004cf4:	20000000 	.word	0x20000000
 8004cf8:	20000004 	.word	0x20000004

08004cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d00:	4b03      	ldr	r3, [pc, #12]	@ (8004d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d02:	681b      	ldr	r3, [r3, #0]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000000 	.word	0x20000000

08004d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d18:	f7ff fff0 	bl	8004cfc <HAL_RCC_GetHCLKFreq>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	0a9b      	lsrs	r3, r3, #10
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	4903      	ldr	r1, [pc, #12]	@ (8004d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d2a:	5ccb      	ldrb	r3, [r1, r3]
 8004d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40023800 	.word	0x40023800
 8004d38:	08008268 	.word	0x08008268

08004d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d40:	b0a6      	sub	sp, #152	@ 0x98
 8004d42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d62:	4bc8      	ldr	r3, [pc, #800]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 030c 	and.w	r3, r3, #12
 8004d6a:	2b0c      	cmp	r3, #12
 8004d6c:	f200 817e 	bhi.w	800506c <HAL_RCC_GetSysClockFreq+0x330>
 8004d70:	a201      	add	r2, pc, #4	@ (adr r2, 8004d78 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d76:	bf00      	nop
 8004d78:	08004dad 	.word	0x08004dad
 8004d7c:	0800506d 	.word	0x0800506d
 8004d80:	0800506d 	.word	0x0800506d
 8004d84:	0800506d 	.word	0x0800506d
 8004d88:	08004db5 	.word	0x08004db5
 8004d8c:	0800506d 	.word	0x0800506d
 8004d90:	0800506d 	.word	0x0800506d
 8004d94:	0800506d 	.word	0x0800506d
 8004d98:	08004dbd 	.word	0x08004dbd
 8004d9c:	0800506d 	.word	0x0800506d
 8004da0:	0800506d 	.word	0x0800506d
 8004da4:	0800506d 	.word	0x0800506d
 8004da8:	08004f27 	.word	0x08004f27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dac:	4bb6      	ldr	r3, [pc, #728]	@ (8005088 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004dae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004db2:	e15f      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004db4:	4bb5      	ldr	r3, [pc, #724]	@ (800508c <HAL_RCC_GetSysClockFreq+0x350>)
 8004db6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004dba:	e15b      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dbc:	4bb1      	ldr	r3, [pc, #708]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x348>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dc8:	4bae      	ldr	r3, [pc, #696]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x348>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d031      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd4:	4bab      	ldr	r3, [pc, #684]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x348>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	099b      	lsrs	r3, r3, #6
 8004dda:	2200      	movs	r2, #0
 8004ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004de0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004de8:	2300      	movs	r3, #0
 8004dea:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dec:	4ba7      	ldr	r3, [pc, #668]	@ (800508c <HAL_RCC_GetSysClockFreq+0x350>)
 8004dee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004df2:	462a      	mov	r2, r5
 8004df4:	fb03 f202 	mul.w	r2, r3, r2
 8004df8:	2300      	movs	r3, #0
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	fb01 f303 	mul.w	r3, r1, r3
 8004e00:	4413      	add	r3, r2
 8004e02:	4aa2      	ldr	r2, [pc, #648]	@ (800508c <HAL_RCC_GetSysClockFreq+0x350>)
 8004e04:	4621      	mov	r1, r4
 8004e06:	fba1 1202 	umull	r1, r2, r1, r2
 8004e0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e0c:	460a      	mov	r2, r1
 8004e0e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004e10:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004e12:	4413      	add	r3, r2
 8004e14:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e1e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004e20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e24:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004e28:	f7fb fede 	bl	8000be8 <__aeabi_uldivmod>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4613      	mov	r3, r2
 8004e32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e36:	e064      	b.n	8004f02 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e38:	4b92      	ldr	r3, [pc, #584]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x348>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	099b      	lsrs	r3, r3, #6
 8004e3e:	2200      	movs	r2, #0
 8004e40:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e42:	657a      	str	r2, [r7, #84]	@ 0x54
 8004e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e50:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004e54:	4622      	mov	r2, r4
 8004e56:	462b      	mov	r3, r5
 8004e58:	f04f 0000 	mov.w	r0, #0
 8004e5c:	f04f 0100 	mov.w	r1, #0
 8004e60:	0159      	lsls	r1, r3, #5
 8004e62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e66:	0150      	lsls	r0, r2, #5
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	1a51      	subs	r1, r2, r1
 8004e70:	6139      	str	r1, [r7, #16]
 8004e72:	4629      	mov	r1, r5
 8004e74:	eb63 0301 	sbc.w	r3, r3, r1
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e86:	4659      	mov	r1, fp
 8004e88:	018b      	lsls	r3, r1, #6
 8004e8a:	4651      	mov	r1, sl
 8004e8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e90:	4651      	mov	r1, sl
 8004e92:	018a      	lsls	r2, r1, #6
 8004e94:	4651      	mov	r1, sl
 8004e96:	ebb2 0801 	subs.w	r8, r2, r1
 8004e9a:	4659      	mov	r1, fp
 8004e9c:	eb63 0901 	sbc.w	r9, r3, r1
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eb4:	4690      	mov	r8, r2
 8004eb6:	4699      	mov	r9, r3
 8004eb8:	4623      	mov	r3, r4
 8004eba:	eb18 0303 	adds.w	r3, r8, r3
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	462b      	mov	r3, r5
 8004ec2:	eb49 0303 	adc.w	r3, r9, r3
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	028b      	lsls	r3, r1, #10
 8004ed8:	4621      	mov	r1, r4
 8004eda:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ede:	4621      	mov	r1, r4
 8004ee0:	028a      	lsls	r2, r1, #10
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eea:	2200      	movs	r2, #0
 8004eec:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eee:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ef0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ef4:	f7fb fe78 	bl	8000be8 <__aeabi_uldivmod>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4613      	mov	r3, r2
 8004efe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f02:	4b60      	ldr	r3, [pc, #384]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	0c1b      	lsrs	r3, r3, #16
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004f14:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004f24:	e0a6      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f26:	4b57      	ldr	r3, [pc, #348]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f32:	4b54      	ldr	r3, [pc, #336]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d02a      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f3e:	4b51      	ldr	r3, [pc, #324]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	099b      	lsrs	r3, r3, #6
 8004f44:	2200      	movs	r2, #0
 8004f46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f50:	2100      	movs	r1, #0
 8004f52:	4b4e      	ldr	r3, [pc, #312]	@ (800508c <HAL_RCC_GetSysClockFreq+0x350>)
 8004f54:	fb03 f201 	mul.w	r2, r3, r1
 8004f58:	2300      	movs	r3, #0
 8004f5a:	fb00 f303 	mul.w	r3, r0, r3
 8004f5e:	4413      	add	r3, r2
 8004f60:	4a4a      	ldr	r2, [pc, #296]	@ (800508c <HAL_RCC_GetSysClockFreq+0x350>)
 8004f62:	fba0 1202 	umull	r1, r2, r0, r2
 8004f66:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f68:	460a      	mov	r2, r1
 8004f6a:	673a      	str	r2, [r7, #112]	@ 0x70
 8004f6c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004f6e:	4413      	add	r3, r2
 8004f70:	677b      	str	r3, [r7, #116]	@ 0x74
 8004f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f76:	2200      	movs	r2, #0
 8004f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f7a:	637a      	str	r2, [r7, #52]	@ 0x34
 8004f7c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004f80:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004f84:	f7fb fe30 	bl	8000be8 <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f92:	e05b      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f94:	4b3b      	ldr	r3, [pc, #236]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	099b      	lsrs	r3, r3, #6
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	464b      	mov	r3, r9
 8004fb4:	f04f 0000 	mov.w	r0, #0
 8004fb8:	f04f 0100 	mov.w	r1, #0
 8004fbc:	0159      	lsls	r1, r3, #5
 8004fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fc2:	0150      	lsls	r0, r2, #5
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4641      	mov	r1, r8
 8004fca:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fce:	4649      	mov	r1, r9
 8004fd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fe0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fe4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fe8:	ebb2 040a 	subs.w	r4, r2, sl
 8004fec:	eb63 050b 	sbc.w	r5, r3, fp
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	00eb      	lsls	r3, r5, #3
 8004ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ffe:	00e2      	lsls	r2, r4, #3
 8005000:	4614      	mov	r4, r2
 8005002:	461d      	mov	r5, r3
 8005004:	4643      	mov	r3, r8
 8005006:	18e3      	adds	r3, r4, r3
 8005008:	603b      	str	r3, [r7, #0]
 800500a:	464b      	mov	r3, r9
 800500c:	eb45 0303 	adc.w	r3, r5, r3
 8005010:	607b      	str	r3, [r7, #4]
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800501e:	4629      	mov	r1, r5
 8005020:	028b      	lsls	r3, r1, #10
 8005022:	4621      	mov	r1, r4
 8005024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005028:	4621      	mov	r1, r4
 800502a:	028a      	lsls	r2, r1, #10
 800502c:	4610      	mov	r0, r2
 800502e:	4619      	mov	r1, r3
 8005030:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005034:	2200      	movs	r2, #0
 8005036:	61bb      	str	r3, [r7, #24]
 8005038:	61fa      	str	r2, [r7, #28]
 800503a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800503e:	f7fb fdd3 	bl	8000be8 <__aeabi_uldivmod>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4613      	mov	r3, r2
 8005048:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800504c:	4b0d      	ldr	r3, [pc, #52]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x348>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	0f1b      	lsrs	r3, r3, #28
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800505a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800505e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005062:	fbb2 f3f3 	udiv	r3, r2, r3
 8005066:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800506a:	e003      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800506c:	4b06      	ldr	r3, [pc, #24]	@ (8005088 <HAL_RCC_GetSysClockFreq+0x34c>)
 800506e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005072:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005074:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005078:	4618      	mov	r0, r3
 800507a:	3798      	adds	r7, #152	@ 0x98
 800507c:	46bd      	mov	sp, r7
 800507e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005082:	bf00      	nop
 8005084:	40023800 	.word	0x40023800
 8005088:	00f42400 	.word	0x00f42400
 800508c:	017d7840 	.word	0x017d7840

08005090 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e28d      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 8083 	beq.w	80051b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80050b0:	4b94      	ldr	r3, [pc, #592]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 030c 	and.w	r3, r3, #12
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d019      	beq.n	80050f0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80050bc:	4b91      	ldr	r3, [pc, #580]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 030c 	and.w	r3, r3, #12
        || \
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d106      	bne.n	80050d6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80050c8:	4b8e      	ldr	r3, [pc, #568]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050d4:	d00c      	beq.n	80050f0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050d6:	4b8b      	ldr	r3, [pc, #556]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80050de:	2b0c      	cmp	r3, #12
 80050e0:	d112      	bne.n	8005108 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050e2:	4b88      	ldr	r3, [pc, #544]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050ee:	d10b      	bne.n	8005108 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f0:	4b84      	ldr	r3, [pc, #528]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d05b      	beq.n	80051b4 <HAL_RCC_OscConfig+0x124>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d157      	bne.n	80051b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e25a      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005110:	d106      	bne.n	8005120 <HAL_RCC_OscConfig+0x90>
 8005112:	4b7c      	ldr	r3, [pc, #496]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a7b      	ldr	r2, [pc, #492]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 8005118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	e01d      	b.n	800515c <HAL_RCC_OscConfig+0xcc>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005128:	d10c      	bne.n	8005144 <HAL_RCC_OscConfig+0xb4>
 800512a:	4b76      	ldr	r3, [pc, #472]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a75      	ldr	r2, [pc, #468]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 8005130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	4b73      	ldr	r3, [pc, #460]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a72      	ldr	r2, [pc, #456]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 800513c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	e00b      	b.n	800515c <HAL_RCC_OscConfig+0xcc>
 8005144:	4b6f      	ldr	r3, [pc, #444]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a6e      	ldr	r2, [pc, #440]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 800514a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	4b6c      	ldr	r3, [pc, #432]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a6b      	ldr	r2, [pc, #428]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 8005156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800515a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d013      	beq.n	800518c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fe f8b0 	bl	80032c8 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800516c:	f7fe f8ac 	bl	80032c8 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b64      	cmp	r3, #100	@ 0x64
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e21f      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800517e:	4b61      	ldr	r3, [pc, #388]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f0      	beq.n	800516c <HAL_RCC_OscConfig+0xdc>
 800518a:	e014      	b.n	80051b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518c:	f7fe f89c 	bl	80032c8 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005194:	f7fe f898 	bl	80032c8 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b64      	cmp	r3, #100	@ 0x64
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e20b      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051a6:	4b57      	ldr	r3, [pc, #348]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f0      	bne.n	8005194 <HAL_RCC_OscConfig+0x104>
 80051b2:	e000      	b.n	80051b6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d06f      	beq.n	80052a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051c2:	4b50      	ldr	r3, [pc, #320]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 030c 	and.w	r3, r3, #12
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d017      	beq.n	80051fe <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80051ce:	4b4d      	ldr	r3, [pc, #308]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 030c 	and.w	r3, r3, #12
        || \
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d105      	bne.n	80051e6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80051da:	4b4a      	ldr	r3, [pc, #296]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00b      	beq.n	80051fe <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051e6:	4b47      	ldr	r3, [pc, #284]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80051ee:	2b0c      	cmp	r3, #12
 80051f0:	d11c      	bne.n	800522c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051f2:	4b44      	ldr	r3, [pc, #272]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d116      	bne.n	800522c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051fe:	4b41      	ldr	r3, [pc, #260]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <HAL_RCC_OscConfig+0x186>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d001      	beq.n	8005216 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e1d3      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005216:	4b3b      	ldr	r3, [pc, #236]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	4937      	ldr	r1, [pc, #220]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 8005226:	4313      	orrs	r3, r2
 8005228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800522a:	e03a      	b.n	80052a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d020      	beq.n	8005276 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005234:	4b34      	ldr	r3, [pc, #208]	@ (8005308 <HAL_RCC_OscConfig+0x278>)
 8005236:	2201      	movs	r2, #1
 8005238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523a:	f7fe f845 	bl	80032c8 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005242:	f7fe f841 	bl	80032c8 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e1b4      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005254:	4b2b      	ldr	r3, [pc, #172]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f0      	beq.n	8005242 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005260:	4b28      	ldr	r3, [pc, #160]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	4925      	ldr	r1, [pc, #148]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 8005270:	4313      	orrs	r3, r2
 8005272:	600b      	str	r3, [r1, #0]
 8005274:	e015      	b.n	80052a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005276:	4b24      	ldr	r3, [pc, #144]	@ (8005308 <HAL_RCC_OscConfig+0x278>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527c:	f7fe f824 	bl	80032c8 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005284:	f7fe f820 	bl	80032c8 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e193      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005296:	4b1b      	ldr	r3, [pc, #108]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f0      	bne.n	8005284 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d036      	beq.n	800531c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d016      	beq.n	80052e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052b6:	4b15      	ldr	r3, [pc, #84]	@ (800530c <HAL_RCC_OscConfig+0x27c>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052bc:	f7fe f804 	bl	80032c8 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c4:	f7fe f800 	bl	80032c8 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e173      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005304 <HAL_RCC_OscConfig+0x274>)
 80052d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0x234>
 80052e2:	e01b      	b.n	800531c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052e4:	4b09      	ldr	r3, [pc, #36]	@ (800530c <HAL_RCC_OscConfig+0x27c>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ea:	f7fd ffed 	bl	80032c8 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f0:	e00e      	b.n	8005310 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052f2:	f7fd ffe9 	bl	80032c8 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d907      	bls.n	8005310 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e15c      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
 8005304:	40023800 	.word	0x40023800
 8005308:	42470000 	.word	0x42470000
 800530c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005310:	4b8a      	ldr	r3, [pc, #552]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 8005312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1ea      	bne.n	80052f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 8097 	beq.w	8005458 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800532a:	2300      	movs	r3, #0
 800532c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800532e:	4b83      	ldr	r3, [pc, #524]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10f      	bne.n	800535a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800533a:	2300      	movs	r3, #0
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	4b7f      	ldr	r3, [pc, #508]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	4a7e      	ldr	r2, [pc, #504]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 8005344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005348:	6413      	str	r3, [r2, #64]	@ 0x40
 800534a:	4b7c      	ldr	r3, [pc, #496]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005352:	60bb      	str	r3, [r7, #8]
 8005354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005356:	2301      	movs	r3, #1
 8005358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800535a:	4b79      	ldr	r3, [pc, #484]	@ (8005540 <HAL_RCC_OscConfig+0x4b0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005362:	2b00      	cmp	r3, #0
 8005364:	d118      	bne.n	8005398 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005366:	4b76      	ldr	r3, [pc, #472]	@ (8005540 <HAL_RCC_OscConfig+0x4b0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a75      	ldr	r2, [pc, #468]	@ (8005540 <HAL_RCC_OscConfig+0x4b0>)
 800536c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005372:	f7fd ffa9 	bl	80032c8 <HAL_GetTick>
 8005376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800537a:	f7fd ffa5 	bl	80032c8 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e118      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800538c:	4b6c      	ldr	r3, [pc, #432]	@ (8005540 <HAL_RCC_OscConfig+0x4b0>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0f0      	beq.n	800537a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d106      	bne.n	80053ae <HAL_RCC_OscConfig+0x31e>
 80053a0:	4b66      	ldr	r3, [pc, #408]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 80053a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a4:	4a65      	ldr	r2, [pc, #404]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 80053a6:	f043 0301 	orr.w	r3, r3, #1
 80053aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ac:	e01c      	b.n	80053e8 <HAL_RCC_OscConfig+0x358>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	2b05      	cmp	r3, #5
 80053b4:	d10c      	bne.n	80053d0 <HAL_RCC_OscConfig+0x340>
 80053b6:	4b61      	ldr	r3, [pc, #388]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 80053b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ba:	4a60      	ldr	r2, [pc, #384]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 80053bc:	f043 0304 	orr.w	r3, r3, #4
 80053c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80053c2:	4b5e      	ldr	r3, [pc, #376]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 80053c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c6:	4a5d      	ldr	r2, [pc, #372]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 80053c8:	f043 0301 	orr.w	r3, r3, #1
 80053cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ce:	e00b      	b.n	80053e8 <HAL_RCC_OscConfig+0x358>
 80053d0:	4b5a      	ldr	r3, [pc, #360]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 80053d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d4:	4a59      	ldr	r2, [pc, #356]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 80053d6:	f023 0301 	bic.w	r3, r3, #1
 80053da:	6713      	str	r3, [r2, #112]	@ 0x70
 80053dc:	4b57      	ldr	r3, [pc, #348]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 80053de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e0:	4a56      	ldr	r2, [pc, #344]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 80053e2:	f023 0304 	bic.w	r3, r3, #4
 80053e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d015      	beq.n	800541c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f0:	f7fd ff6a 	bl	80032c8 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f6:	e00a      	b.n	800540e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f8:	f7fd ff66 	bl	80032c8 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005406:	4293      	cmp	r3, r2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e0d7      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540e:	4b4b      	ldr	r3, [pc, #300]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0ee      	beq.n	80053f8 <HAL_RCC_OscConfig+0x368>
 800541a:	e014      	b.n	8005446 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541c:	f7fd ff54 	bl	80032c8 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005422:	e00a      	b.n	800543a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005424:	f7fd ff50 	bl	80032c8 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005432:	4293      	cmp	r3, r2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e0c1      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800543a:	4b40      	ldr	r3, [pc, #256]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 800543c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1ee      	bne.n	8005424 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005446:	7dfb      	ldrb	r3, [r7, #23]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d105      	bne.n	8005458 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800544c:	4b3b      	ldr	r3, [pc, #236]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 800544e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005450:	4a3a      	ldr	r2, [pc, #232]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 8005452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005456:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80ad 	beq.w	80055bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005462:	4b36      	ldr	r3, [pc, #216]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 030c 	and.w	r3, r3, #12
 800546a:	2b08      	cmp	r3, #8
 800546c:	d060      	beq.n	8005530 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d145      	bne.n	8005502 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005476:	4b33      	ldr	r3, [pc, #204]	@ (8005544 <HAL_RCC_OscConfig+0x4b4>)
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547c:	f7fd ff24 	bl	80032c8 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005484:	f7fd ff20 	bl	80032c8 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e093      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005496:	4b29      	ldr	r3, [pc, #164]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f0      	bne.n	8005484 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69da      	ldr	r2, [r3, #28]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b0:	019b      	lsls	r3, r3, #6
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b8:	085b      	lsrs	r3, r3, #1
 80054ba:	3b01      	subs	r3, #1
 80054bc:	041b      	lsls	r3, r3, #16
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c4:	061b      	lsls	r3, r3, #24
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054cc:	071b      	lsls	r3, r3, #28
 80054ce:	491b      	ldr	r1, [pc, #108]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005544 <HAL_RCC_OscConfig+0x4b4>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054da:	f7fd fef5 	bl	80032c8 <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e2:	f7fd fef1 	bl	80032c8 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e064      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f4:	4b11      	ldr	r3, [pc, #68]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f0      	beq.n	80054e2 <HAL_RCC_OscConfig+0x452>
 8005500:	e05c      	b.n	80055bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005502:	4b10      	ldr	r3, [pc, #64]	@ (8005544 <HAL_RCC_OscConfig+0x4b4>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005508:	f7fd fede 	bl	80032c8 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005510:	f7fd feda 	bl	80032c8 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e04d      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005522:	4b06      	ldr	r3, [pc, #24]	@ (800553c <HAL_RCC_OscConfig+0x4ac>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f0      	bne.n	8005510 <HAL_RCC_OscConfig+0x480>
 800552e:	e045      	b.n	80055bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d107      	bne.n	8005548 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e040      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
 800553c:	40023800 	.word	0x40023800
 8005540:	40007000 	.word	0x40007000
 8005544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005548:	4b1f      	ldr	r3, [pc, #124]	@ (80055c8 <HAL_RCC_OscConfig+0x538>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d030      	beq.n	80055b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005560:	429a      	cmp	r2, r3
 8005562:	d129      	bne.n	80055b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556e:	429a      	cmp	r2, r3
 8005570:	d122      	bne.n	80055b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005578:	4013      	ands	r3, r2
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800557e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005580:	4293      	cmp	r3, r2
 8005582:	d119      	bne.n	80055b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558e:	085b      	lsrs	r3, r3, #1
 8005590:	3b01      	subs	r3, #1
 8005592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005594:	429a      	cmp	r2, r3
 8005596:	d10f      	bne.n	80055b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d107      	bne.n	80055b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d001      	beq.n	80055bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	40023800 	.word	0x40023800

080055cc <__cvt>:
 80055cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055d0:	ec57 6b10 	vmov	r6, r7, d0
 80055d4:	2f00      	cmp	r7, #0
 80055d6:	460c      	mov	r4, r1
 80055d8:	4619      	mov	r1, r3
 80055da:	463b      	mov	r3, r7
 80055dc:	bfbb      	ittet	lt
 80055de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80055e2:	461f      	movlt	r7, r3
 80055e4:	2300      	movge	r3, #0
 80055e6:	232d      	movlt	r3, #45	@ 0x2d
 80055e8:	700b      	strb	r3, [r1, #0]
 80055ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80055f0:	4691      	mov	r9, r2
 80055f2:	f023 0820 	bic.w	r8, r3, #32
 80055f6:	bfbc      	itt	lt
 80055f8:	4632      	movlt	r2, r6
 80055fa:	4616      	movlt	r6, r2
 80055fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005600:	d005      	beq.n	800560e <__cvt+0x42>
 8005602:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005606:	d100      	bne.n	800560a <__cvt+0x3e>
 8005608:	3401      	adds	r4, #1
 800560a:	2102      	movs	r1, #2
 800560c:	e000      	b.n	8005610 <__cvt+0x44>
 800560e:	2103      	movs	r1, #3
 8005610:	ab03      	add	r3, sp, #12
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	ab02      	add	r3, sp, #8
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	ec47 6b10 	vmov	d0, r6, r7
 800561c:	4653      	mov	r3, sl
 800561e:	4622      	mov	r2, r4
 8005620:	f000 ff4a 	bl	80064b8 <_dtoa_r>
 8005624:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005628:	4605      	mov	r5, r0
 800562a:	d119      	bne.n	8005660 <__cvt+0x94>
 800562c:	f019 0f01 	tst.w	r9, #1
 8005630:	d00e      	beq.n	8005650 <__cvt+0x84>
 8005632:	eb00 0904 	add.w	r9, r0, r4
 8005636:	2200      	movs	r2, #0
 8005638:	2300      	movs	r3, #0
 800563a:	4630      	mov	r0, r6
 800563c:	4639      	mov	r1, r7
 800563e:	f7fb fa63 	bl	8000b08 <__aeabi_dcmpeq>
 8005642:	b108      	cbz	r0, 8005648 <__cvt+0x7c>
 8005644:	f8cd 900c 	str.w	r9, [sp, #12]
 8005648:	2230      	movs	r2, #48	@ 0x30
 800564a:	9b03      	ldr	r3, [sp, #12]
 800564c:	454b      	cmp	r3, r9
 800564e:	d31e      	bcc.n	800568e <__cvt+0xc2>
 8005650:	9b03      	ldr	r3, [sp, #12]
 8005652:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005654:	1b5b      	subs	r3, r3, r5
 8005656:	4628      	mov	r0, r5
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	b004      	add	sp, #16
 800565c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005660:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005664:	eb00 0904 	add.w	r9, r0, r4
 8005668:	d1e5      	bne.n	8005636 <__cvt+0x6a>
 800566a:	7803      	ldrb	r3, [r0, #0]
 800566c:	2b30      	cmp	r3, #48	@ 0x30
 800566e:	d10a      	bne.n	8005686 <__cvt+0xba>
 8005670:	2200      	movs	r2, #0
 8005672:	2300      	movs	r3, #0
 8005674:	4630      	mov	r0, r6
 8005676:	4639      	mov	r1, r7
 8005678:	f7fb fa46 	bl	8000b08 <__aeabi_dcmpeq>
 800567c:	b918      	cbnz	r0, 8005686 <__cvt+0xba>
 800567e:	f1c4 0401 	rsb	r4, r4, #1
 8005682:	f8ca 4000 	str.w	r4, [sl]
 8005686:	f8da 3000 	ldr.w	r3, [sl]
 800568a:	4499      	add	r9, r3
 800568c:	e7d3      	b.n	8005636 <__cvt+0x6a>
 800568e:	1c59      	adds	r1, r3, #1
 8005690:	9103      	str	r1, [sp, #12]
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	e7d9      	b.n	800564a <__cvt+0x7e>

08005696 <__exponent>:
 8005696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005698:	2900      	cmp	r1, #0
 800569a:	bfba      	itte	lt
 800569c:	4249      	neglt	r1, r1
 800569e:	232d      	movlt	r3, #45	@ 0x2d
 80056a0:	232b      	movge	r3, #43	@ 0x2b
 80056a2:	2909      	cmp	r1, #9
 80056a4:	7002      	strb	r2, [r0, #0]
 80056a6:	7043      	strb	r3, [r0, #1]
 80056a8:	dd29      	ble.n	80056fe <__exponent+0x68>
 80056aa:	f10d 0307 	add.w	r3, sp, #7
 80056ae:	461d      	mov	r5, r3
 80056b0:	270a      	movs	r7, #10
 80056b2:	461a      	mov	r2, r3
 80056b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80056b8:	fb07 1416 	mls	r4, r7, r6, r1
 80056bc:	3430      	adds	r4, #48	@ 0x30
 80056be:	f802 4c01 	strb.w	r4, [r2, #-1]
 80056c2:	460c      	mov	r4, r1
 80056c4:	2c63      	cmp	r4, #99	@ 0x63
 80056c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80056ca:	4631      	mov	r1, r6
 80056cc:	dcf1      	bgt.n	80056b2 <__exponent+0x1c>
 80056ce:	3130      	adds	r1, #48	@ 0x30
 80056d0:	1e94      	subs	r4, r2, #2
 80056d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80056d6:	1c41      	adds	r1, r0, #1
 80056d8:	4623      	mov	r3, r4
 80056da:	42ab      	cmp	r3, r5
 80056dc:	d30a      	bcc.n	80056f4 <__exponent+0x5e>
 80056de:	f10d 0309 	add.w	r3, sp, #9
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	42ac      	cmp	r4, r5
 80056e6:	bf88      	it	hi
 80056e8:	2300      	movhi	r3, #0
 80056ea:	3302      	adds	r3, #2
 80056ec:	4403      	add	r3, r0
 80056ee:	1a18      	subs	r0, r3, r0
 80056f0:	b003      	add	sp, #12
 80056f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80056f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80056fc:	e7ed      	b.n	80056da <__exponent+0x44>
 80056fe:	2330      	movs	r3, #48	@ 0x30
 8005700:	3130      	adds	r1, #48	@ 0x30
 8005702:	7083      	strb	r3, [r0, #2]
 8005704:	70c1      	strb	r1, [r0, #3]
 8005706:	1d03      	adds	r3, r0, #4
 8005708:	e7f1      	b.n	80056ee <__exponent+0x58>
	...

0800570c <_printf_float>:
 800570c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005710:	b08d      	sub	sp, #52	@ 0x34
 8005712:	460c      	mov	r4, r1
 8005714:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005718:	4616      	mov	r6, r2
 800571a:	461f      	mov	r7, r3
 800571c:	4605      	mov	r5, r0
 800571e:	f000 fdbd 	bl	800629c <_localeconv_r>
 8005722:	6803      	ldr	r3, [r0, #0]
 8005724:	9304      	str	r3, [sp, #16]
 8005726:	4618      	mov	r0, r3
 8005728:	f7fa fdc2 	bl	80002b0 <strlen>
 800572c:	2300      	movs	r3, #0
 800572e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005730:	f8d8 3000 	ldr.w	r3, [r8]
 8005734:	9005      	str	r0, [sp, #20]
 8005736:	3307      	adds	r3, #7
 8005738:	f023 0307 	bic.w	r3, r3, #7
 800573c:	f103 0208 	add.w	r2, r3, #8
 8005740:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005744:	f8d4 b000 	ldr.w	fp, [r4]
 8005748:	f8c8 2000 	str.w	r2, [r8]
 800574c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005750:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005754:	9307      	str	r3, [sp, #28]
 8005756:	f8cd 8018 	str.w	r8, [sp, #24]
 800575a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800575e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005762:	4b9c      	ldr	r3, [pc, #624]	@ (80059d4 <_printf_float+0x2c8>)
 8005764:	f04f 32ff 	mov.w	r2, #4294967295
 8005768:	f7fb fa00 	bl	8000b6c <__aeabi_dcmpun>
 800576c:	bb70      	cbnz	r0, 80057cc <_printf_float+0xc0>
 800576e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005772:	4b98      	ldr	r3, [pc, #608]	@ (80059d4 <_printf_float+0x2c8>)
 8005774:	f04f 32ff 	mov.w	r2, #4294967295
 8005778:	f7fb f9da 	bl	8000b30 <__aeabi_dcmple>
 800577c:	bb30      	cbnz	r0, 80057cc <_printf_float+0xc0>
 800577e:	2200      	movs	r2, #0
 8005780:	2300      	movs	r3, #0
 8005782:	4640      	mov	r0, r8
 8005784:	4649      	mov	r1, r9
 8005786:	f7fb f9c9 	bl	8000b1c <__aeabi_dcmplt>
 800578a:	b110      	cbz	r0, 8005792 <_printf_float+0x86>
 800578c:	232d      	movs	r3, #45	@ 0x2d
 800578e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005792:	4a91      	ldr	r2, [pc, #580]	@ (80059d8 <_printf_float+0x2cc>)
 8005794:	4b91      	ldr	r3, [pc, #580]	@ (80059dc <_printf_float+0x2d0>)
 8005796:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800579a:	bf8c      	ite	hi
 800579c:	4690      	movhi	r8, r2
 800579e:	4698      	movls	r8, r3
 80057a0:	2303      	movs	r3, #3
 80057a2:	6123      	str	r3, [r4, #16]
 80057a4:	f02b 0304 	bic.w	r3, fp, #4
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	f04f 0900 	mov.w	r9, #0
 80057ae:	9700      	str	r7, [sp, #0]
 80057b0:	4633      	mov	r3, r6
 80057b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80057b4:	4621      	mov	r1, r4
 80057b6:	4628      	mov	r0, r5
 80057b8:	f000 f9d2 	bl	8005b60 <_printf_common>
 80057bc:	3001      	adds	r0, #1
 80057be:	f040 808d 	bne.w	80058dc <_printf_float+0x1d0>
 80057c2:	f04f 30ff 	mov.w	r0, #4294967295
 80057c6:	b00d      	add	sp, #52	@ 0x34
 80057c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057cc:	4642      	mov	r2, r8
 80057ce:	464b      	mov	r3, r9
 80057d0:	4640      	mov	r0, r8
 80057d2:	4649      	mov	r1, r9
 80057d4:	f7fb f9ca 	bl	8000b6c <__aeabi_dcmpun>
 80057d8:	b140      	cbz	r0, 80057ec <_printf_float+0xe0>
 80057da:	464b      	mov	r3, r9
 80057dc:	2b00      	cmp	r3, #0
 80057de:	bfbc      	itt	lt
 80057e0:	232d      	movlt	r3, #45	@ 0x2d
 80057e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80057e6:	4a7e      	ldr	r2, [pc, #504]	@ (80059e0 <_printf_float+0x2d4>)
 80057e8:	4b7e      	ldr	r3, [pc, #504]	@ (80059e4 <_printf_float+0x2d8>)
 80057ea:	e7d4      	b.n	8005796 <_printf_float+0x8a>
 80057ec:	6863      	ldr	r3, [r4, #4]
 80057ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80057f2:	9206      	str	r2, [sp, #24]
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	d13b      	bne.n	8005870 <_printf_float+0x164>
 80057f8:	2306      	movs	r3, #6
 80057fa:	6063      	str	r3, [r4, #4]
 80057fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005800:	2300      	movs	r3, #0
 8005802:	6022      	str	r2, [r4, #0]
 8005804:	9303      	str	r3, [sp, #12]
 8005806:	ab0a      	add	r3, sp, #40	@ 0x28
 8005808:	e9cd a301 	strd	sl, r3, [sp, #4]
 800580c:	ab09      	add	r3, sp, #36	@ 0x24
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	6861      	ldr	r1, [r4, #4]
 8005812:	ec49 8b10 	vmov	d0, r8, r9
 8005816:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800581a:	4628      	mov	r0, r5
 800581c:	f7ff fed6 	bl	80055cc <__cvt>
 8005820:	9b06      	ldr	r3, [sp, #24]
 8005822:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005824:	2b47      	cmp	r3, #71	@ 0x47
 8005826:	4680      	mov	r8, r0
 8005828:	d129      	bne.n	800587e <_printf_float+0x172>
 800582a:	1cc8      	adds	r0, r1, #3
 800582c:	db02      	blt.n	8005834 <_printf_float+0x128>
 800582e:	6863      	ldr	r3, [r4, #4]
 8005830:	4299      	cmp	r1, r3
 8005832:	dd41      	ble.n	80058b8 <_printf_float+0x1ac>
 8005834:	f1aa 0a02 	sub.w	sl, sl, #2
 8005838:	fa5f fa8a 	uxtb.w	sl, sl
 800583c:	3901      	subs	r1, #1
 800583e:	4652      	mov	r2, sl
 8005840:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005844:	9109      	str	r1, [sp, #36]	@ 0x24
 8005846:	f7ff ff26 	bl	8005696 <__exponent>
 800584a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800584c:	1813      	adds	r3, r2, r0
 800584e:	2a01      	cmp	r2, #1
 8005850:	4681      	mov	r9, r0
 8005852:	6123      	str	r3, [r4, #16]
 8005854:	dc02      	bgt.n	800585c <_printf_float+0x150>
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	07d2      	lsls	r2, r2, #31
 800585a:	d501      	bpl.n	8005860 <_printf_float+0x154>
 800585c:	3301      	adds	r3, #1
 800585e:	6123      	str	r3, [r4, #16]
 8005860:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0a2      	beq.n	80057ae <_printf_float+0xa2>
 8005868:	232d      	movs	r3, #45	@ 0x2d
 800586a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800586e:	e79e      	b.n	80057ae <_printf_float+0xa2>
 8005870:	9a06      	ldr	r2, [sp, #24]
 8005872:	2a47      	cmp	r2, #71	@ 0x47
 8005874:	d1c2      	bne.n	80057fc <_printf_float+0xf0>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1c0      	bne.n	80057fc <_printf_float+0xf0>
 800587a:	2301      	movs	r3, #1
 800587c:	e7bd      	b.n	80057fa <_printf_float+0xee>
 800587e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005882:	d9db      	bls.n	800583c <_printf_float+0x130>
 8005884:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005888:	d118      	bne.n	80058bc <_printf_float+0x1b0>
 800588a:	2900      	cmp	r1, #0
 800588c:	6863      	ldr	r3, [r4, #4]
 800588e:	dd0b      	ble.n	80058a8 <_printf_float+0x19c>
 8005890:	6121      	str	r1, [r4, #16]
 8005892:	b913      	cbnz	r3, 800589a <_printf_float+0x18e>
 8005894:	6822      	ldr	r2, [r4, #0]
 8005896:	07d0      	lsls	r0, r2, #31
 8005898:	d502      	bpl.n	80058a0 <_printf_float+0x194>
 800589a:	3301      	adds	r3, #1
 800589c:	440b      	add	r3, r1
 800589e:	6123      	str	r3, [r4, #16]
 80058a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80058a2:	f04f 0900 	mov.w	r9, #0
 80058a6:	e7db      	b.n	8005860 <_printf_float+0x154>
 80058a8:	b913      	cbnz	r3, 80058b0 <_printf_float+0x1a4>
 80058aa:	6822      	ldr	r2, [r4, #0]
 80058ac:	07d2      	lsls	r2, r2, #31
 80058ae:	d501      	bpl.n	80058b4 <_printf_float+0x1a8>
 80058b0:	3302      	adds	r3, #2
 80058b2:	e7f4      	b.n	800589e <_printf_float+0x192>
 80058b4:	2301      	movs	r3, #1
 80058b6:	e7f2      	b.n	800589e <_printf_float+0x192>
 80058b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80058bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058be:	4299      	cmp	r1, r3
 80058c0:	db05      	blt.n	80058ce <_printf_float+0x1c2>
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	6121      	str	r1, [r4, #16]
 80058c6:	07d8      	lsls	r0, r3, #31
 80058c8:	d5ea      	bpl.n	80058a0 <_printf_float+0x194>
 80058ca:	1c4b      	adds	r3, r1, #1
 80058cc:	e7e7      	b.n	800589e <_printf_float+0x192>
 80058ce:	2900      	cmp	r1, #0
 80058d0:	bfd4      	ite	le
 80058d2:	f1c1 0202 	rsble	r2, r1, #2
 80058d6:	2201      	movgt	r2, #1
 80058d8:	4413      	add	r3, r2
 80058da:	e7e0      	b.n	800589e <_printf_float+0x192>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	055a      	lsls	r2, r3, #21
 80058e0:	d407      	bmi.n	80058f2 <_printf_float+0x1e6>
 80058e2:	6923      	ldr	r3, [r4, #16]
 80058e4:	4642      	mov	r2, r8
 80058e6:	4631      	mov	r1, r6
 80058e8:	4628      	mov	r0, r5
 80058ea:	47b8      	blx	r7
 80058ec:	3001      	adds	r0, #1
 80058ee:	d12b      	bne.n	8005948 <_printf_float+0x23c>
 80058f0:	e767      	b.n	80057c2 <_printf_float+0xb6>
 80058f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80058f6:	f240 80dd 	bls.w	8005ab4 <_printf_float+0x3a8>
 80058fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80058fe:	2200      	movs	r2, #0
 8005900:	2300      	movs	r3, #0
 8005902:	f7fb f901 	bl	8000b08 <__aeabi_dcmpeq>
 8005906:	2800      	cmp	r0, #0
 8005908:	d033      	beq.n	8005972 <_printf_float+0x266>
 800590a:	4a37      	ldr	r2, [pc, #220]	@ (80059e8 <_printf_float+0x2dc>)
 800590c:	2301      	movs	r3, #1
 800590e:	4631      	mov	r1, r6
 8005910:	4628      	mov	r0, r5
 8005912:	47b8      	blx	r7
 8005914:	3001      	adds	r0, #1
 8005916:	f43f af54 	beq.w	80057c2 <_printf_float+0xb6>
 800591a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800591e:	4543      	cmp	r3, r8
 8005920:	db02      	blt.n	8005928 <_printf_float+0x21c>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	07d8      	lsls	r0, r3, #31
 8005926:	d50f      	bpl.n	8005948 <_printf_float+0x23c>
 8005928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800592c:	4631      	mov	r1, r6
 800592e:	4628      	mov	r0, r5
 8005930:	47b8      	blx	r7
 8005932:	3001      	adds	r0, #1
 8005934:	f43f af45 	beq.w	80057c2 <_printf_float+0xb6>
 8005938:	f04f 0900 	mov.w	r9, #0
 800593c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005940:	f104 0a1a 	add.w	sl, r4, #26
 8005944:	45c8      	cmp	r8, r9
 8005946:	dc09      	bgt.n	800595c <_printf_float+0x250>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	079b      	lsls	r3, r3, #30
 800594c:	f100 8103 	bmi.w	8005b56 <_printf_float+0x44a>
 8005950:	68e0      	ldr	r0, [r4, #12]
 8005952:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005954:	4298      	cmp	r0, r3
 8005956:	bfb8      	it	lt
 8005958:	4618      	movlt	r0, r3
 800595a:	e734      	b.n	80057c6 <_printf_float+0xba>
 800595c:	2301      	movs	r3, #1
 800595e:	4652      	mov	r2, sl
 8005960:	4631      	mov	r1, r6
 8005962:	4628      	mov	r0, r5
 8005964:	47b8      	blx	r7
 8005966:	3001      	adds	r0, #1
 8005968:	f43f af2b 	beq.w	80057c2 <_printf_float+0xb6>
 800596c:	f109 0901 	add.w	r9, r9, #1
 8005970:	e7e8      	b.n	8005944 <_printf_float+0x238>
 8005972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005974:	2b00      	cmp	r3, #0
 8005976:	dc39      	bgt.n	80059ec <_printf_float+0x2e0>
 8005978:	4a1b      	ldr	r2, [pc, #108]	@ (80059e8 <_printf_float+0x2dc>)
 800597a:	2301      	movs	r3, #1
 800597c:	4631      	mov	r1, r6
 800597e:	4628      	mov	r0, r5
 8005980:	47b8      	blx	r7
 8005982:	3001      	adds	r0, #1
 8005984:	f43f af1d 	beq.w	80057c2 <_printf_float+0xb6>
 8005988:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800598c:	ea59 0303 	orrs.w	r3, r9, r3
 8005990:	d102      	bne.n	8005998 <_printf_float+0x28c>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	07d9      	lsls	r1, r3, #31
 8005996:	d5d7      	bpl.n	8005948 <_printf_float+0x23c>
 8005998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800599c:	4631      	mov	r1, r6
 800599e:	4628      	mov	r0, r5
 80059a0:	47b8      	blx	r7
 80059a2:	3001      	adds	r0, #1
 80059a4:	f43f af0d 	beq.w	80057c2 <_printf_float+0xb6>
 80059a8:	f04f 0a00 	mov.w	sl, #0
 80059ac:	f104 0b1a 	add.w	fp, r4, #26
 80059b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059b2:	425b      	negs	r3, r3
 80059b4:	4553      	cmp	r3, sl
 80059b6:	dc01      	bgt.n	80059bc <_printf_float+0x2b0>
 80059b8:	464b      	mov	r3, r9
 80059ba:	e793      	b.n	80058e4 <_printf_float+0x1d8>
 80059bc:	2301      	movs	r3, #1
 80059be:	465a      	mov	r2, fp
 80059c0:	4631      	mov	r1, r6
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b8      	blx	r7
 80059c6:	3001      	adds	r0, #1
 80059c8:	f43f aefb 	beq.w	80057c2 <_printf_float+0xb6>
 80059cc:	f10a 0a01 	add.w	sl, sl, #1
 80059d0:	e7ee      	b.n	80059b0 <_printf_float+0x2a4>
 80059d2:	bf00      	nop
 80059d4:	7fefffff 	.word	0x7fefffff
 80059d8:	08008274 	.word	0x08008274
 80059dc:	08008270 	.word	0x08008270
 80059e0:	0800827c 	.word	0x0800827c
 80059e4:	08008278 	.word	0x08008278
 80059e8:	08008280 	.word	0x08008280
 80059ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80059ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80059f2:	4553      	cmp	r3, sl
 80059f4:	bfa8      	it	ge
 80059f6:	4653      	movge	r3, sl
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	4699      	mov	r9, r3
 80059fc:	dc36      	bgt.n	8005a6c <_printf_float+0x360>
 80059fe:	f04f 0b00 	mov.w	fp, #0
 8005a02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a06:	f104 021a 	add.w	r2, r4, #26
 8005a0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a0c:	9306      	str	r3, [sp, #24]
 8005a0e:	eba3 0309 	sub.w	r3, r3, r9
 8005a12:	455b      	cmp	r3, fp
 8005a14:	dc31      	bgt.n	8005a7a <_printf_float+0x36e>
 8005a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a18:	459a      	cmp	sl, r3
 8005a1a:	dc3a      	bgt.n	8005a92 <_printf_float+0x386>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	07da      	lsls	r2, r3, #31
 8005a20:	d437      	bmi.n	8005a92 <_printf_float+0x386>
 8005a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a24:	ebaa 0903 	sub.w	r9, sl, r3
 8005a28:	9b06      	ldr	r3, [sp, #24]
 8005a2a:	ebaa 0303 	sub.w	r3, sl, r3
 8005a2e:	4599      	cmp	r9, r3
 8005a30:	bfa8      	it	ge
 8005a32:	4699      	movge	r9, r3
 8005a34:	f1b9 0f00 	cmp.w	r9, #0
 8005a38:	dc33      	bgt.n	8005aa2 <_printf_float+0x396>
 8005a3a:	f04f 0800 	mov.w	r8, #0
 8005a3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a42:	f104 0b1a 	add.w	fp, r4, #26
 8005a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a48:	ebaa 0303 	sub.w	r3, sl, r3
 8005a4c:	eba3 0309 	sub.w	r3, r3, r9
 8005a50:	4543      	cmp	r3, r8
 8005a52:	f77f af79 	ble.w	8005948 <_printf_float+0x23c>
 8005a56:	2301      	movs	r3, #1
 8005a58:	465a      	mov	r2, fp
 8005a5a:	4631      	mov	r1, r6
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	47b8      	blx	r7
 8005a60:	3001      	adds	r0, #1
 8005a62:	f43f aeae 	beq.w	80057c2 <_printf_float+0xb6>
 8005a66:	f108 0801 	add.w	r8, r8, #1
 8005a6a:	e7ec      	b.n	8005a46 <_printf_float+0x33a>
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	4631      	mov	r1, r6
 8005a70:	4628      	mov	r0, r5
 8005a72:	47b8      	blx	r7
 8005a74:	3001      	adds	r0, #1
 8005a76:	d1c2      	bne.n	80059fe <_printf_float+0x2f2>
 8005a78:	e6a3      	b.n	80057c2 <_printf_float+0xb6>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	4628      	mov	r0, r5
 8005a80:	9206      	str	r2, [sp, #24]
 8005a82:	47b8      	blx	r7
 8005a84:	3001      	adds	r0, #1
 8005a86:	f43f ae9c 	beq.w	80057c2 <_printf_float+0xb6>
 8005a8a:	9a06      	ldr	r2, [sp, #24]
 8005a8c:	f10b 0b01 	add.w	fp, fp, #1
 8005a90:	e7bb      	b.n	8005a0a <_printf_float+0x2fe>
 8005a92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a96:	4631      	mov	r1, r6
 8005a98:	4628      	mov	r0, r5
 8005a9a:	47b8      	blx	r7
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d1c0      	bne.n	8005a22 <_printf_float+0x316>
 8005aa0:	e68f      	b.n	80057c2 <_printf_float+0xb6>
 8005aa2:	9a06      	ldr	r2, [sp, #24]
 8005aa4:	464b      	mov	r3, r9
 8005aa6:	4442      	add	r2, r8
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	4628      	mov	r0, r5
 8005aac:	47b8      	blx	r7
 8005aae:	3001      	adds	r0, #1
 8005ab0:	d1c3      	bne.n	8005a3a <_printf_float+0x32e>
 8005ab2:	e686      	b.n	80057c2 <_printf_float+0xb6>
 8005ab4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ab8:	f1ba 0f01 	cmp.w	sl, #1
 8005abc:	dc01      	bgt.n	8005ac2 <_printf_float+0x3b6>
 8005abe:	07db      	lsls	r3, r3, #31
 8005ac0:	d536      	bpl.n	8005b30 <_printf_float+0x424>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4628      	mov	r0, r5
 8005aca:	47b8      	blx	r7
 8005acc:	3001      	adds	r0, #1
 8005ace:	f43f ae78 	beq.w	80057c2 <_printf_float+0xb6>
 8005ad2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	4628      	mov	r0, r5
 8005ada:	47b8      	blx	r7
 8005adc:	3001      	adds	r0, #1
 8005ade:	f43f ae70 	beq.w	80057c2 <_printf_float+0xb6>
 8005ae2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005aee:	f7fb f80b 	bl	8000b08 <__aeabi_dcmpeq>
 8005af2:	b9c0      	cbnz	r0, 8005b26 <_printf_float+0x41a>
 8005af4:	4653      	mov	r3, sl
 8005af6:	f108 0201 	add.w	r2, r8, #1
 8005afa:	4631      	mov	r1, r6
 8005afc:	4628      	mov	r0, r5
 8005afe:	47b8      	blx	r7
 8005b00:	3001      	adds	r0, #1
 8005b02:	d10c      	bne.n	8005b1e <_printf_float+0x412>
 8005b04:	e65d      	b.n	80057c2 <_printf_float+0xb6>
 8005b06:	2301      	movs	r3, #1
 8005b08:	465a      	mov	r2, fp
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	47b8      	blx	r7
 8005b10:	3001      	adds	r0, #1
 8005b12:	f43f ae56 	beq.w	80057c2 <_printf_float+0xb6>
 8005b16:	f108 0801 	add.w	r8, r8, #1
 8005b1a:	45d0      	cmp	r8, sl
 8005b1c:	dbf3      	blt.n	8005b06 <_printf_float+0x3fa>
 8005b1e:	464b      	mov	r3, r9
 8005b20:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005b24:	e6df      	b.n	80058e6 <_printf_float+0x1da>
 8005b26:	f04f 0800 	mov.w	r8, #0
 8005b2a:	f104 0b1a 	add.w	fp, r4, #26
 8005b2e:	e7f4      	b.n	8005b1a <_printf_float+0x40e>
 8005b30:	2301      	movs	r3, #1
 8005b32:	4642      	mov	r2, r8
 8005b34:	e7e1      	b.n	8005afa <_printf_float+0x3ee>
 8005b36:	2301      	movs	r3, #1
 8005b38:	464a      	mov	r2, r9
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	47b8      	blx	r7
 8005b40:	3001      	adds	r0, #1
 8005b42:	f43f ae3e 	beq.w	80057c2 <_printf_float+0xb6>
 8005b46:	f108 0801 	add.w	r8, r8, #1
 8005b4a:	68e3      	ldr	r3, [r4, #12]
 8005b4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b4e:	1a5b      	subs	r3, r3, r1
 8005b50:	4543      	cmp	r3, r8
 8005b52:	dcf0      	bgt.n	8005b36 <_printf_float+0x42a>
 8005b54:	e6fc      	b.n	8005950 <_printf_float+0x244>
 8005b56:	f04f 0800 	mov.w	r8, #0
 8005b5a:	f104 0919 	add.w	r9, r4, #25
 8005b5e:	e7f4      	b.n	8005b4a <_printf_float+0x43e>

08005b60 <_printf_common>:
 8005b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b64:	4616      	mov	r6, r2
 8005b66:	4698      	mov	r8, r3
 8005b68:	688a      	ldr	r2, [r1, #8]
 8005b6a:	690b      	ldr	r3, [r1, #16]
 8005b6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b70:	4293      	cmp	r3, r2
 8005b72:	bfb8      	it	lt
 8005b74:	4613      	movlt	r3, r2
 8005b76:	6033      	str	r3, [r6, #0]
 8005b78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b7c:	4607      	mov	r7, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	b10a      	cbz	r2, 8005b86 <_printf_common+0x26>
 8005b82:	3301      	adds	r3, #1
 8005b84:	6033      	str	r3, [r6, #0]
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	0699      	lsls	r1, r3, #26
 8005b8a:	bf42      	ittt	mi
 8005b8c:	6833      	ldrmi	r3, [r6, #0]
 8005b8e:	3302      	addmi	r3, #2
 8005b90:	6033      	strmi	r3, [r6, #0]
 8005b92:	6825      	ldr	r5, [r4, #0]
 8005b94:	f015 0506 	ands.w	r5, r5, #6
 8005b98:	d106      	bne.n	8005ba8 <_printf_common+0x48>
 8005b9a:	f104 0a19 	add.w	sl, r4, #25
 8005b9e:	68e3      	ldr	r3, [r4, #12]
 8005ba0:	6832      	ldr	r2, [r6, #0]
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	42ab      	cmp	r3, r5
 8005ba6:	dc26      	bgt.n	8005bf6 <_printf_common+0x96>
 8005ba8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005bac:	6822      	ldr	r2, [r4, #0]
 8005bae:	3b00      	subs	r3, #0
 8005bb0:	bf18      	it	ne
 8005bb2:	2301      	movne	r3, #1
 8005bb4:	0692      	lsls	r2, r2, #26
 8005bb6:	d42b      	bmi.n	8005c10 <_printf_common+0xb0>
 8005bb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005bbc:	4641      	mov	r1, r8
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	47c8      	blx	r9
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d01e      	beq.n	8005c04 <_printf_common+0xa4>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	6922      	ldr	r2, [r4, #16]
 8005bca:	f003 0306 	and.w	r3, r3, #6
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	bf02      	ittt	eq
 8005bd2:	68e5      	ldreq	r5, [r4, #12]
 8005bd4:	6833      	ldreq	r3, [r6, #0]
 8005bd6:	1aed      	subeq	r5, r5, r3
 8005bd8:	68a3      	ldr	r3, [r4, #8]
 8005bda:	bf0c      	ite	eq
 8005bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005be0:	2500      	movne	r5, #0
 8005be2:	4293      	cmp	r3, r2
 8005be4:	bfc4      	itt	gt
 8005be6:	1a9b      	subgt	r3, r3, r2
 8005be8:	18ed      	addgt	r5, r5, r3
 8005bea:	2600      	movs	r6, #0
 8005bec:	341a      	adds	r4, #26
 8005bee:	42b5      	cmp	r5, r6
 8005bf0:	d11a      	bne.n	8005c28 <_printf_common+0xc8>
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	e008      	b.n	8005c08 <_printf_common+0xa8>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	4652      	mov	r2, sl
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	4638      	mov	r0, r7
 8005bfe:	47c8      	blx	r9
 8005c00:	3001      	adds	r0, #1
 8005c02:	d103      	bne.n	8005c0c <_printf_common+0xac>
 8005c04:	f04f 30ff 	mov.w	r0, #4294967295
 8005c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c0c:	3501      	adds	r5, #1
 8005c0e:	e7c6      	b.n	8005b9e <_printf_common+0x3e>
 8005c10:	18e1      	adds	r1, r4, r3
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	2030      	movs	r0, #48	@ 0x30
 8005c16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c1a:	4422      	add	r2, r4
 8005c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c24:	3302      	adds	r3, #2
 8005c26:	e7c7      	b.n	8005bb8 <_printf_common+0x58>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	4622      	mov	r2, r4
 8005c2c:	4641      	mov	r1, r8
 8005c2e:	4638      	mov	r0, r7
 8005c30:	47c8      	blx	r9
 8005c32:	3001      	adds	r0, #1
 8005c34:	d0e6      	beq.n	8005c04 <_printf_common+0xa4>
 8005c36:	3601      	adds	r6, #1
 8005c38:	e7d9      	b.n	8005bee <_printf_common+0x8e>
	...

08005c3c <_printf_i>:
 8005c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c40:	7e0f      	ldrb	r7, [r1, #24]
 8005c42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c44:	2f78      	cmp	r7, #120	@ 0x78
 8005c46:	4691      	mov	r9, r2
 8005c48:	4680      	mov	r8, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	469a      	mov	sl, r3
 8005c4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c52:	d807      	bhi.n	8005c64 <_printf_i+0x28>
 8005c54:	2f62      	cmp	r7, #98	@ 0x62
 8005c56:	d80a      	bhi.n	8005c6e <_printf_i+0x32>
 8005c58:	2f00      	cmp	r7, #0
 8005c5a:	f000 80d1 	beq.w	8005e00 <_printf_i+0x1c4>
 8005c5e:	2f58      	cmp	r7, #88	@ 0x58
 8005c60:	f000 80b8 	beq.w	8005dd4 <_printf_i+0x198>
 8005c64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c6c:	e03a      	b.n	8005ce4 <_printf_i+0xa8>
 8005c6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c72:	2b15      	cmp	r3, #21
 8005c74:	d8f6      	bhi.n	8005c64 <_printf_i+0x28>
 8005c76:	a101      	add	r1, pc, #4	@ (adr r1, 8005c7c <_printf_i+0x40>)
 8005c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c7c:	08005cd5 	.word	0x08005cd5
 8005c80:	08005ce9 	.word	0x08005ce9
 8005c84:	08005c65 	.word	0x08005c65
 8005c88:	08005c65 	.word	0x08005c65
 8005c8c:	08005c65 	.word	0x08005c65
 8005c90:	08005c65 	.word	0x08005c65
 8005c94:	08005ce9 	.word	0x08005ce9
 8005c98:	08005c65 	.word	0x08005c65
 8005c9c:	08005c65 	.word	0x08005c65
 8005ca0:	08005c65 	.word	0x08005c65
 8005ca4:	08005c65 	.word	0x08005c65
 8005ca8:	08005de7 	.word	0x08005de7
 8005cac:	08005d13 	.word	0x08005d13
 8005cb0:	08005da1 	.word	0x08005da1
 8005cb4:	08005c65 	.word	0x08005c65
 8005cb8:	08005c65 	.word	0x08005c65
 8005cbc:	08005e09 	.word	0x08005e09
 8005cc0:	08005c65 	.word	0x08005c65
 8005cc4:	08005d13 	.word	0x08005d13
 8005cc8:	08005c65 	.word	0x08005c65
 8005ccc:	08005c65 	.word	0x08005c65
 8005cd0:	08005da9 	.word	0x08005da9
 8005cd4:	6833      	ldr	r3, [r6, #0]
 8005cd6:	1d1a      	adds	r2, r3, #4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6032      	str	r2, [r6, #0]
 8005cdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ce0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e09c      	b.n	8005e22 <_printf_i+0x1e6>
 8005ce8:	6833      	ldr	r3, [r6, #0]
 8005cea:	6820      	ldr	r0, [r4, #0]
 8005cec:	1d19      	adds	r1, r3, #4
 8005cee:	6031      	str	r1, [r6, #0]
 8005cf0:	0606      	lsls	r6, r0, #24
 8005cf2:	d501      	bpl.n	8005cf8 <_printf_i+0xbc>
 8005cf4:	681d      	ldr	r5, [r3, #0]
 8005cf6:	e003      	b.n	8005d00 <_printf_i+0xc4>
 8005cf8:	0645      	lsls	r5, r0, #25
 8005cfa:	d5fb      	bpl.n	8005cf4 <_printf_i+0xb8>
 8005cfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d00:	2d00      	cmp	r5, #0
 8005d02:	da03      	bge.n	8005d0c <_printf_i+0xd0>
 8005d04:	232d      	movs	r3, #45	@ 0x2d
 8005d06:	426d      	negs	r5, r5
 8005d08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d0c:	4858      	ldr	r0, [pc, #352]	@ (8005e70 <_printf_i+0x234>)
 8005d0e:	230a      	movs	r3, #10
 8005d10:	e011      	b.n	8005d36 <_printf_i+0xfa>
 8005d12:	6821      	ldr	r1, [r4, #0]
 8005d14:	6833      	ldr	r3, [r6, #0]
 8005d16:	0608      	lsls	r0, r1, #24
 8005d18:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d1c:	d402      	bmi.n	8005d24 <_printf_i+0xe8>
 8005d1e:	0649      	lsls	r1, r1, #25
 8005d20:	bf48      	it	mi
 8005d22:	b2ad      	uxthmi	r5, r5
 8005d24:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d26:	4852      	ldr	r0, [pc, #328]	@ (8005e70 <_printf_i+0x234>)
 8005d28:	6033      	str	r3, [r6, #0]
 8005d2a:	bf14      	ite	ne
 8005d2c:	230a      	movne	r3, #10
 8005d2e:	2308      	moveq	r3, #8
 8005d30:	2100      	movs	r1, #0
 8005d32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d36:	6866      	ldr	r6, [r4, #4]
 8005d38:	60a6      	str	r6, [r4, #8]
 8005d3a:	2e00      	cmp	r6, #0
 8005d3c:	db05      	blt.n	8005d4a <_printf_i+0x10e>
 8005d3e:	6821      	ldr	r1, [r4, #0]
 8005d40:	432e      	orrs	r6, r5
 8005d42:	f021 0104 	bic.w	r1, r1, #4
 8005d46:	6021      	str	r1, [r4, #0]
 8005d48:	d04b      	beq.n	8005de2 <_printf_i+0x1a6>
 8005d4a:	4616      	mov	r6, r2
 8005d4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d50:	fb03 5711 	mls	r7, r3, r1, r5
 8005d54:	5dc7      	ldrb	r7, [r0, r7]
 8005d56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d5a:	462f      	mov	r7, r5
 8005d5c:	42bb      	cmp	r3, r7
 8005d5e:	460d      	mov	r5, r1
 8005d60:	d9f4      	bls.n	8005d4c <_printf_i+0x110>
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d10b      	bne.n	8005d7e <_printf_i+0x142>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	07df      	lsls	r7, r3, #31
 8005d6a:	d508      	bpl.n	8005d7e <_printf_i+0x142>
 8005d6c:	6923      	ldr	r3, [r4, #16]
 8005d6e:	6861      	ldr	r1, [r4, #4]
 8005d70:	4299      	cmp	r1, r3
 8005d72:	bfde      	ittt	le
 8005d74:	2330      	movle	r3, #48	@ 0x30
 8005d76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d7e:	1b92      	subs	r2, r2, r6
 8005d80:	6122      	str	r2, [r4, #16]
 8005d82:	f8cd a000 	str.w	sl, [sp]
 8005d86:	464b      	mov	r3, r9
 8005d88:	aa03      	add	r2, sp, #12
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	4640      	mov	r0, r8
 8005d8e:	f7ff fee7 	bl	8005b60 <_printf_common>
 8005d92:	3001      	adds	r0, #1
 8005d94:	d14a      	bne.n	8005e2c <_printf_i+0x1f0>
 8005d96:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9a:	b004      	add	sp, #16
 8005d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	f043 0320 	orr.w	r3, r3, #32
 8005da6:	6023      	str	r3, [r4, #0]
 8005da8:	4832      	ldr	r0, [pc, #200]	@ (8005e74 <_printf_i+0x238>)
 8005daa:	2778      	movs	r7, #120	@ 0x78
 8005dac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	6831      	ldr	r1, [r6, #0]
 8005db4:	061f      	lsls	r7, r3, #24
 8005db6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005dba:	d402      	bmi.n	8005dc2 <_printf_i+0x186>
 8005dbc:	065f      	lsls	r7, r3, #25
 8005dbe:	bf48      	it	mi
 8005dc0:	b2ad      	uxthmi	r5, r5
 8005dc2:	6031      	str	r1, [r6, #0]
 8005dc4:	07d9      	lsls	r1, r3, #31
 8005dc6:	bf44      	itt	mi
 8005dc8:	f043 0320 	orrmi.w	r3, r3, #32
 8005dcc:	6023      	strmi	r3, [r4, #0]
 8005dce:	b11d      	cbz	r5, 8005dd8 <_printf_i+0x19c>
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	e7ad      	b.n	8005d30 <_printf_i+0xf4>
 8005dd4:	4826      	ldr	r0, [pc, #152]	@ (8005e70 <_printf_i+0x234>)
 8005dd6:	e7e9      	b.n	8005dac <_printf_i+0x170>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	f023 0320 	bic.w	r3, r3, #32
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	e7f6      	b.n	8005dd0 <_printf_i+0x194>
 8005de2:	4616      	mov	r6, r2
 8005de4:	e7bd      	b.n	8005d62 <_printf_i+0x126>
 8005de6:	6833      	ldr	r3, [r6, #0]
 8005de8:	6825      	ldr	r5, [r4, #0]
 8005dea:	6961      	ldr	r1, [r4, #20]
 8005dec:	1d18      	adds	r0, r3, #4
 8005dee:	6030      	str	r0, [r6, #0]
 8005df0:	062e      	lsls	r6, r5, #24
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	d501      	bpl.n	8005dfa <_printf_i+0x1be>
 8005df6:	6019      	str	r1, [r3, #0]
 8005df8:	e002      	b.n	8005e00 <_printf_i+0x1c4>
 8005dfa:	0668      	lsls	r0, r5, #25
 8005dfc:	d5fb      	bpl.n	8005df6 <_printf_i+0x1ba>
 8005dfe:	8019      	strh	r1, [r3, #0]
 8005e00:	2300      	movs	r3, #0
 8005e02:	6123      	str	r3, [r4, #16]
 8005e04:	4616      	mov	r6, r2
 8005e06:	e7bc      	b.n	8005d82 <_printf_i+0x146>
 8005e08:	6833      	ldr	r3, [r6, #0]
 8005e0a:	1d1a      	adds	r2, r3, #4
 8005e0c:	6032      	str	r2, [r6, #0]
 8005e0e:	681e      	ldr	r6, [r3, #0]
 8005e10:	6862      	ldr	r2, [r4, #4]
 8005e12:	2100      	movs	r1, #0
 8005e14:	4630      	mov	r0, r6
 8005e16:	f7fa f9fb 	bl	8000210 <memchr>
 8005e1a:	b108      	cbz	r0, 8005e20 <_printf_i+0x1e4>
 8005e1c:	1b80      	subs	r0, r0, r6
 8005e1e:	6060      	str	r0, [r4, #4]
 8005e20:	6863      	ldr	r3, [r4, #4]
 8005e22:	6123      	str	r3, [r4, #16]
 8005e24:	2300      	movs	r3, #0
 8005e26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e2a:	e7aa      	b.n	8005d82 <_printf_i+0x146>
 8005e2c:	6923      	ldr	r3, [r4, #16]
 8005e2e:	4632      	mov	r2, r6
 8005e30:	4649      	mov	r1, r9
 8005e32:	4640      	mov	r0, r8
 8005e34:	47d0      	blx	sl
 8005e36:	3001      	adds	r0, #1
 8005e38:	d0ad      	beq.n	8005d96 <_printf_i+0x15a>
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	079b      	lsls	r3, r3, #30
 8005e3e:	d413      	bmi.n	8005e68 <_printf_i+0x22c>
 8005e40:	68e0      	ldr	r0, [r4, #12]
 8005e42:	9b03      	ldr	r3, [sp, #12]
 8005e44:	4298      	cmp	r0, r3
 8005e46:	bfb8      	it	lt
 8005e48:	4618      	movlt	r0, r3
 8005e4a:	e7a6      	b.n	8005d9a <_printf_i+0x15e>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	4632      	mov	r2, r6
 8005e50:	4649      	mov	r1, r9
 8005e52:	4640      	mov	r0, r8
 8005e54:	47d0      	blx	sl
 8005e56:	3001      	adds	r0, #1
 8005e58:	d09d      	beq.n	8005d96 <_printf_i+0x15a>
 8005e5a:	3501      	adds	r5, #1
 8005e5c:	68e3      	ldr	r3, [r4, #12]
 8005e5e:	9903      	ldr	r1, [sp, #12]
 8005e60:	1a5b      	subs	r3, r3, r1
 8005e62:	42ab      	cmp	r3, r5
 8005e64:	dcf2      	bgt.n	8005e4c <_printf_i+0x210>
 8005e66:	e7eb      	b.n	8005e40 <_printf_i+0x204>
 8005e68:	2500      	movs	r5, #0
 8005e6a:	f104 0619 	add.w	r6, r4, #25
 8005e6e:	e7f5      	b.n	8005e5c <_printf_i+0x220>
 8005e70:	08008282 	.word	0x08008282
 8005e74:	08008293 	.word	0x08008293

08005e78 <std>:
 8005e78:	2300      	movs	r3, #0
 8005e7a:	b510      	push	{r4, lr}
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e86:	6083      	str	r3, [r0, #8]
 8005e88:	8181      	strh	r1, [r0, #12]
 8005e8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e8c:	81c2      	strh	r2, [r0, #14]
 8005e8e:	6183      	str	r3, [r0, #24]
 8005e90:	4619      	mov	r1, r3
 8005e92:	2208      	movs	r2, #8
 8005e94:	305c      	adds	r0, #92	@ 0x5c
 8005e96:	f000 f9f9 	bl	800628c <memset>
 8005e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed0 <std+0x58>)
 8005e9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed4 <std+0x5c>)
 8005ea0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed8 <std+0x60>)
 8005ea4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8005edc <std+0x64>)
 8005ea8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee0 <std+0x68>)
 8005eac:	6224      	str	r4, [r4, #32]
 8005eae:	429c      	cmp	r4, r3
 8005eb0:	d006      	beq.n	8005ec0 <std+0x48>
 8005eb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005eb6:	4294      	cmp	r4, r2
 8005eb8:	d002      	beq.n	8005ec0 <std+0x48>
 8005eba:	33d0      	adds	r3, #208	@ 0xd0
 8005ebc:	429c      	cmp	r4, r3
 8005ebe:	d105      	bne.n	8005ecc <std+0x54>
 8005ec0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ec8:	f000 ba5c 	b.w	8006384 <__retarget_lock_init_recursive>
 8005ecc:	bd10      	pop	{r4, pc}
 8005ece:	bf00      	nop
 8005ed0:	080060dd 	.word	0x080060dd
 8005ed4:	080060ff 	.word	0x080060ff
 8005ed8:	08006137 	.word	0x08006137
 8005edc:	0800615b 	.word	0x0800615b
 8005ee0:	20000308 	.word	0x20000308

08005ee4 <stdio_exit_handler>:
 8005ee4:	4a02      	ldr	r2, [pc, #8]	@ (8005ef0 <stdio_exit_handler+0xc>)
 8005ee6:	4903      	ldr	r1, [pc, #12]	@ (8005ef4 <stdio_exit_handler+0x10>)
 8005ee8:	4803      	ldr	r0, [pc, #12]	@ (8005ef8 <stdio_exit_handler+0x14>)
 8005eea:	f000 b869 	b.w	8005fc0 <_fwalk_sglue>
 8005eee:	bf00      	nop
 8005ef0:	2000000c 	.word	0x2000000c
 8005ef4:	08007cd9 	.word	0x08007cd9
 8005ef8:	2000001c 	.word	0x2000001c

08005efc <cleanup_stdio>:
 8005efc:	6841      	ldr	r1, [r0, #4]
 8005efe:	4b0c      	ldr	r3, [pc, #48]	@ (8005f30 <cleanup_stdio+0x34>)
 8005f00:	4299      	cmp	r1, r3
 8005f02:	b510      	push	{r4, lr}
 8005f04:	4604      	mov	r4, r0
 8005f06:	d001      	beq.n	8005f0c <cleanup_stdio+0x10>
 8005f08:	f001 fee6 	bl	8007cd8 <_fflush_r>
 8005f0c:	68a1      	ldr	r1, [r4, #8]
 8005f0e:	4b09      	ldr	r3, [pc, #36]	@ (8005f34 <cleanup_stdio+0x38>)
 8005f10:	4299      	cmp	r1, r3
 8005f12:	d002      	beq.n	8005f1a <cleanup_stdio+0x1e>
 8005f14:	4620      	mov	r0, r4
 8005f16:	f001 fedf 	bl	8007cd8 <_fflush_r>
 8005f1a:	68e1      	ldr	r1, [r4, #12]
 8005f1c:	4b06      	ldr	r3, [pc, #24]	@ (8005f38 <cleanup_stdio+0x3c>)
 8005f1e:	4299      	cmp	r1, r3
 8005f20:	d004      	beq.n	8005f2c <cleanup_stdio+0x30>
 8005f22:	4620      	mov	r0, r4
 8005f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f28:	f001 bed6 	b.w	8007cd8 <_fflush_r>
 8005f2c:	bd10      	pop	{r4, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000308 	.word	0x20000308
 8005f34:	20000370 	.word	0x20000370
 8005f38:	200003d8 	.word	0x200003d8

08005f3c <global_stdio_init.part.0>:
 8005f3c:	b510      	push	{r4, lr}
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f6c <global_stdio_init.part.0+0x30>)
 8005f40:	4c0b      	ldr	r4, [pc, #44]	@ (8005f70 <global_stdio_init.part.0+0x34>)
 8005f42:	4a0c      	ldr	r2, [pc, #48]	@ (8005f74 <global_stdio_init.part.0+0x38>)
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	4620      	mov	r0, r4
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2104      	movs	r1, #4
 8005f4c:	f7ff ff94 	bl	8005e78 <std>
 8005f50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f54:	2201      	movs	r2, #1
 8005f56:	2109      	movs	r1, #9
 8005f58:	f7ff ff8e 	bl	8005e78 <std>
 8005f5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f60:	2202      	movs	r2, #2
 8005f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f66:	2112      	movs	r1, #18
 8005f68:	f7ff bf86 	b.w	8005e78 <std>
 8005f6c:	20000440 	.word	0x20000440
 8005f70:	20000308 	.word	0x20000308
 8005f74:	08005ee5 	.word	0x08005ee5

08005f78 <__sfp_lock_acquire>:
 8005f78:	4801      	ldr	r0, [pc, #4]	@ (8005f80 <__sfp_lock_acquire+0x8>)
 8005f7a:	f000 ba04 	b.w	8006386 <__retarget_lock_acquire_recursive>
 8005f7e:	bf00      	nop
 8005f80:	20000449 	.word	0x20000449

08005f84 <__sfp_lock_release>:
 8005f84:	4801      	ldr	r0, [pc, #4]	@ (8005f8c <__sfp_lock_release+0x8>)
 8005f86:	f000 b9ff 	b.w	8006388 <__retarget_lock_release_recursive>
 8005f8a:	bf00      	nop
 8005f8c:	20000449 	.word	0x20000449

08005f90 <__sinit>:
 8005f90:	b510      	push	{r4, lr}
 8005f92:	4604      	mov	r4, r0
 8005f94:	f7ff fff0 	bl	8005f78 <__sfp_lock_acquire>
 8005f98:	6a23      	ldr	r3, [r4, #32]
 8005f9a:	b11b      	cbz	r3, 8005fa4 <__sinit+0x14>
 8005f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fa0:	f7ff bff0 	b.w	8005f84 <__sfp_lock_release>
 8005fa4:	4b04      	ldr	r3, [pc, #16]	@ (8005fb8 <__sinit+0x28>)
 8005fa6:	6223      	str	r3, [r4, #32]
 8005fa8:	4b04      	ldr	r3, [pc, #16]	@ (8005fbc <__sinit+0x2c>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1f5      	bne.n	8005f9c <__sinit+0xc>
 8005fb0:	f7ff ffc4 	bl	8005f3c <global_stdio_init.part.0>
 8005fb4:	e7f2      	b.n	8005f9c <__sinit+0xc>
 8005fb6:	bf00      	nop
 8005fb8:	08005efd 	.word	0x08005efd
 8005fbc:	20000440 	.word	0x20000440

08005fc0 <_fwalk_sglue>:
 8005fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fc4:	4607      	mov	r7, r0
 8005fc6:	4688      	mov	r8, r1
 8005fc8:	4614      	mov	r4, r2
 8005fca:	2600      	movs	r6, #0
 8005fcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fd0:	f1b9 0901 	subs.w	r9, r9, #1
 8005fd4:	d505      	bpl.n	8005fe2 <_fwalk_sglue+0x22>
 8005fd6:	6824      	ldr	r4, [r4, #0]
 8005fd8:	2c00      	cmp	r4, #0
 8005fda:	d1f7      	bne.n	8005fcc <_fwalk_sglue+0xc>
 8005fdc:	4630      	mov	r0, r6
 8005fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fe2:	89ab      	ldrh	r3, [r5, #12]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d907      	bls.n	8005ff8 <_fwalk_sglue+0x38>
 8005fe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fec:	3301      	adds	r3, #1
 8005fee:	d003      	beq.n	8005ff8 <_fwalk_sglue+0x38>
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	47c0      	blx	r8
 8005ff6:	4306      	orrs	r6, r0
 8005ff8:	3568      	adds	r5, #104	@ 0x68
 8005ffa:	e7e9      	b.n	8005fd0 <_fwalk_sglue+0x10>

08005ffc <iprintf>:
 8005ffc:	b40f      	push	{r0, r1, r2, r3}
 8005ffe:	b507      	push	{r0, r1, r2, lr}
 8006000:	4906      	ldr	r1, [pc, #24]	@ (800601c <iprintf+0x20>)
 8006002:	ab04      	add	r3, sp, #16
 8006004:	6808      	ldr	r0, [r1, #0]
 8006006:	f853 2b04 	ldr.w	r2, [r3], #4
 800600a:	6881      	ldr	r1, [r0, #8]
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	f001 fcc7 	bl	80079a0 <_vfiprintf_r>
 8006012:	b003      	add	sp, #12
 8006014:	f85d eb04 	ldr.w	lr, [sp], #4
 8006018:	b004      	add	sp, #16
 800601a:	4770      	bx	lr
 800601c:	20000018 	.word	0x20000018

08006020 <_puts_r>:
 8006020:	6a03      	ldr	r3, [r0, #32]
 8006022:	b570      	push	{r4, r5, r6, lr}
 8006024:	6884      	ldr	r4, [r0, #8]
 8006026:	4605      	mov	r5, r0
 8006028:	460e      	mov	r6, r1
 800602a:	b90b      	cbnz	r3, 8006030 <_puts_r+0x10>
 800602c:	f7ff ffb0 	bl	8005f90 <__sinit>
 8006030:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006032:	07db      	lsls	r3, r3, #31
 8006034:	d405      	bmi.n	8006042 <_puts_r+0x22>
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	0598      	lsls	r0, r3, #22
 800603a:	d402      	bmi.n	8006042 <_puts_r+0x22>
 800603c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800603e:	f000 f9a2 	bl	8006386 <__retarget_lock_acquire_recursive>
 8006042:	89a3      	ldrh	r3, [r4, #12]
 8006044:	0719      	lsls	r1, r3, #28
 8006046:	d502      	bpl.n	800604e <_puts_r+0x2e>
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d135      	bne.n	80060ba <_puts_r+0x9a>
 800604e:	4621      	mov	r1, r4
 8006050:	4628      	mov	r0, r5
 8006052:	f000 f8c5 	bl	80061e0 <__swsetup_r>
 8006056:	b380      	cbz	r0, 80060ba <_puts_r+0x9a>
 8006058:	f04f 35ff 	mov.w	r5, #4294967295
 800605c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800605e:	07da      	lsls	r2, r3, #31
 8006060:	d405      	bmi.n	800606e <_puts_r+0x4e>
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	059b      	lsls	r3, r3, #22
 8006066:	d402      	bmi.n	800606e <_puts_r+0x4e>
 8006068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800606a:	f000 f98d 	bl	8006388 <__retarget_lock_release_recursive>
 800606e:	4628      	mov	r0, r5
 8006070:	bd70      	pop	{r4, r5, r6, pc}
 8006072:	2b00      	cmp	r3, #0
 8006074:	da04      	bge.n	8006080 <_puts_r+0x60>
 8006076:	69a2      	ldr	r2, [r4, #24]
 8006078:	429a      	cmp	r2, r3
 800607a:	dc17      	bgt.n	80060ac <_puts_r+0x8c>
 800607c:	290a      	cmp	r1, #10
 800607e:	d015      	beq.n	80060ac <_puts_r+0x8c>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	6022      	str	r2, [r4, #0]
 8006086:	7019      	strb	r1, [r3, #0]
 8006088:	68a3      	ldr	r3, [r4, #8]
 800608a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800608e:	3b01      	subs	r3, #1
 8006090:	60a3      	str	r3, [r4, #8]
 8006092:	2900      	cmp	r1, #0
 8006094:	d1ed      	bne.n	8006072 <_puts_r+0x52>
 8006096:	2b00      	cmp	r3, #0
 8006098:	da11      	bge.n	80060be <_puts_r+0x9e>
 800609a:	4622      	mov	r2, r4
 800609c:	210a      	movs	r1, #10
 800609e:	4628      	mov	r0, r5
 80060a0:	f000 f85f 	bl	8006162 <__swbuf_r>
 80060a4:	3001      	adds	r0, #1
 80060a6:	d0d7      	beq.n	8006058 <_puts_r+0x38>
 80060a8:	250a      	movs	r5, #10
 80060aa:	e7d7      	b.n	800605c <_puts_r+0x3c>
 80060ac:	4622      	mov	r2, r4
 80060ae:	4628      	mov	r0, r5
 80060b0:	f000 f857 	bl	8006162 <__swbuf_r>
 80060b4:	3001      	adds	r0, #1
 80060b6:	d1e7      	bne.n	8006088 <_puts_r+0x68>
 80060b8:	e7ce      	b.n	8006058 <_puts_r+0x38>
 80060ba:	3e01      	subs	r6, #1
 80060bc:	e7e4      	b.n	8006088 <_puts_r+0x68>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	6022      	str	r2, [r4, #0]
 80060c4:	220a      	movs	r2, #10
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	e7ee      	b.n	80060a8 <_puts_r+0x88>
	...

080060cc <puts>:
 80060cc:	4b02      	ldr	r3, [pc, #8]	@ (80060d8 <puts+0xc>)
 80060ce:	4601      	mov	r1, r0
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	f7ff bfa5 	b.w	8006020 <_puts_r>
 80060d6:	bf00      	nop
 80060d8:	20000018 	.word	0x20000018

080060dc <__sread>:
 80060dc:	b510      	push	{r4, lr}
 80060de:	460c      	mov	r4, r1
 80060e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e4:	f000 f900 	bl	80062e8 <_read_r>
 80060e8:	2800      	cmp	r0, #0
 80060ea:	bfab      	itete	ge
 80060ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060ee:	89a3      	ldrhlt	r3, [r4, #12]
 80060f0:	181b      	addge	r3, r3, r0
 80060f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80060f6:	bfac      	ite	ge
 80060f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80060fa:	81a3      	strhlt	r3, [r4, #12]
 80060fc:	bd10      	pop	{r4, pc}

080060fe <__swrite>:
 80060fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006102:	461f      	mov	r7, r3
 8006104:	898b      	ldrh	r3, [r1, #12]
 8006106:	05db      	lsls	r3, r3, #23
 8006108:	4605      	mov	r5, r0
 800610a:	460c      	mov	r4, r1
 800610c:	4616      	mov	r6, r2
 800610e:	d505      	bpl.n	800611c <__swrite+0x1e>
 8006110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006114:	2302      	movs	r3, #2
 8006116:	2200      	movs	r2, #0
 8006118:	f000 f8d4 	bl	80062c4 <_lseek_r>
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006122:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006126:	81a3      	strh	r3, [r4, #12]
 8006128:	4632      	mov	r2, r6
 800612a:	463b      	mov	r3, r7
 800612c:	4628      	mov	r0, r5
 800612e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006132:	f000 b8eb 	b.w	800630c <_write_r>

08006136 <__sseek>:
 8006136:	b510      	push	{r4, lr}
 8006138:	460c      	mov	r4, r1
 800613a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800613e:	f000 f8c1 	bl	80062c4 <_lseek_r>
 8006142:	1c43      	adds	r3, r0, #1
 8006144:	89a3      	ldrh	r3, [r4, #12]
 8006146:	bf15      	itete	ne
 8006148:	6560      	strne	r0, [r4, #84]	@ 0x54
 800614a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800614e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006152:	81a3      	strheq	r3, [r4, #12]
 8006154:	bf18      	it	ne
 8006156:	81a3      	strhne	r3, [r4, #12]
 8006158:	bd10      	pop	{r4, pc}

0800615a <__sclose>:
 800615a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800615e:	f000 b8a1 	b.w	80062a4 <_close_r>

08006162 <__swbuf_r>:
 8006162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006164:	460e      	mov	r6, r1
 8006166:	4614      	mov	r4, r2
 8006168:	4605      	mov	r5, r0
 800616a:	b118      	cbz	r0, 8006174 <__swbuf_r+0x12>
 800616c:	6a03      	ldr	r3, [r0, #32]
 800616e:	b90b      	cbnz	r3, 8006174 <__swbuf_r+0x12>
 8006170:	f7ff ff0e 	bl	8005f90 <__sinit>
 8006174:	69a3      	ldr	r3, [r4, #24]
 8006176:	60a3      	str	r3, [r4, #8]
 8006178:	89a3      	ldrh	r3, [r4, #12]
 800617a:	071a      	lsls	r2, r3, #28
 800617c:	d501      	bpl.n	8006182 <__swbuf_r+0x20>
 800617e:	6923      	ldr	r3, [r4, #16]
 8006180:	b943      	cbnz	r3, 8006194 <__swbuf_r+0x32>
 8006182:	4621      	mov	r1, r4
 8006184:	4628      	mov	r0, r5
 8006186:	f000 f82b 	bl	80061e0 <__swsetup_r>
 800618a:	b118      	cbz	r0, 8006194 <__swbuf_r+0x32>
 800618c:	f04f 37ff 	mov.w	r7, #4294967295
 8006190:	4638      	mov	r0, r7
 8006192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	6922      	ldr	r2, [r4, #16]
 8006198:	1a98      	subs	r0, r3, r2
 800619a:	6963      	ldr	r3, [r4, #20]
 800619c:	b2f6      	uxtb	r6, r6
 800619e:	4283      	cmp	r3, r0
 80061a0:	4637      	mov	r7, r6
 80061a2:	dc05      	bgt.n	80061b0 <__swbuf_r+0x4e>
 80061a4:	4621      	mov	r1, r4
 80061a6:	4628      	mov	r0, r5
 80061a8:	f001 fd96 	bl	8007cd8 <_fflush_r>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	d1ed      	bne.n	800618c <__swbuf_r+0x2a>
 80061b0:	68a3      	ldr	r3, [r4, #8]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	60a3      	str	r3, [r4, #8]
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	6022      	str	r2, [r4, #0]
 80061bc:	701e      	strb	r6, [r3, #0]
 80061be:	6962      	ldr	r2, [r4, #20]
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d004      	beq.n	80061d0 <__swbuf_r+0x6e>
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	07db      	lsls	r3, r3, #31
 80061ca:	d5e1      	bpl.n	8006190 <__swbuf_r+0x2e>
 80061cc:	2e0a      	cmp	r6, #10
 80061ce:	d1df      	bne.n	8006190 <__swbuf_r+0x2e>
 80061d0:	4621      	mov	r1, r4
 80061d2:	4628      	mov	r0, r5
 80061d4:	f001 fd80 	bl	8007cd8 <_fflush_r>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d0d9      	beq.n	8006190 <__swbuf_r+0x2e>
 80061dc:	e7d6      	b.n	800618c <__swbuf_r+0x2a>
	...

080061e0 <__swsetup_r>:
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	4b29      	ldr	r3, [pc, #164]	@ (8006288 <__swsetup_r+0xa8>)
 80061e4:	4605      	mov	r5, r0
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	460c      	mov	r4, r1
 80061ea:	b118      	cbz	r0, 80061f4 <__swsetup_r+0x14>
 80061ec:	6a03      	ldr	r3, [r0, #32]
 80061ee:	b90b      	cbnz	r3, 80061f4 <__swsetup_r+0x14>
 80061f0:	f7ff fece 	bl	8005f90 <__sinit>
 80061f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061f8:	0719      	lsls	r1, r3, #28
 80061fa:	d422      	bmi.n	8006242 <__swsetup_r+0x62>
 80061fc:	06da      	lsls	r2, r3, #27
 80061fe:	d407      	bmi.n	8006210 <__swsetup_r+0x30>
 8006200:	2209      	movs	r2, #9
 8006202:	602a      	str	r2, [r5, #0]
 8006204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006208:	81a3      	strh	r3, [r4, #12]
 800620a:	f04f 30ff 	mov.w	r0, #4294967295
 800620e:	e033      	b.n	8006278 <__swsetup_r+0x98>
 8006210:	0758      	lsls	r0, r3, #29
 8006212:	d512      	bpl.n	800623a <__swsetup_r+0x5a>
 8006214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006216:	b141      	cbz	r1, 800622a <__swsetup_r+0x4a>
 8006218:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800621c:	4299      	cmp	r1, r3
 800621e:	d002      	beq.n	8006226 <__swsetup_r+0x46>
 8006220:	4628      	mov	r0, r5
 8006222:	f000 ff19 	bl	8007058 <_free_r>
 8006226:	2300      	movs	r3, #0
 8006228:	6363      	str	r3, [r4, #52]	@ 0x34
 800622a:	89a3      	ldrh	r3, [r4, #12]
 800622c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006230:	81a3      	strh	r3, [r4, #12]
 8006232:	2300      	movs	r3, #0
 8006234:	6063      	str	r3, [r4, #4]
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	f043 0308 	orr.w	r3, r3, #8
 8006240:	81a3      	strh	r3, [r4, #12]
 8006242:	6923      	ldr	r3, [r4, #16]
 8006244:	b94b      	cbnz	r3, 800625a <__swsetup_r+0x7a>
 8006246:	89a3      	ldrh	r3, [r4, #12]
 8006248:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800624c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006250:	d003      	beq.n	800625a <__swsetup_r+0x7a>
 8006252:	4621      	mov	r1, r4
 8006254:	4628      	mov	r0, r5
 8006256:	f001 fd8d 	bl	8007d74 <__smakebuf_r>
 800625a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800625e:	f013 0201 	ands.w	r2, r3, #1
 8006262:	d00a      	beq.n	800627a <__swsetup_r+0x9a>
 8006264:	2200      	movs	r2, #0
 8006266:	60a2      	str	r2, [r4, #8]
 8006268:	6962      	ldr	r2, [r4, #20]
 800626a:	4252      	negs	r2, r2
 800626c:	61a2      	str	r2, [r4, #24]
 800626e:	6922      	ldr	r2, [r4, #16]
 8006270:	b942      	cbnz	r2, 8006284 <__swsetup_r+0xa4>
 8006272:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006276:	d1c5      	bne.n	8006204 <__swsetup_r+0x24>
 8006278:	bd38      	pop	{r3, r4, r5, pc}
 800627a:	0799      	lsls	r1, r3, #30
 800627c:	bf58      	it	pl
 800627e:	6962      	ldrpl	r2, [r4, #20]
 8006280:	60a2      	str	r2, [r4, #8]
 8006282:	e7f4      	b.n	800626e <__swsetup_r+0x8e>
 8006284:	2000      	movs	r0, #0
 8006286:	e7f7      	b.n	8006278 <__swsetup_r+0x98>
 8006288:	20000018 	.word	0x20000018

0800628c <memset>:
 800628c:	4402      	add	r2, r0
 800628e:	4603      	mov	r3, r0
 8006290:	4293      	cmp	r3, r2
 8006292:	d100      	bne.n	8006296 <memset+0xa>
 8006294:	4770      	bx	lr
 8006296:	f803 1b01 	strb.w	r1, [r3], #1
 800629a:	e7f9      	b.n	8006290 <memset+0x4>

0800629c <_localeconv_r>:
 800629c:	4800      	ldr	r0, [pc, #0]	@ (80062a0 <_localeconv_r+0x4>)
 800629e:	4770      	bx	lr
 80062a0:	20000158 	.word	0x20000158

080062a4 <_close_r>:
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	4d06      	ldr	r5, [pc, #24]	@ (80062c0 <_close_r+0x1c>)
 80062a8:	2300      	movs	r3, #0
 80062aa:	4604      	mov	r4, r0
 80062ac:	4608      	mov	r0, r1
 80062ae:	602b      	str	r3, [r5, #0]
 80062b0:	f7fc fefd 	bl	80030ae <_close>
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	d102      	bne.n	80062be <_close_r+0x1a>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	b103      	cbz	r3, 80062be <_close_r+0x1a>
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	20000444 	.word	0x20000444

080062c4 <_lseek_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4d07      	ldr	r5, [pc, #28]	@ (80062e4 <_lseek_r+0x20>)
 80062c8:	4604      	mov	r4, r0
 80062ca:	4608      	mov	r0, r1
 80062cc:	4611      	mov	r1, r2
 80062ce:	2200      	movs	r2, #0
 80062d0:	602a      	str	r2, [r5, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	f7fc ff12 	bl	80030fc <_lseek>
 80062d8:	1c43      	adds	r3, r0, #1
 80062da:	d102      	bne.n	80062e2 <_lseek_r+0x1e>
 80062dc:	682b      	ldr	r3, [r5, #0]
 80062de:	b103      	cbz	r3, 80062e2 <_lseek_r+0x1e>
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	bd38      	pop	{r3, r4, r5, pc}
 80062e4:	20000444 	.word	0x20000444

080062e8 <_read_r>:
 80062e8:	b538      	push	{r3, r4, r5, lr}
 80062ea:	4d07      	ldr	r5, [pc, #28]	@ (8006308 <_read_r+0x20>)
 80062ec:	4604      	mov	r4, r0
 80062ee:	4608      	mov	r0, r1
 80062f0:	4611      	mov	r1, r2
 80062f2:	2200      	movs	r2, #0
 80062f4:	602a      	str	r2, [r5, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	f7fc febc 	bl	8003074 <_read>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d102      	bne.n	8006306 <_read_r+0x1e>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	b103      	cbz	r3, 8006306 <_read_r+0x1e>
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	bd38      	pop	{r3, r4, r5, pc}
 8006308:	20000444 	.word	0x20000444

0800630c <_write_r>:
 800630c:	b538      	push	{r3, r4, r5, lr}
 800630e:	4d07      	ldr	r5, [pc, #28]	@ (800632c <_write_r+0x20>)
 8006310:	4604      	mov	r4, r0
 8006312:	4608      	mov	r0, r1
 8006314:	4611      	mov	r1, r2
 8006316:	2200      	movs	r2, #0
 8006318:	602a      	str	r2, [r5, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	f7fc faeb 	bl	80028f6 <_write>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d102      	bne.n	800632a <_write_r+0x1e>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b103      	cbz	r3, 800632a <_write_r+0x1e>
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	20000444 	.word	0x20000444

08006330 <__errno>:
 8006330:	4b01      	ldr	r3, [pc, #4]	@ (8006338 <__errno+0x8>)
 8006332:	6818      	ldr	r0, [r3, #0]
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	20000018 	.word	0x20000018

0800633c <__libc_init_array>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	4d0d      	ldr	r5, [pc, #52]	@ (8006374 <__libc_init_array+0x38>)
 8006340:	4c0d      	ldr	r4, [pc, #52]	@ (8006378 <__libc_init_array+0x3c>)
 8006342:	1b64      	subs	r4, r4, r5
 8006344:	10a4      	asrs	r4, r4, #2
 8006346:	2600      	movs	r6, #0
 8006348:	42a6      	cmp	r6, r4
 800634a:	d109      	bne.n	8006360 <__libc_init_array+0x24>
 800634c:	4d0b      	ldr	r5, [pc, #44]	@ (800637c <__libc_init_array+0x40>)
 800634e:	4c0c      	ldr	r4, [pc, #48]	@ (8006380 <__libc_init_array+0x44>)
 8006350:	f001 fe2e 	bl	8007fb0 <_init>
 8006354:	1b64      	subs	r4, r4, r5
 8006356:	10a4      	asrs	r4, r4, #2
 8006358:	2600      	movs	r6, #0
 800635a:	42a6      	cmp	r6, r4
 800635c:	d105      	bne.n	800636a <__libc_init_array+0x2e>
 800635e:	bd70      	pop	{r4, r5, r6, pc}
 8006360:	f855 3b04 	ldr.w	r3, [r5], #4
 8006364:	4798      	blx	r3
 8006366:	3601      	adds	r6, #1
 8006368:	e7ee      	b.n	8006348 <__libc_init_array+0xc>
 800636a:	f855 3b04 	ldr.w	r3, [r5], #4
 800636e:	4798      	blx	r3
 8006370:	3601      	adds	r6, #1
 8006372:	e7f2      	b.n	800635a <__libc_init_array+0x1e>
 8006374:	080085ec 	.word	0x080085ec
 8006378:	080085ec 	.word	0x080085ec
 800637c:	080085ec 	.word	0x080085ec
 8006380:	080085f0 	.word	0x080085f0

08006384 <__retarget_lock_init_recursive>:
 8006384:	4770      	bx	lr

08006386 <__retarget_lock_acquire_recursive>:
 8006386:	4770      	bx	lr

08006388 <__retarget_lock_release_recursive>:
 8006388:	4770      	bx	lr

0800638a <memcpy>:
 800638a:	440a      	add	r2, r1
 800638c:	4291      	cmp	r1, r2
 800638e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006392:	d100      	bne.n	8006396 <memcpy+0xc>
 8006394:	4770      	bx	lr
 8006396:	b510      	push	{r4, lr}
 8006398:	f811 4b01 	ldrb.w	r4, [r1], #1
 800639c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063a0:	4291      	cmp	r1, r2
 80063a2:	d1f9      	bne.n	8006398 <memcpy+0xe>
 80063a4:	bd10      	pop	{r4, pc}

080063a6 <quorem>:
 80063a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063aa:	6903      	ldr	r3, [r0, #16]
 80063ac:	690c      	ldr	r4, [r1, #16]
 80063ae:	42a3      	cmp	r3, r4
 80063b0:	4607      	mov	r7, r0
 80063b2:	db7e      	blt.n	80064b2 <quorem+0x10c>
 80063b4:	3c01      	subs	r4, #1
 80063b6:	f101 0814 	add.w	r8, r1, #20
 80063ba:	00a3      	lsls	r3, r4, #2
 80063bc:	f100 0514 	add.w	r5, r0, #20
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063c6:	9301      	str	r3, [sp, #4]
 80063c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063d0:	3301      	adds	r3, #1
 80063d2:	429a      	cmp	r2, r3
 80063d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80063dc:	d32e      	bcc.n	800643c <quorem+0x96>
 80063de:	f04f 0a00 	mov.w	sl, #0
 80063e2:	46c4      	mov	ip, r8
 80063e4:	46ae      	mov	lr, r5
 80063e6:	46d3      	mov	fp, sl
 80063e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063ec:	b298      	uxth	r0, r3
 80063ee:	fb06 a000 	mla	r0, r6, r0, sl
 80063f2:	0c02      	lsrs	r2, r0, #16
 80063f4:	0c1b      	lsrs	r3, r3, #16
 80063f6:	fb06 2303 	mla	r3, r6, r3, r2
 80063fa:	f8de 2000 	ldr.w	r2, [lr]
 80063fe:	b280      	uxth	r0, r0
 8006400:	b292      	uxth	r2, r2
 8006402:	1a12      	subs	r2, r2, r0
 8006404:	445a      	add	r2, fp
 8006406:	f8de 0000 	ldr.w	r0, [lr]
 800640a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800640e:	b29b      	uxth	r3, r3
 8006410:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006414:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006418:	b292      	uxth	r2, r2
 800641a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800641e:	45e1      	cmp	r9, ip
 8006420:	f84e 2b04 	str.w	r2, [lr], #4
 8006424:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006428:	d2de      	bcs.n	80063e8 <quorem+0x42>
 800642a:	9b00      	ldr	r3, [sp, #0]
 800642c:	58eb      	ldr	r3, [r5, r3]
 800642e:	b92b      	cbnz	r3, 800643c <quorem+0x96>
 8006430:	9b01      	ldr	r3, [sp, #4]
 8006432:	3b04      	subs	r3, #4
 8006434:	429d      	cmp	r5, r3
 8006436:	461a      	mov	r2, r3
 8006438:	d32f      	bcc.n	800649a <quorem+0xf4>
 800643a:	613c      	str	r4, [r7, #16]
 800643c:	4638      	mov	r0, r7
 800643e:	f001 f97d 	bl	800773c <__mcmp>
 8006442:	2800      	cmp	r0, #0
 8006444:	db25      	blt.n	8006492 <quorem+0xec>
 8006446:	4629      	mov	r1, r5
 8006448:	2000      	movs	r0, #0
 800644a:	f858 2b04 	ldr.w	r2, [r8], #4
 800644e:	f8d1 c000 	ldr.w	ip, [r1]
 8006452:	fa1f fe82 	uxth.w	lr, r2
 8006456:	fa1f f38c 	uxth.w	r3, ip
 800645a:	eba3 030e 	sub.w	r3, r3, lr
 800645e:	4403      	add	r3, r0
 8006460:	0c12      	lsrs	r2, r2, #16
 8006462:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006466:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800646a:	b29b      	uxth	r3, r3
 800646c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006470:	45c1      	cmp	r9, r8
 8006472:	f841 3b04 	str.w	r3, [r1], #4
 8006476:	ea4f 4022 	mov.w	r0, r2, asr #16
 800647a:	d2e6      	bcs.n	800644a <quorem+0xa4>
 800647c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006480:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006484:	b922      	cbnz	r2, 8006490 <quorem+0xea>
 8006486:	3b04      	subs	r3, #4
 8006488:	429d      	cmp	r5, r3
 800648a:	461a      	mov	r2, r3
 800648c:	d30b      	bcc.n	80064a6 <quorem+0x100>
 800648e:	613c      	str	r4, [r7, #16]
 8006490:	3601      	adds	r6, #1
 8006492:	4630      	mov	r0, r6
 8006494:	b003      	add	sp, #12
 8006496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649a:	6812      	ldr	r2, [r2, #0]
 800649c:	3b04      	subs	r3, #4
 800649e:	2a00      	cmp	r2, #0
 80064a0:	d1cb      	bne.n	800643a <quorem+0x94>
 80064a2:	3c01      	subs	r4, #1
 80064a4:	e7c6      	b.n	8006434 <quorem+0x8e>
 80064a6:	6812      	ldr	r2, [r2, #0]
 80064a8:	3b04      	subs	r3, #4
 80064aa:	2a00      	cmp	r2, #0
 80064ac:	d1ef      	bne.n	800648e <quorem+0xe8>
 80064ae:	3c01      	subs	r4, #1
 80064b0:	e7ea      	b.n	8006488 <quorem+0xe2>
 80064b2:	2000      	movs	r0, #0
 80064b4:	e7ee      	b.n	8006494 <quorem+0xee>
	...

080064b8 <_dtoa_r>:
 80064b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	69c7      	ldr	r7, [r0, #28]
 80064be:	b097      	sub	sp, #92	@ 0x5c
 80064c0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80064c4:	ec55 4b10 	vmov	r4, r5, d0
 80064c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80064ca:	9107      	str	r1, [sp, #28]
 80064cc:	4681      	mov	r9, r0
 80064ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80064d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80064d2:	b97f      	cbnz	r7, 80064f4 <_dtoa_r+0x3c>
 80064d4:	2010      	movs	r0, #16
 80064d6:	f000 fe09 	bl	80070ec <malloc>
 80064da:	4602      	mov	r2, r0
 80064dc:	f8c9 001c 	str.w	r0, [r9, #28]
 80064e0:	b920      	cbnz	r0, 80064ec <_dtoa_r+0x34>
 80064e2:	4ba9      	ldr	r3, [pc, #676]	@ (8006788 <_dtoa_r+0x2d0>)
 80064e4:	21ef      	movs	r1, #239	@ 0xef
 80064e6:	48a9      	ldr	r0, [pc, #676]	@ (800678c <_dtoa_r+0x2d4>)
 80064e8:	f001 fcb2 	bl	8007e50 <__assert_func>
 80064ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80064f0:	6007      	str	r7, [r0, #0]
 80064f2:	60c7      	str	r7, [r0, #12]
 80064f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064f8:	6819      	ldr	r1, [r3, #0]
 80064fa:	b159      	cbz	r1, 8006514 <_dtoa_r+0x5c>
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	604a      	str	r2, [r1, #4]
 8006500:	2301      	movs	r3, #1
 8006502:	4093      	lsls	r3, r2
 8006504:	608b      	str	r3, [r1, #8]
 8006506:	4648      	mov	r0, r9
 8006508:	f000 fee6 	bl	80072d8 <_Bfree>
 800650c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	1e2b      	subs	r3, r5, #0
 8006516:	bfb9      	ittee	lt
 8006518:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800651c:	9305      	strlt	r3, [sp, #20]
 800651e:	2300      	movge	r3, #0
 8006520:	6033      	strge	r3, [r6, #0]
 8006522:	9f05      	ldr	r7, [sp, #20]
 8006524:	4b9a      	ldr	r3, [pc, #616]	@ (8006790 <_dtoa_r+0x2d8>)
 8006526:	bfbc      	itt	lt
 8006528:	2201      	movlt	r2, #1
 800652a:	6032      	strlt	r2, [r6, #0]
 800652c:	43bb      	bics	r3, r7
 800652e:	d112      	bne.n	8006556 <_dtoa_r+0x9e>
 8006530:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006532:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800653c:	4323      	orrs	r3, r4
 800653e:	f000 855a 	beq.w	8006ff6 <_dtoa_r+0xb3e>
 8006542:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006544:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80067a4 <_dtoa_r+0x2ec>
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 855c 	beq.w	8007006 <_dtoa_r+0xb4e>
 800654e:	f10a 0303 	add.w	r3, sl, #3
 8006552:	f000 bd56 	b.w	8007002 <_dtoa_r+0xb4a>
 8006556:	ed9d 7b04 	vldr	d7, [sp, #16]
 800655a:	2200      	movs	r2, #0
 800655c:	ec51 0b17 	vmov	r0, r1, d7
 8006560:	2300      	movs	r3, #0
 8006562:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006566:	f7fa facf 	bl	8000b08 <__aeabi_dcmpeq>
 800656a:	4680      	mov	r8, r0
 800656c:	b158      	cbz	r0, 8006586 <_dtoa_r+0xce>
 800656e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006570:	2301      	movs	r3, #1
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006576:	b113      	cbz	r3, 800657e <_dtoa_r+0xc6>
 8006578:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800657a:	4b86      	ldr	r3, [pc, #536]	@ (8006794 <_dtoa_r+0x2dc>)
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80067a8 <_dtoa_r+0x2f0>
 8006582:	f000 bd40 	b.w	8007006 <_dtoa_r+0xb4e>
 8006586:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800658a:	aa14      	add	r2, sp, #80	@ 0x50
 800658c:	a915      	add	r1, sp, #84	@ 0x54
 800658e:	4648      	mov	r0, r9
 8006590:	f001 f984 	bl	800789c <__d2b>
 8006594:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006598:	9002      	str	r0, [sp, #8]
 800659a:	2e00      	cmp	r6, #0
 800659c:	d078      	beq.n	8006690 <_dtoa_r+0x1d8>
 800659e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065a0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80065a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80065ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80065b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80065b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80065b8:	4619      	mov	r1, r3
 80065ba:	2200      	movs	r2, #0
 80065bc:	4b76      	ldr	r3, [pc, #472]	@ (8006798 <_dtoa_r+0x2e0>)
 80065be:	f7f9 fe83 	bl	80002c8 <__aeabi_dsub>
 80065c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8006770 <_dtoa_r+0x2b8>)
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f7fa f836 	bl	8000638 <__aeabi_dmul>
 80065cc:	a36a      	add	r3, pc, #424	@ (adr r3, 8006778 <_dtoa_r+0x2c0>)
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	f7f9 fe7b 	bl	80002cc <__adddf3>
 80065d6:	4604      	mov	r4, r0
 80065d8:	4630      	mov	r0, r6
 80065da:	460d      	mov	r5, r1
 80065dc:	f7f9 ffc2 	bl	8000564 <__aeabi_i2d>
 80065e0:	a367      	add	r3, pc, #412	@ (adr r3, 8006780 <_dtoa_r+0x2c8>)
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	f7fa f827 	bl	8000638 <__aeabi_dmul>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4620      	mov	r0, r4
 80065f0:	4629      	mov	r1, r5
 80065f2:	f7f9 fe6b 	bl	80002cc <__adddf3>
 80065f6:	4604      	mov	r4, r0
 80065f8:	460d      	mov	r5, r1
 80065fa:	f7fa facd 	bl	8000b98 <__aeabi_d2iz>
 80065fe:	2200      	movs	r2, #0
 8006600:	4607      	mov	r7, r0
 8006602:	2300      	movs	r3, #0
 8006604:	4620      	mov	r0, r4
 8006606:	4629      	mov	r1, r5
 8006608:	f7fa fa88 	bl	8000b1c <__aeabi_dcmplt>
 800660c:	b140      	cbz	r0, 8006620 <_dtoa_r+0x168>
 800660e:	4638      	mov	r0, r7
 8006610:	f7f9 ffa8 	bl	8000564 <__aeabi_i2d>
 8006614:	4622      	mov	r2, r4
 8006616:	462b      	mov	r3, r5
 8006618:	f7fa fa76 	bl	8000b08 <__aeabi_dcmpeq>
 800661c:	b900      	cbnz	r0, 8006620 <_dtoa_r+0x168>
 800661e:	3f01      	subs	r7, #1
 8006620:	2f16      	cmp	r7, #22
 8006622:	d852      	bhi.n	80066ca <_dtoa_r+0x212>
 8006624:	4b5d      	ldr	r3, [pc, #372]	@ (800679c <_dtoa_r+0x2e4>)
 8006626:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006632:	f7fa fa73 	bl	8000b1c <__aeabi_dcmplt>
 8006636:	2800      	cmp	r0, #0
 8006638:	d049      	beq.n	80066ce <_dtoa_r+0x216>
 800663a:	3f01      	subs	r7, #1
 800663c:	2300      	movs	r3, #0
 800663e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006640:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006642:	1b9b      	subs	r3, r3, r6
 8006644:	1e5a      	subs	r2, r3, #1
 8006646:	bf45      	ittet	mi
 8006648:	f1c3 0301 	rsbmi	r3, r3, #1
 800664c:	9300      	strmi	r3, [sp, #0]
 800664e:	2300      	movpl	r3, #0
 8006650:	2300      	movmi	r3, #0
 8006652:	9206      	str	r2, [sp, #24]
 8006654:	bf54      	ite	pl
 8006656:	9300      	strpl	r3, [sp, #0]
 8006658:	9306      	strmi	r3, [sp, #24]
 800665a:	2f00      	cmp	r7, #0
 800665c:	db39      	blt.n	80066d2 <_dtoa_r+0x21a>
 800665e:	9b06      	ldr	r3, [sp, #24]
 8006660:	970d      	str	r7, [sp, #52]	@ 0x34
 8006662:	443b      	add	r3, r7
 8006664:	9306      	str	r3, [sp, #24]
 8006666:	2300      	movs	r3, #0
 8006668:	9308      	str	r3, [sp, #32]
 800666a:	9b07      	ldr	r3, [sp, #28]
 800666c:	2b09      	cmp	r3, #9
 800666e:	d863      	bhi.n	8006738 <_dtoa_r+0x280>
 8006670:	2b05      	cmp	r3, #5
 8006672:	bfc4      	itt	gt
 8006674:	3b04      	subgt	r3, #4
 8006676:	9307      	strgt	r3, [sp, #28]
 8006678:	9b07      	ldr	r3, [sp, #28]
 800667a:	f1a3 0302 	sub.w	r3, r3, #2
 800667e:	bfcc      	ite	gt
 8006680:	2400      	movgt	r4, #0
 8006682:	2401      	movle	r4, #1
 8006684:	2b03      	cmp	r3, #3
 8006686:	d863      	bhi.n	8006750 <_dtoa_r+0x298>
 8006688:	e8df f003 	tbb	[pc, r3]
 800668c:	2b375452 	.word	0x2b375452
 8006690:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006694:	441e      	add	r6, r3
 8006696:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800669a:	2b20      	cmp	r3, #32
 800669c:	bfc1      	itttt	gt
 800669e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80066a2:	409f      	lslgt	r7, r3
 80066a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80066a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80066ac:	bfd6      	itet	le
 80066ae:	f1c3 0320 	rsble	r3, r3, #32
 80066b2:	ea47 0003 	orrgt.w	r0, r7, r3
 80066b6:	fa04 f003 	lslle.w	r0, r4, r3
 80066ba:	f7f9 ff43 	bl	8000544 <__aeabi_ui2d>
 80066be:	2201      	movs	r2, #1
 80066c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80066c4:	3e01      	subs	r6, #1
 80066c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80066c8:	e776      	b.n	80065b8 <_dtoa_r+0x100>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e7b7      	b.n	800663e <_dtoa_r+0x186>
 80066ce:	9010      	str	r0, [sp, #64]	@ 0x40
 80066d0:	e7b6      	b.n	8006640 <_dtoa_r+0x188>
 80066d2:	9b00      	ldr	r3, [sp, #0]
 80066d4:	1bdb      	subs	r3, r3, r7
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	427b      	negs	r3, r7
 80066da:	9308      	str	r3, [sp, #32]
 80066dc:	2300      	movs	r3, #0
 80066de:	930d      	str	r3, [sp, #52]	@ 0x34
 80066e0:	e7c3      	b.n	800666a <_dtoa_r+0x1b2>
 80066e2:	2301      	movs	r3, #1
 80066e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066e8:	eb07 0b03 	add.w	fp, r7, r3
 80066ec:	f10b 0301 	add.w	r3, fp, #1
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	9303      	str	r3, [sp, #12]
 80066f4:	bfb8      	it	lt
 80066f6:	2301      	movlt	r3, #1
 80066f8:	e006      	b.n	8006708 <_dtoa_r+0x250>
 80066fa:	2301      	movs	r3, #1
 80066fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80066fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006700:	2b00      	cmp	r3, #0
 8006702:	dd28      	ble.n	8006756 <_dtoa_r+0x29e>
 8006704:	469b      	mov	fp, r3
 8006706:	9303      	str	r3, [sp, #12]
 8006708:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800670c:	2100      	movs	r1, #0
 800670e:	2204      	movs	r2, #4
 8006710:	f102 0514 	add.w	r5, r2, #20
 8006714:	429d      	cmp	r5, r3
 8006716:	d926      	bls.n	8006766 <_dtoa_r+0x2ae>
 8006718:	6041      	str	r1, [r0, #4]
 800671a:	4648      	mov	r0, r9
 800671c:	f000 fd9c 	bl	8007258 <_Balloc>
 8006720:	4682      	mov	sl, r0
 8006722:	2800      	cmp	r0, #0
 8006724:	d142      	bne.n	80067ac <_dtoa_r+0x2f4>
 8006726:	4b1e      	ldr	r3, [pc, #120]	@ (80067a0 <_dtoa_r+0x2e8>)
 8006728:	4602      	mov	r2, r0
 800672a:	f240 11af 	movw	r1, #431	@ 0x1af
 800672e:	e6da      	b.n	80064e6 <_dtoa_r+0x2e>
 8006730:	2300      	movs	r3, #0
 8006732:	e7e3      	b.n	80066fc <_dtoa_r+0x244>
 8006734:	2300      	movs	r3, #0
 8006736:	e7d5      	b.n	80066e4 <_dtoa_r+0x22c>
 8006738:	2401      	movs	r4, #1
 800673a:	2300      	movs	r3, #0
 800673c:	9307      	str	r3, [sp, #28]
 800673e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006740:	f04f 3bff 	mov.w	fp, #4294967295
 8006744:	2200      	movs	r2, #0
 8006746:	f8cd b00c 	str.w	fp, [sp, #12]
 800674a:	2312      	movs	r3, #18
 800674c:	920c      	str	r2, [sp, #48]	@ 0x30
 800674e:	e7db      	b.n	8006708 <_dtoa_r+0x250>
 8006750:	2301      	movs	r3, #1
 8006752:	9309      	str	r3, [sp, #36]	@ 0x24
 8006754:	e7f4      	b.n	8006740 <_dtoa_r+0x288>
 8006756:	f04f 0b01 	mov.w	fp, #1
 800675a:	f8cd b00c 	str.w	fp, [sp, #12]
 800675e:	465b      	mov	r3, fp
 8006760:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006764:	e7d0      	b.n	8006708 <_dtoa_r+0x250>
 8006766:	3101      	adds	r1, #1
 8006768:	0052      	lsls	r2, r2, #1
 800676a:	e7d1      	b.n	8006710 <_dtoa_r+0x258>
 800676c:	f3af 8000 	nop.w
 8006770:	636f4361 	.word	0x636f4361
 8006774:	3fd287a7 	.word	0x3fd287a7
 8006778:	8b60c8b3 	.word	0x8b60c8b3
 800677c:	3fc68a28 	.word	0x3fc68a28
 8006780:	509f79fb 	.word	0x509f79fb
 8006784:	3fd34413 	.word	0x3fd34413
 8006788:	080082b1 	.word	0x080082b1
 800678c:	080082c8 	.word	0x080082c8
 8006790:	7ff00000 	.word	0x7ff00000
 8006794:	08008281 	.word	0x08008281
 8006798:	3ff80000 	.word	0x3ff80000
 800679c:	08008418 	.word	0x08008418
 80067a0:	08008320 	.word	0x08008320
 80067a4:	080082ad 	.word	0x080082ad
 80067a8:	08008280 	.word	0x08008280
 80067ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80067b0:	6018      	str	r0, [r3, #0]
 80067b2:	9b03      	ldr	r3, [sp, #12]
 80067b4:	2b0e      	cmp	r3, #14
 80067b6:	f200 80a1 	bhi.w	80068fc <_dtoa_r+0x444>
 80067ba:	2c00      	cmp	r4, #0
 80067bc:	f000 809e 	beq.w	80068fc <_dtoa_r+0x444>
 80067c0:	2f00      	cmp	r7, #0
 80067c2:	dd33      	ble.n	800682c <_dtoa_r+0x374>
 80067c4:	4b9c      	ldr	r3, [pc, #624]	@ (8006a38 <_dtoa_r+0x580>)
 80067c6:	f007 020f 	and.w	r2, r7, #15
 80067ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067ce:	ed93 7b00 	vldr	d7, [r3]
 80067d2:	05f8      	lsls	r0, r7, #23
 80067d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80067d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80067dc:	d516      	bpl.n	800680c <_dtoa_r+0x354>
 80067de:	4b97      	ldr	r3, [pc, #604]	@ (8006a3c <_dtoa_r+0x584>)
 80067e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80067e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067e8:	f7fa f850 	bl	800088c <__aeabi_ddiv>
 80067ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067f0:	f004 040f 	and.w	r4, r4, #15
 80067f4:	2603      	movs	r6, #3
 80067f6:	4d91      	ldr	r5, [pc, #580]	@ (8006a3c <_dtoa_r+0x584>)
 80067f8:	b954      	cbnz	r4, 8006810 <_dtoa_r+0x358>
 80067fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80067fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006802:	f7fa f843 	bl	800088c <__aeabi_ddiv>
 8006806:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800680a:	e028      	b.n	800685e <_dtoa_r+0x3a6>
 800680c:	2602      	movs	r6, #2
 800680e:	e7f2      	b.n	80067f6 <_dtoa_r+0x33e>
 8006810:	07e1      	lsls	r1, r4, #31
 8006812:	d508      	bpl.n	8006826 <_dtoa_r+0x36e>
 8006814:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006818:	e9d5 2300 	ldrd	r2, r3, [r5]
 800681c:	f7f9 ff0c 	bl	8000638 <__aeabi_dmul>
 8006820:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006824:	3601      	adds	r6, #1
 8006826:	1064      	asrs	r4, r4, #1
 8006828:	3508      	adds	r5, #8
 800682a:	e7e5      	b.n	80067f8 <_dtoa_r+0x340>
 800682c:	f000 80af 	beq.w	800698e <_dtoa_r+0x4d6>
 8006830:	427c      	negs	r4, r7
 8006832:	4b81      	ldr	r3, [pc, #516]	@ (8006a38 <_dtoa_r+0x580>)
 8006834:	4d81      	ldr	r5, [pc, #516]	@ (8006a3c <_dtoa_r+0x584>)
 8006836:	f004 020f 	and.w	r2, r4, #15
 800683a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006846:	f7f9 fef7 	bl	8000638 <__aeabi_dmul>
 800684a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800684e:	1124      	asrs	r4, r4, #4
 8006850:	2300      	movs	r3, #0
 8006852:	2602      	movs	r6, #2
 8006854:	2c00      	cmp	r4, #0
 8006856:	f040 808f 	bne.w	8006978 <_dtoa_r+0x4c0>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1d3      	bne.n	8006806 <_dtoa_r+0x34e>
 800685e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006860:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 8094 	beq.w	8006992 <_dtoa_r+0x4da>
 800686a:	4b75      	ldr	r3, [pc, #468]	@ (8006a40 <_dtoa_r+0x588>)
 800686c:	2200      	movs	r2, #0
 800686e:	4620      	mov	r0, r4
 8006870:	4629      	mov	r1, r5
 8006872:	f7fa f953 	bl	8000b1c <__aeabi_dcmplt>
 8006876:	2800      	cmp	r0, #0
 8006878:	f000 808b 	beq.w	8006992 <_dtoa_r+0x4da>
 800687c:	9b03      	ldr	r3, [sp, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 8087 	beq.w	8006992 <_dtoa_r+0x4da>
 8006884:	f1bb 0f00 	cmp.w	fp, #0
 8006888:	dd34      	ble.n	80068f4 <_dtoa_r+0x43c>
 800688a:	4620      	mov	r0, r4
 800688c:	4b6d      	ldr	r3, [pc, #436]	@ (8006a44 <_dtoa_r+0x58c>)
 800688e:	2200      	movs	r2, #0
 8006890:	4629      	mov	r1, r5
 8006892:	f7f9 fed1 	bl	8000638 <__aeabi_dmul>
 8006896:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800689a:	f107 38ff 	add.w	r8, r7, #4294967295
 800689e:	3601      	adds	r6, #1
 80068a0:	465c      	mov	r4, fp
 80068a2:	4630      	mov	r0, r6
 80068a4:	f7f9 fe5e 	bl	8000564 <__aeabi_i2d>
 80068a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068ac:	f7f9 fec4 	bl	8000638 <__aeabi_dmul>
 80068b0:	4b65      	ldr	r3, [pc, #404]	@ (8006a48 <_dtoa_r+0x590>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	f7f9 fd0a 	bl	80002cc <__adddf3>
 80068b8:	4605      	mov	r5, r0
 80068ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80068be:	2c00      	cmp	r4, #0
 80068c0:	d16a      	bne.n	8006998 <_dtoa_r+0x4e0>
 80068c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068c6:	4b61      	ldr	r3, [pc, #388]	@ (8006a4c <_dtoa_r+0x594>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	f7f9 fcfd 	bl	80002c8 <__aeabi_dsub>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068d6:	462a      	mov	r2, r5
 80068d8:	4633      	mov	r3, r6
 80068da:	f7fa f93d 	bl	8000b58 <__aeabi_dcmpgt>
 80068de:	2800      	cmp	r0, #0
 80068e0:	f040 8298 	bne.w	8006e14 <_dtoa_r+0x95c>
 80068e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068e8:	462a      	mov	r2, r5
 80068ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80068ee:	f7fa f915 	bl	8000b1c <__aeabi_dcmplt>
 80068f2:	bb38      	cbnz	r0, 8006944 <_dtoa_r+0x48c>
 80068f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80068f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80068fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f2c0 8157 	blt.w	8006bb2 <_dtoa_r+0x6fa>
 8006904:	2f0e      	cmp	r7, #14
 8006906:	f300 8154 	bgt.w	8006bb2 <_dtoa_r+0x6fa>
 800690a:	4b4b      	ldr	r3, [pc, #300]	@ (8006a38 <_dtoa_r+0x580>)
 800690c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006910:	ed93 7b00 	vldr	d7, [r3]
 8006914:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006916:	2b00      	cmp	r3, #0
 8006918:	ed8d 7b00 	vstr	d7, [sp]
 800691c:	f280 80e5 	bge.w	8006aea <_dtoa_r+0x632>
 8006920:	9b03      	ldr	r3, [sp, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f300 80e1 	bgt.w	8006aea <_dtoa_r+0x632>
 8006928:	d10c      	bne.n	8006944 <_dtoa_r+0x48c>
 800692a:	4b48      	ldr	r3, [pc, #288]	@ (8006a4c <_dtoa_r+0x594>)
 800692c:	2200      	movs	r2, #0
 800692e:	ec51 0b17 	vmov	r0, r1, d7
 8006932:	f7f9 fe81 	bl	8000638 <__aeabi_dmul>
 8006936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800693a:	f7fa f903 	bl	8000b44 <__aeabi_dcmpge>
 800693e:	2800      	cmp	r0, #0
 8006940:	f000 8266 	beq.w	8006e10 <_dtoa_r+0x958>
 8006944:	2400      	movs	r4, #0
 8006946:	4625      	mov	r5, r4
 8006948:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800694a:	4656      	mov	r6, sl
 800694c:	ea6f 0803 	mvn.w	r8, r3
 8006950:	2700      	movs	r7, #0
 8006952:	4621      	mov	r1, r4
 8006954:	4648      	mov	r0, r9
 8006956:	f000 fcbf 	bl	80072d8 <_Bfree>
 800695a:	2d00      	cmp	r5, #0
 800695c:	f000 80bd 	beq.w	8006ada <_dtoa_r+0x622>
 8006960:	b12f      	cbz	r7, 800696e <_dtoa_r+0x4b6>
 8006962:	42af      	cmp	r7, r5
 8006964:	d003      	beq.n	800696e <_dtoa_r+0x4b6>
 8006966:	4639      	mov	r1, r7
 8006968:	4648      	mov	r0, r9
 800696a:	f000 fcb5 	bl	80072d8 <_Bfree>
 800696e:	4629      	mov	r1, r5
 8006970:	4648      	mov	r0, r9
 8006972:	f000 fcb1 	bl	80072d8 <_Bfree>
 8006976:	e0b0      	b.n	8006ada <_dtoa_r+0x622>
 8006978:	07e2      	lsls	r2, r4, #31
 800697a:	d505      	bpl.n	8006988 <_dtoa_r+0x4d0>
 800697c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006980:	f7f9 fe5a 	bl	8000638 <__aeabi_dmul>
 8006984:	3601      	adds	r6, #1
 8006986:	2301      	movs	r3, #1
 8006988:	1064      	asrs	r4, r4, #1
 800698a:	3508      	adds	r5, #8
 800698c:	e762      	b.n	8006854 <_dtoa_r+0x39c>
 800698e:	2602      	movs	r6, #2
 8006990:	e765      	b.n	800685e <_dtoa_r+0x3a6>
 8006992:	9c03      	ldr	r4, [sp, #12]
 8006994:	46b8      	mov	r8, r7
 8006996:	e784      	b.n	80068a2 <_dtoa_r+0x3ea>
 8006998:	4b27      	ldr	r3, [pc, #156]	@ (8006a38 <_dtoa_r+0x580>)
 800699a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800699c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069a4:	4454      	add	r4, sl
 80069a6:	2900      	cmp	r1, #0
 80069a8:	d054      	beq.n	8006a54 <_dtoa_r+0x59c>
 80069aa:	4929      	ldr	r1, [pc, #164]	@ (8006a50 <_dtoa_r+0x598>)
 80069ac:	2000      	movs	r0, #0
 80069ae:	f7f9 ff6d 	bl	800088c <__aeabi_ddiv>
 80069b2:	4633      	mov	r3, r6
 80069b4:	462a      	mov	r2, r5
 80069b6:	f7f9 fc87 	bl	80002c8 <__aeabi_dsub>
 80069ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80069be:	4656      	mov	r6, sl
 80069c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069c4:	f7fa f8e8 	bl	8000b98 <__aeabi_d2iz>
 80069c8:	4605      	mov	r5, r0
 80069ca:	f7f9 fdcb 	bl	8000564 <__aeabi_i2d>
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069d6:	f7f9 fc77 	bl	80002c8 <__aeabi_dsub>
 80069da:	3530      	adds	r5, #48	@ 0x30
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069e4:	f806 5b01 	strb.w	r5, [r6], #1
 80069e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80069ec:	f7fa f896 	bl	8000b1c <__aeabi_dcmplt>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d172      	bne.n	8006ada <_dtoa_r+0x622>
 80069f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069f8:	4911      	ldr	r1, [pc, #68]	@ (8006a40 <_dtoa_r+0x588>)
 80069fa:	2000      	movs	r0, #0
 80069fc:	f7f9 fc64 	bl	80002c8 <__aeabi_dsub>
 8006a00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006a04:	f7fa f88a 	bl	8000b1c <__aeabi_dcmplt>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	f040 80b4 	bne.w	8006b76 <_dtoa_r+0x6be>
 8006a0e:	42a6      	cmp	r6, r4
 8006a10:	f43f af70 	beq.w	80068f4 <_dtoa_r+0x43c>
 8006a14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006a18:	4b0a      	ldr	r3, [pc, #40]	@ (8006a44 <_dtoa_r+0x58c>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f7f9 fe0c 	bl	8000638 <__aeabi_dmul>
 8006a20:	4b08      	ldr	r3, [pc, #32]	@ (8006a44 <_dtoa_r+0x58c>)
 8006a22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a26:	2200      	movs	r2, #0
 8006a28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a2c:	f7f9 fe04 	bl	8000638 <__aeabi_dmul>
 8006a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a34:	e7c4      	b.n	80069c0 <_dtoa_r+0x508>
 8006a36:	bf00      	nop
 8006a38:	08008418 	.word	0x08008418
 8006a3c:	080083f0 	.word	0x080083f0
 8006a40:	3ff00000 	.word	0x3ff00000
 8006a44:	40240000 	.word	0x40240000
 8006a48:	401c0000 	.word	0x401c0000
 8006a4c:	40140000 	.word	0x40140000
 8006a50:	3fe00000 	.word	0x3fe00000
 8006a54:	4631      	mov	r1, r6
 8006a56:	4628      	mov	r0, r5
 8006a58:	f7f9 fdee 	bl	8000638 <__aeabi_dmul>
 8006a5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a60:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006a62:	4656      	mov	r6, sl
 8006a64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a68:	f7fa f896 	bl	8000b98 <__aeabi_d2iz>
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	f7f9 fd79 	bl	8000564 <__aeabi_i2d>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a7a:	f7f9 fc25 	bl	80002c8 <__aeabi_dsub>
 8006a7e:	3530      	adds	r5, #48	@ 0x30
 8006a80:	f806 5b01 	strb.w	r5, [r6], #1
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	42a6      	cmp	r6, r4
 8006a8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a8e:	f04f 0200 	mov.w	r2, #0
 8006a92:	d124      	bne.n	8006ade <_dtoa_r+0x626>
 8006a94:	4baf      	ldr	r3, [pc, #700]	@ (8006d54 <_dtoa_r+0x89c>)
 8006a96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006a9a:	f7f9 fc17 	bl	80002cc <__adddf3>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aa6:	f7fa f857 	bl	8000b58 <__aeabi_dcmpgt>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d163      	bne.n	8006b76 <_dtoa_r+0x6be>
 8006aae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006ab2:	49a8      	ldr	r1, [pc, #672]	@ (8006d54 <_dtoa_r+0x89c>)
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f7f9 fc07 	bl	80002c8 <__aeabi_dsub>
 8006aba:	4602      	mov	r2, r0
 8006abc:	460b      	mov	r3, r1
 8006abe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ac2:	f7fa f82b 	bl	8000b1c <__aeabi_dcmplt>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f43f af14 	beq.w	80068f4 <_dtoa_r+0x43c>
 8006acc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006ace:	1e73      	subs	r3, r6, #1
 8006ad0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ad2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ad6:	2b30      	cmp	r3, #48	@ 0x30
 8006ad8:	d0f8      	beq.n	8006acc <_dtoa_r+0x614>
 8006ada:	4647      	mov	r7, r8
 8006adc:	e03b      	b.n	8006b56 <_dtoa_r+0x69e>
 8006ade:	4b9e      	ldr	r3, [pc, #632]	@ (8006d58 <_dtoa_r+0x8a0>)
 8006ae0:	f7f9 fdaa 	bl	8000638 <__aeabi_dmul>
 8006ae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ae8:	e7bc      	b.n	8006a64 <_dtoa_r+0x5ac>
 8006aea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006aee:	4656      	mov	r6, sl
 8006af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006af4:	4620      	mov	r0, r4
 8006af6:	4629      	mov	r1, r5
 8006af8:	f7f9 fec8 	bl	800088c <__aeabi_ddiv>
 8006afc:	f7fa f84c 	bl	8000b98 <__aeabi_d2iz>
 8006b00:	4680      	mov	r8, r0
 8006b02:	f7f9 fd2f 	bl	8000564 <__aeabi_i2d>
 8006b06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b0a:	f7f9 fd95 	bl	8000638 <__aeabi_dmul>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4620      	mov	r0, r4
 8006b14:	4629      	mov	r1, r5
 8006b16:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006b1a:	f7f9 fbd5 	bl	80002c8 <__aeabi_dsub>
 8006b1e:	f806 4b01 	strb.w	r4, [r6], #1
 8006b22:	9d03      	ldr	r5, [sp, #12]
 8006b24:	eba6 040a 	sub.w	r4, r6, sl
 8006b28:	42a5      	cmp	r5, r4
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	d133      	bne.n	8006b98 <_dtoa_r+0x6e0>
 8006b30:	f7f9 fbcc 	bl	80002cc <__adddf3>
 8006b34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b38:	4604      	mov	r4, r0
 8006b3a:	460d      	mov	r5, r1
 8006b3c:	f7fa f80c 	bl	8000b58 <__aeabi_dcmpgt>
 8006b40:	b9c0      	cbnz	r0, 8006b74 <_dtoa_r+0x6bc>
 8006b42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b46:	4620      	mov	r0, r4
 8006b48:	4629      	mov	r1, r5
 8006b4a:	f7f9 ffdd 	bl	8000b08 <__aeabi_dcmpeq>
 8006b4e:	b110      	cbz	r0, 8006b56 <_dtoa_r+0x69e>
 8006b50:	f018 0f01 	tst.w	r8, #1
 8006b54:	d10e      	bne.n	8006b74 <_dtoa_r+0x6bc>
 8006b56:	9902      	ldr	r1, [sp, #8]
 8006b58:	4648      	mov	r0, r9
 8006b5a:	f000 fbbd 	bl	80072d8 <_Bfree>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	7033      	strb	r3, [r6, #0]
 8006b62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006b64:	3701      	adds	r7, #1
 8006b66:	601f      	str	r7, [r3, #0]
 8006b68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f000 824b 	beq.w	8007006 <_dtoa_r+0xb4e>
 8006b70:	601e      	str	r6, [r3, #0]
 8006b72:	e248      	b.n	8007006 <_dtoa_r+0xb4e>
 8006b74:	46b8      	mov	r8, r7
 8006b76:	4633      	mov	r3, r6
 8006b78:	461e      	mov	r6, r3
 8006b7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b7e:	2a39      	cmp	r2, #57	@ 0x39
 8006b80:	d106      	bne.n	8006b90 <_dtoa_r+0x6d8>
 8006b82:	459a      	cmp	sl, r3
 8006b84:	d1f8      	bne.n	8006b78 <_dtoa_r+0x6c0>
 8006b86:	2230      	movs	r2, #48	@ 0x30
 8006b88:	f108 0801 	add.w	r8, r8, #1
 8006b8c:	f88a 2000 	strb.w	r2, [sl]
 8006b90:	781a      	ldrb	r2, [r3, #0]
 8006b92:	3201      	adds	r2, #1
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	e7a0      	b.n	8006ada <_dtoa_r+0x622>
 8006b98:	4b6f      	ldr	r3, [pc, #444]	@ (8006d58 <_dtoa_r+0x8a0>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f7f9 fd4c 	bl	8000638 <__aeabi_dmul>
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	460d      	mov	r5, r1
 8006ba8:	f7f9 ffae 	bl	8000b08 <__aeabi_dcmpeq>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d09f      	beq.n	8006af0 <_dtoa_r+0x638>
 8006bb0:	e7d1      	b.n	8006b56 <_dtoa_r+0x69e>
 8006bb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bb4:	2a00      	cmp	r2, #0
 8006bb6:	f000 80ea 	beq.w	8006d8e <_dtoa_r+0x8d6>
 8006bba:	9a07      	ldr	r2, [sp, #28]
 8006bbc:	2a01      	cmp	r2, #1
 8006bbe:	f300 80cd 	bgt.w	8006d5c <_dtoa_r+0x8a4>
 8006bc2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006bc4:	2a00      	cmp	r2, #0
 8006bc6:	f000 80c1 	beq.w	8006d4c <_dtoa_r+0x894>
 8006bca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006bce:	9c08      	ldr	r4, [sp, #32]
 8006bd0:	9e00      	ldr	r6, [sp, #0]
 8006bd2:	9a00      	ldr	r2, [sp, #0]
 8006bd4:	441a      	add	r2, r3
 8006bd6:	9200      	str	r2, [sp, #0]
 8006bd8:	9a06      	ldr	r2, [sp, #24]
 8006bda:	2101      	movs	r1, #1
 8006bdc:	441a      	add	r2, r3
 8006bde:	4648      	mov	r0, r9
 8006be0:	9206      	str	r2, [sp, #24]
 8006be2:	f000 fc2d 	bl	8007440 <__i2b>
 8006be6:	4605      	mov	r5, r0
 8006be8:	b166      	cbz	r6, 8006c04 <_dtoa_r+0x74c>
 8006bea:	9b06      	ldr	r3, [sp, #24]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	dd09      	ble.n	8006c04 <_dtoa_r+0x74c>
 8006bf0:	42b3      	cmp	r3, r6
 8006bf2:	9a00      	ldr	r2, [sp, #0]
 8006bf4:	bfa8      	it	ge
 8006bf6:	4633      	movge	r3, r6
 8006bf8:	1ad2      	subs	r2, r2, r3
 8006bfa:	9200      	str	r2, [sp, #0]
 8006bfc:	9a06      	ldr	r2, [sp, #24]
 8006bfe:	1af6      	subs	r6, r6, r3
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	9306      	str	r3, [sp, #24]
 8006c04:	9b08      	ldr	r3, [sp, #32]
 8006c06:	b30b      	cbz	r3, 8006c4c <_dtoa_r+0x794>
 8006c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80c6 	beq.w	8006d9c <_dtoa_r+0x8e4>
 8006c10:	2c00      	cmp	r4, #0
 8006c12:	f000 80c0 	beq.w	8006d96 <_dtoa_r+0x8de>
 8006c16:	4629      	mov	r1, r5
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4648      	mov	r0, r9
 8006c1c:	f000 fcc8 	bl	80075b0 <__pow5mult>
 8006c20:	9a02      	ldr	r2, [sp, #8]
 8006c22:	4601      	mov	r1, r0
 8006c24:	4605      	mov	r5, r0
 8006c26:	4648      	mov	r0, r9
 8006c28:	f000 fc20 	bl	800746c <__multiply>
 8006c2c:	9902      	ldr	r1, [sp, #8]
 8006c2e:	4680      	mov	r8, r0
 8006c30:	4648      	mov	r0, r9
 8006c32:	f000 fb51 	bl	80072d8 <_Bfree>
 8006c36:	9b08      	ldr	r3, [sp, #32]
 8006c38:	1b1b      	subs	r3, r3, r4
 8006c3a:	9308      	str	r3, [sp, #32]
 8006c3c:	f000 80b1 	beq.w	8006da2 <_dtoa_r+0x8ea>
 8006c40:	9a08      	ldr	r2, [sp, #32]
 8006c42:	4641      	mov	r1, r8
 8006c44:	4648      	mov	r0, r9
 8006c46:	f000 fcb3 	bl	80075b0 <__pow5mult>
 8006c4a:	9002      	str	r0, [sp, #8]
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	4648      	mov	r0, r9
 8006c50:	f000 fbf6 	bl	8007440 <__i2b>
 8006c54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c56:	4604      	mov	r4, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 81d8 	beq.w	800700e <_dtoa_r+0xb56>
 8006c5e:	461a      	mov	r2, r3
 8006c60:	4601      	mov	r1, r0
 8006c62:	4648      	mov	r0, r9
 8006c64:	f000 fca4 	bl	80075b0 <__pow5mult>
 8006c68:	9b07      	ldr	r3, [sp, #28]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	f300 809f 	bgt.w	8006db0 <_dtoa_r+0x8f8>
 8006c72:	9b04      	ldr	r3, [sp, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f040 8097 	bne.w	8006da8 <_dtoa_r+0x8f0>
 8006c7a:	9b05      	ldr	r3, [sp, #20]
 8006c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f040 8093 	bne.w	8006dac <_dtoa_r+0x8f4>
 8006c86:	9b05      	ldr	r3, [sp, #20]
 8006c88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c8c:	0d1b      	lsrs	r3, r3, #20
 8006c8e:	051b      	lsls	r3, r3, #20
 8006c90:	b133      	cbz	r3, 8006ca0 <_dtoa_r+0x7e8>
 8006c92:	9b00      	ldr	r3, [sp, #0]
 8006c94:	3301      	adds	r3, #1
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	9b06      	ldr	r3, [sp, #24]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	9306      	str	r3, [sp, #24]
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	9308      	str	r3, [sp, #32]
 8006ca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 81b8 	beq.w	800701a <_dtoa_r+0xb62>
 8006caa:	6923      	ldr	r3, [r4, #16]
 8006cac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006cb0:	6918      	ldr	r0, [r3, #16]
 8006cb2:	f000 fb79 	bl	80073a8 <__hi0bits>
 8006cb6:	f1c0 0020 	rsb	r0, r0, #32
 8006cba:	9b06      	ldr	r3, [sp, #24]
 8006cbc:	4418      	add	r0, r3
 8006cbe:	f010 001f 	ands.w	r0, r0, #31
 8006cc2:	f000 8082 	beq.w	8006dca <_dtoa_r+0x912>
 8006cc6:	f1c0 0320 	rsb	r3, r0, #32
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	dd73      	ble.n	8006db6 <_dtoa_r+0x8fe>
 8006cce:	9b00      	ldr	r3, [sp, #0]
 8006cd0:	f1c0 001c 	rsb	r0, r0, #28
 8006cd4:	4403      	add	r3, r0
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	9b06      	ldr	r3, [sp, #24]
 8006cda:	4403      	add	r3, r0
 8006cdc:	4406      	add	r6, r0
 8006cde:	9306      	str	r3, [sp, #24]
 8006ce0:	9b00      	ldr	r3, [sp, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dd05      	ble.n	8006cf2 <_dtoa_r+0x83a>
 8006ce6:	9902      	ldr	r1, [sp, #8]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4648      	mov	r0, r9
 8006cec:	f000 fcba 	bl	8007664 <__lshift>
 8006cf0:	9002      	str	r0, [sp, #8]
 8006cf2:	9b06      	ldr	r3, [sp, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	dd05      	ble.n	8006d04 <_dtoa_r+0x84c>
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	4648      	mov	r0, r9
 8006cfe:	f000 fcb1 	bl	8007664 <__lshift>
 8006d02:	4604      	mov	r4, r0
 8006d04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d061      	beq.n	8006dce <_dtoa_r+0x916>
 8006d0a:	9802      	ldr	r0, [sp, #8]
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	f000 fd15 	bl	800773c <__mcmp>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	da5b      	bge.n	8006dce <_dtoa_r+0x916>
 8006d16:	2300      	movs	r3, #0
 8006d18:	9902      	ldr	r1, [sp, #8]
 8006d1a:	220a      	movs	r2, #10
 8006d1c:	4648      	mov	r0, r9
 8006d1e:	f000 fafd 	bl	800731c <__multadd>
 8006d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d24:	9002      	str	r0, [sp, #8]
 8006d26:	f107 38ff 	add.w	r8, r7, #4294967295
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 8177 	beq.w	800701e <_dtoa_r+0xb66>
 8006d30:	4629      	mov	r1, r5
 8006d32:	2300      	movs	r3, #0
 8006d34:	220a      	movs	r2, #10
 8006d36:	4648      	mov	r0, r9
 8006d38:	f000 faf0 	bl	800731c <__multadd>
 8006d3c:	f1bb 0f00 	cmp.w	fp, #0
 8006d40:	4605      	mov	r5, r0
 8006d42:	dc6f      	bgt.n	8006e24 <_dtoa_r+0x96c>
 8006d44:	9b07      	ldr	r3, [sp, #28]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	dc49      	bgt.n	8006dde <_dtoa_r+0x926>
 8006d4a:	e06b      	b.n	8006e24 <_dtoa_r+0x96c>
 8006d4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d52:	e73c      	b.n	8006bce <_dtoa_r+0x716>
 8006d54:	3fe00000 	.word	0x3fe00000
 8006d58:	40240000 	.word	0x40240000
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	1e5c      	subs	r4, r3, #1
 8006d60:	9b08      	ldr	r3, [sp, #32]
 8006d62:	42a3      	cmp	r3, r4
 8006d64:	db09      	blt.n	8006d7a <_dtoa_r+0x8c2>
 8006d66:	1b1c      	subs	r4, r3, r4
 8006d68:	9b03      	ldr	r3, [sp, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f6bf af30 	bge.w	8006bd0 <_dtoa_r+0x718>
 8006d70:	9b00      	ldr	r3, [sp, #0]
 8006d72:	9a03      	ldr	r2, [sp, #12]
 8006d74:	1a9e      	subs	r6, r3, r2
 8006d76:	2300      	movs	r3, #0
 8006d78:	e72b      	b.n	8006bd2 <_dtoa_r+0x71a>
 8006d7a:	9b08      	ldr	r3, [sp, #32]
 8006d7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006d7e:	9408      	str	r4, [sp, #32]
 8006d80:	1ae3      	subs	r3, r4, r3
 8006d82:	441a      	add	r2, r3
 8006d84:	9e00      	ldr	r6, [sp, #0]
 8006d86:	9b03      	ldr	r3, [sp, #12]
 8006d88:	920d      	str	r2, [sp, #52]	@ 0x34
 8006d8a:	2400      	movs	r4, #0
 8006d8c:	e721      	b.n	8006bd2 <_dtoa_r+0x71a>
 8006d8e:	9c08      	ldr	r4, [sp, #32]
 8006d90:	9e00      	ldr	r6, [sp, #0]
 8006d92:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006d94:	e728      	b.n	8006be8 <_dtoa_r+0x730>
 8006d96:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006d9a:	e751      	b.n	8006c40 <_dtoa_r+0x788>
 8006d9c:	9a08      	ldr	r2, [sp, #32]
 8006d9e:	9902      	ldr	r1, [sp, #8]
 8006da0:	e750      	b.n	8006c44 <_dtoa_r+0x78c>
 8006da2:	f8cd 8008 	str.w	r8, [sp, #8]
 8006da6:	e751      	b.n	8006c4c <_dtoa_r+0x794>
 8006da8:	2300      	movs	r3, #0
 8006daa:	e779      	b.n	8006ca0 <_dtoa_r+0x7e8>
 8006dac:	9b04      	ldr	r3, [sp, #16]
 8006dae:	e777      	b.n	8006ca0 <_dtoa_r+0x7e8>
 8006db0:	2300      	movs	r3, #0
 8006db2:	9308      	str	r3, [sp, #32]
 8006db4:	e779      	b.n	8006caa <_dtoa_r+0x7f2>
 8006db6:	d093      	beq.n	8006ce0 <_dtoa_r+0x828>
 8006db8:	9a00      	ldr	r2, [sp, #0]
 8006dba:	331c      	adds	r3, #28
 8006dbc:	441a      	add	r2, r3
 8006dbe:	9200      	str	r2, [sp, #0]
 8006dc0:	9a06      	ldr	r2, [sp, #24]
 8006dc2:	441a      	add	r2, r3
 8006dc4:	441e      	add	r6, r3
 8006dc6:	9206      	str	r2, [sp, #24]
 8006dc8:	e78a      	b.n	8006ce0 <_dtoa_r+0x828>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	e7f4      	b.n	8006db8 <_dtoa_r+0x900>
 8006dce:	9b03      	ldr	r3, [sp, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	46b8      	mov	r8, r7
 8006dd4:	dc20      	bgt.n	8006e18 <_dtoa_r+0x960>
 8006dd6:	469b      	mov	fp, r3
 8006dd8:	9b07      	ldr	r3, [sp, #28]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	dd1e      	ble.n	8006e1c <_dtoa_r+0x964>
 8006dde:	f1bb 0f00 	cmp.w	fp, #0
 8006de2:	f47f adb1 	bne.w	8006948 <_dtoa_r+0x490>
 8006de6:	4621      	mov	r1, r4
 8006de8:	465b      	mov	r3, fp
 8006dea:	2205      	movs	r2, #5
 8006dec:	4648      	mov	r0, r9
 8006dee:	f000 fa95 	bl	800731c <__multadd>
 8006df2:	4601      	mov	r1, r0
 8006df4:	4604      	mov	r4, r0
 8006df6:	9802      	ldr	r0, [sp, #8]
 8006df8:	f000 fca0 	bl	800773c <__mcmp>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	f77f ada3 	ble.w	8006948 <_dtoa_r+0x490>
 8006e02:	4656      	mov	r6, sl
 8006e04:	2331      	movs	r3, #49	@ 0x31
 8006e06:	f806 3b01 	strb.w	r3, [r6], #1
 8006e0a:	f108 0801 	add.w	r8, r8, #1
 8006e0e:	e59f      	b.n	8006950 <_dtoa_r+0x498>
 8006e10:	9c03      	ldr	r4, [sp, #12]
 8006e12:	46b8      	mov	r8, r7
 8006e14:	4625      	mov	r5, r4
 8006e16:	e7f4      	b.n	8006e02 <_dtoa_r+0x94a>
 8006e18:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 8101 	beq.w	8007026 <_dtoa_r+0xb6e>
 8006e24:	2e00      	cmp	r6, #0
 8006e26:	dd05      	ble.n	8006e34 <_dtoa_r+0x97c>
 8006e28:	4629      	mov	r1, r5
 8006e2a:	4632      	mov	r2, r6
 8006e2c:	4648      	mov	r0, r9
 8006e2e:	f000 fc19 	bl	8007664 <__lshift>
 8006e32:	4605      	mov	r5, r0
 8006e34:	9b08      	ldr	r3, [sp, #32]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d05c      	beq.n	8006ef4 <_dtoa_r+0xa3c>
 8006e3a:	6869      	ldr	r1, [r5, #4]
 8006e3c:	4648      	mov	r0, r9
 8006e3e:	f000 fa0b 	bl	8007258 <_Balloc>
 8006e42:	4606      	mov	r6, r0
 8006e44:	b928      	cbnz	r0, 8006e52 <_dtoa_r+0x99a>
 8006e46:	4b82      	ldr	r3, [pc, #520]	@ (8007050 <_dtoa_r+0xb98>)
 8006e48:	4602      	mov	r2, r0
 8006e4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e4e:	f7ff bb4a 	b.w	80064e6 <_dtoa_r+0x2e>
 8006e52:	692a      	ldr	r2, [r5, #16]
 8006e54:	3202      	adds	r2, #2
 8006e56:	0092      	lsls	r2, r2, #2
 8006e58:	f105 010c 	add.w	r1, r5, #12
 8006e5c:	300c      	adds	r0, #12
 8006e5e:	f7ff fa94 	bl	800638a <memcpy>
 8006e62:	2201      	movs	r2, #1
 8006e64:	4631      	mov	r1, r6
 8006e66:	4648      	mov	r0, r9
 8006e68:	f000 fbfc 	bl	8007664 <__lshift>
 8006e6c:	f10a 0301 	add.w	r3, sl, #1
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	eb0a 030b 	add.w	r3, sl, fp
 8006e76:	9308      	str	r3, [sp, #32]
 8006e78:	9b04      	ldr	r3, [sp, #16]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	462f      	mov	r7, r5
 8006e80:	9306      	str	r3, [sp, #24]
 8006e82:	4605      	mov	r5, r0
 8006e84:	9b00      	ldr	r3, [sp, #0]
 8006e86:	9802      	ldr	r0, [sp, #8]
 8006e88:	4621      	mov	r1, r4
 8006e8a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006e8e:	f7ff fa8a 	bl	80063a6 <quorem>
 8006e92:	4603      	mov	r3, r0
 8006e94:	3330      	adds	r3, #48	@ 0x30
 8006e96:	9003      	str	r0, [sp, #12]
 8006e98:	4639      	mov	r1, r7
 8006e9a:	9802      	ldr	r0, [sp, #8]
 8006e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e9e:	f000 fc4d 	bl	800773c <__mcmp>
 8006ea2:	462a      	mov	r2, r5
 8006ea4:	9004      	str	r0, [sp, #16]
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	4648      	mov	r0, r9
 8006eaa:	f000 fc63 	bl	8007774 <__mdiff>
 8006eae:	68c2      	ldr	r2, [r0, #12]
 8006eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	bb02      	cbnz	r2, 8006ef8 <_dtoa_r+0xa40>
 8006eb6:	4601      	mov	r1, r0
 8006eb8:	9802      	ldr	r0, [sp, #8]
 8006eba:	f000 fc3f 	bl	800773c <__mcmp>
 8006ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4648      	mov	r0, r9
 8006ec6:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ec8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eca:	f000 fa05 	bl	80072d8 <_Bfree>
 8006ece:	9b07      	ldr	r3, [sp, #28]
 8006ed0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006ed2:	9e00      	ldr	r6, [sp, #0]
 8006ed4:	ea42 0103 	orr.w	r1, r2, r3
 8006ed8:	9b06      	ldr	r3, [sp, #24]
 8006eda:	4319      	orrs	r1, r3
 8006edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ede:	d10d      	bne.n	8006efc <_dtoa_r+0xa44>
 8006ee0:	2b39      	cmp	r3, #57	@ 0x39
 8006ee2:	d027      	beq.n	8006f34 <_dtoa_r+0xa7c>
 8006ee4:	9a04      	ldr	r2, [sp, #16]
 8006ee6:	2a00      	cmp	r2, #0
 8006ee8:	dd01      	ble.n	8006eee <_dtoa_r+0xa36>
 8006eea:	9b03      	ldr	r3, [sp, #12]
 8006eec:	3331      	adds	r3, #49	@ 0x31
 8006eee:	f88b 3000 	strb.w	r3, [fp]
 8006ef2:	e52e      	b.n	8006952 <_dtoa_r+0x49a>
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	e7b9      	b.n	8006e6c <_dtoa_r+0x9b4>
 8006ef8:	2201      	movs	r2, #1
 8006efa:	e7e2      	b.n	8006ec2 <_dtoa_r+0xa0a>
 8006efc:	9904      	ldr	r1, [sp, #16]
 8006efe:	2900      	cmp	r1, #0
 8006f00:	db04      	blt.n	8006f0c <_dtoa_r+0xa54>
 8006f02:	9807      	ldr	r0, [sp, #28]
 8006f04:	4301      	orrs	r1, r0
 8006f06:	9806      	ldr	r0, [sp, #24]
 8006f08:	4301      	orrs	r1, r0
 8006f0a:	d120      	bne.n	8006f4e <_dtoa_r+0xa96>
 8006f0c:	2a00      	cmp	r2, #0
 8006f0e:	ddee      	ble.n	8006eee <_dtoa_r+0xa36>
 8006f10:	9902      	ldr	r1, [sp, #8]
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	2201      	movs	r2, #1
 8006f16:	4648      	mov	r0, r9
 8006f18:	f000 fba4 	bl	8007664 <__lshift>
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	9002      	str	r0, [sp, #8]
 8006f20:	f000 fc0c 	bl	800773c <__mcmp>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	9b00      	ldr	r3, [sp, #0]
 8006f28:	dc02      	bgt.n	8006f30 <_dtoa_r+0xa78>
 8006f2a:	d1e0      	bne.n	8006eee <_dtoa_r+0xa36>
 8006f2c:	07da      	lsls	r2, r3, #31
 8006f2e:	d5de      	bpl.n	8006eee <_dtoa_r+0xa36>
 8006f30:	2b39      	cmp	r3, #57	@ 0x39
 8006f32:	d1da      	bne.n	8006eea <_dtoa_r+0xa32>
 8006f34:	2339      	movs	r3, #57	@ 0x39
 8006f36:	f88b 3000 	strb.w	r3, [fp]
 8006f3a:	4633      	mov	r3, r6
 8006f3c:	461e      	mov	r6, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f44:	2a39      	cmp	r2, #57	@ 0x39
 8006f46:	d04e      	beq.n	8006fe6 <_dtoa_r+0xb2e>
 8006f48:	3201      	adds	r2, #1
 8006f4a:	701a      	strb	r2, [r3, #0]
 8006f4c:	e501      	b.n	8006952 <_dtoa_r+0x49a>
 8006f4e:	2a00      	cmp	r2, #0
 8006f50:	dd03      	ble.n	8006f5a <_dtoa_r+0xaa2>
 8006f52:	2b39      	cmp	r3, #57	@ 0x39
 8006f54:	d0ee      	beq.n	8006f34 <_dtoa_r+0xa7c>
 8006f56:	3301      	adds	r3, #1
 8006f58:	e7c9      	b.n	8006eee <_dtoa_r+0xa36>
 8006f5a:	9a00      	ldr	r2, [sp, #0]
 8006f5c:	9908      	ldr	r1, [sp, #32]
 8006f5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f62:	428a      	cmp	r2, r1
 8006f64:	d028      	beq.n	8006fb8 <_dtoa_r+0xb00>
 8006f66:	9902      	ldr	r1, [sp, #8]
 8006f68:	2300      	movs	r3, #0
 8006f6a:	220a      	movs	r2, #10
 8006f6c:	4648      	mov	r0, r9
 8006f6e:	f000 f9d5 	bl	800731c <__multadd>
 8006f72:	42af      	cmp	r7, r5
 8006f74:	9002      	str	r0, [sp, #8]
 8006f76:	f04f 0300 	mov.w	r3, #0
 8006f7a:	f04f 020a 	mov.w	r2, #10
 8006f7e:	4639      	mov	r1, r7
 8006f80:	4648      	mov	r0, r9
 8006f82:	d107      	bne.n	8006f94 <_dtoa_r+0xadc>
 8006f84:	f000 f9ca 	bl	800731c <__multadd>
 8006f88:	4607      	mov	r7, r0
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	9b00      	ldr	r3, [sp, #0]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	e777      	b.n	8006e84 <_dtoa_r+0x9cc>
 8006f94:	f000 f9c2 	bl	800731c <__multadd>
 8006f98:	4629      	mov	r1, r5
 8006f9a:	4607      	mov	r7, r0
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	220a      	movs	r2, #10
 8006fa0:	4648      	mov	r0, r9
 8006fa2:	f000 f9bb 	bl	800731c <__multadd>
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	e7f0      	b.n	8006f8c <_dtoa_r+0xad4>
 8006faa:	f1bb 0f00 	cmp.w	fp, #0
 8006fae:	bfcc      	ite	gt
 8006fb0:	465e      	movgt	r6, fp
 8006fb2:	2601      	movle	r6, #1
 8006fb4:	4456      	add	r6, sl
 8006fb6:	2700      	movs	r7, #0
 8006fb8:	9902      	ldr	r1, [sp, #8]
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	4648      	mov	r0, r9
 8006fc0:	f000 fb50 	bl	8007664 <__lshift>
 8006fc4:	4621      	mov	r1, r4
 8006fc6:	9002      	str	r0, [sp, #8]
 8006fc8:	f000 fbb8 	bl	800773c <__mcmp>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	dcb4      	bgt.n	8006f3a <_dtoa_r+0xa82>
 8006fd0:	d102      	bne.n	8006fd8 <_dtoa_r+0xb20>
 8006fd2:	9b00      	ldr	r3, [sp, #0]
 8006fd4:	07db      	lsls	r3, r3, #31
 8006fd6:	d4b0      	bmi.n	8006f3a <_dtoa_r+0xa82>
 8006fd8:	4633      	mov	r3, r6
 8006fda:	461e      	mov	r6, r3
 8006fdc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fe0:	2a30      	cmp	r2, #48	@ 0x30
 8006fe2:	d0fa      	beq.n	8006fda <_dtoa_r+0xb22>
 8006fe4:	e4b5      	b.n	8006952 <_dtoa_r+0x49a>
 8006fe6:	459a      	cmp	sl, r3
 8006fe8:	d1a8      	bne.n	8006f3c <_dtoa_r+0xa84>
 8006fea:	2331      	movs	r3, #49	@ 0x31
 8006fec:	f108 0801 	add.w	r8, r8, #1
 8006ff0:	f88a 3000 	strb.w	r3, [sl]
 8006ff4:	e4ad      	b.n	8006952 <_dtoa_r+0x49a>
 8006ff6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ff8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007054 <_dtoa_r+0xb9c>
 8006ffc:	b11b      	cbz	r3, 8007006 <_dtoa_r+0xb4e>
 8006ffe:	f10a 0308 	add.w	r3, sl, #8
 8007002:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	4650      	mov	r0, sl
 8007008:	b017      	add	sp, #92	@ 0x5c
 800700a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700e:	9b07      	ldr	r3, [sp, #28]
 8007010:	2b01      	cmp	r3, #1
 8007012:	f77f ae2e 	ble.w	8006c72 <_dtoa_r+0x7ba>
 8007016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007018:	9308      	str	r3, [sp, #32]
 800701a:	2001      	movs	r0, #1
 800701c:	e64d      	b.n	8006cba <_dtoa_r+0x802>
 800701e:	f1bb 0f00 	cmp.w	fp, #0
 8007022:	f77f aed9 	ble.w	8006dd8 <_dtoa_r+0x920>
 8007026:	4656      	mov	r6, sl
 8007028:	9802      	ldr	r0, [sp, #8]
 800702a:	4621      	mov	r1, r4
 800702c:	f7ff f9bb 	bl	80063a6 <quorem>
 8007030:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007034:	f806 3b01 	strb.w	r3, [r6], #1
 8007038:	eba6 020a 	sub.w	r2, r6, sl
 800703c:	4593      	cmp	fp, r2
 800703e:	ddb4      	ble.n	8006faa <_dtoa_r+0xaf2>
 8007040:	9902      	ldr	r1, [sp, #8]
 8007042:	2300      	movs	r3, #0
 8007044:	220a      	movs	r2, #10
 8007046:	4648      	mov	r0, r9
 8007048:	f000 f968 	bl	800731c <__multadd>
 800704c:	9002      	str	r0, [sp, #8]
 800704e:	e7eb      	b.n	8007028 <_dtoa_r+0xb70>
 8007050:	08008320 	.word	0x08008320
 8007054:	080082a4 	.word	0x080082a4

08007058 <_free_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4605      	mov	r5, r0
 800705c:	2900      	cmp	r1, #0
 800705e:	d041      	beq.n	80070e4 <_free_r+0x8c>
 8007060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007064:	1f0c      	subs	r4, r1, #4
 8007066:	2b00      	cmp	r3, #0
 8007068:	bfb8      	it	lt
 800706a:	18e4      	addlt	r4, r4, r3
 800706c:	f000 f8e8 	bl	8007240 <__malloc_lock>
 8007070:	4a1d      	ldr	r2, [pc, #116]	@ (80070e8 <_free_r+0x90>)
 8007072:	6813      	ldr	r3, [r2, #0]
 8007074:	b933      	cbnz	r3, 8007084 <_free_r+0x2c>
 8007076:	6063      	str	r3, [r4, #4]
 8007078:	6014      	str	r4, [r2, #0]
 800707a:	4628      	mov	r0, r5
 800707c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007080:	f000 b8e4 	b.w	800724c <__malloc_unlock>
 8007084:	42a3      	cmp	r3, r4
 8007086:	d908      	bls.n	800709a <_free_r+0x42>
 8007088:	6820      	ldr	r0, [r4, #0]
 800708a:	1821      	adds	r1, r4, r0
 800708c:	428b      	cmp	r3, r1
 800708e:	bf01      	itttt	eq
 8007090:	6819      	ldreq	r1, [r3, #0]
 8007092:	685b      	ldreq	r3, [r3, #4]
 8007094:	1809      	addeq	r1, r1, r0
 8007096:	6021      	streq	r1, [r4, #0]
 8007098:	e7ed      	b.n	8007076 <_free_r+0x1e>
 800709a:	461a      	mov	r2, r3
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	b10b      	cbz	r3, 80070a4 <_free_r+0x4c>
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	d9fa      	bls.n	800709a <_free_r+0x42>
 80070a4:	6811      	ldr	r1, [r2, #0]
 80070a6:	1850      	adds	r0, r2, r1
 80070a8:	42a0      	cmp	r0, r4
 80070aa:	d10b      	bne.n	80070c4 <_free_r+0x6c>
 80070ac:	6820      	ldr	r0, [r4, #0]
 80070ae:	4401      	add	r1, r0
 80070b0:	1850      	adds	r0, r2, r1
 80070b2:	4283      	cmp	r3, r0
 80070b4:	6011      	str	r1, [r2, #0]
 80070b6:	d1e0      	bne.n	800707a <_free_r+0x22>
 80070b8:	6818      	ldr	r0, [r3, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	6053      	str	r3, [r2, #4]
 80070be:	4408      	add	r0, r1
 80070c0:	6010      	str	r0, [r2, #0]
 80070c2:	e7da      	b.n	800707a <_free_r+0x22>
 80070c4:	d902      	bls.n	80070cc <_free_r+0x74>
 80070c6:	230c      	movs	r3, #12
 80070c8:	602b      	str	r3, [r5, #0]
 80070ca:	e7d6      	b.n	800707a <_free_r+0x22>
 80070cc:	6820      	ldr	r0, [r4, #0]
 80070ce:	1821      	adds	r1, r4, r0
 80070d0:	428b      	cmp	r3, r1
 80070d2:	bf04      	itt	eq
 80070d4:	6819      	ldreq	r1, [r3, #0]
 80070d6:	685b      	ldreq	r3, [r3, #4]
 80070d8:	6063      	str	r3, [r4, #4]
 80070da:	bf04      	itt	eq
 80070dc:	1809      	addeq	r1, r1, r0
 80070de:	6021      	streq	r1, [r4, #0]
 80070e0:	6054      	str	r4, [r2, #4]
 80070e2:	e7ca      	b.n	800707a <_free_r+0x22>
 80070e4:	bd38      	pop	{r3, r4, r5, pc}
 80070e6:	bf00      	nop
 80070e8:	20000450 	.word	0x20000450

080070ec <malloc>:
 80070ec:	4b02      	ldr	r3, [pc, #8]	@ (80070f8 <malloc+0xc>)
 80070ee:	4601      	mov	r1, r0
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	f000 b825 	b.w	8007140 <_malloc_r>
 80070f6:	bf00      	nop
 80070f8:	20000018 	.word	0x20000018

080070fc <sbrk_aligned>:
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	4e0f      	ldr	r6, [pc, #60]	@ (800713c <sbrk_aligned+0x40>)
 8007100:	460c      	mov	r4, r1
 8007102:	6831      	ldr	r1, [r6, #0]
 8007104:	4605      	mov	r5, r0
 8007106:	b911      	cbnz	r1, 800710e <sbrk_aligned+0x12>
 8007108:	f000 fe92 	bl	8007e30 <_sbrk_r>
 800710c:	6030      	str	r0, [r6, #0]
 800710e:	4621      	mov	r1, r4
 8007110:	4628      	mov	r0, r5
 8007112:	f000 fe8d 	bl	8007e30 <_sbrk_r>
 8007116:	1c43      	adds	r3, r0, #1
 8007118:	d103      	bne.n	8007122 <sbrk_aligned+0x26>
 800711a:	f04f 34ff 	mov.w	r4, #4294967295
 800711e:	4620      	mov	r0, r4
 8007120:	bd70      	pop	{r4, r5, r6, pc}
 8007122:	1cc4      	adds	r4, r0, #3
 8007124:	f024 0403 	bic.w	r4, r4, #3
 8007128:	42a0      	cmp	r0, r4
 800712a:	d0f8      	beq.n	800711e <sbrk_aligned+0x22>
 800712c:	1a21      	subs	r1, r4, r0
 800712e:	4628      	mov	r0, r5
 8007130:	f000 fe7e 	bl	8007e30 <_sbrk_r>
 8007134:	3001      	adds	r0, #1
 8007136:	d1f2      	bne.n	800711e <sbrk_aligned+0x22>
 8007138:	e7ef      	b.n	800711a <sbrk_aligned+0x1e>
 800713a:	bf00      	nop
 800713c:	2000044c 	.word	0x2000044c

08007140 <_malloc_r>:
 8007140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007144:	1ccd      	adds	r5, r1, #3
 8007146:	f025 0503 	bic.w	r5, r5, #3
 800714a:	3508      	adds	r5, #8
 800714c:	2d0c      	cmp	r5, #12
 800714e:	bf38      	it	cc
 8007150:	250c      	movcc	r5, #12
 8007152:	2d00      	cmp	r5, #0
 8007154:	4606      	mov	r6, r0
 8007156:	db01      	blt.n	800715c <_malloc_r+0x1c>
 8007158:	42a9      	cmp	r1, r5
 800715a:	d904      	bls.n	8007166 <_malloc_r+0x26>
 800715c:	230c      	movs	r3, #12
 800715e:	6033      	str	r3, [r6, #0]
 8007160:	2000      	movs	r0, #0
 8007162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007166:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800723c <_malloc_r+0xfc>
 800716a:	f000 f869 	bl	8007240 <__malloc_lock>
 800716e:	f8d8 3000 	ldr.w	r3, [r8]
 8007172:	461c      	mov	r4, r3
 8007174:	bb44      	cbnz	r4, 80071c8 <_malloc_r+0x88>
 8007176:	4629      	mov	r1, r5
 8007178:	4630      	mov	r0, r6
 800717a:	f7ff ffbf 	bl	80070fc <sbrk_aligned>
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	4604      	mov	r4, r0
 8007182:	d158      	bne.n	8007236 <_malloc_r+0xf6>
 8007184:	f8d8 4000 	ldr.w	r4, [r8]
 8007188:	4627      	mov	r7, r4
 800718a:	2f00      	cmp	r7, #0
 800718c:	d143      	bne.n	8007216 <_malloc_r+0xd6>
 800718e:	2c00      	cmp	r4, #0
 8007190:	d04b      	beq.n	800722a <_malloc_r+0xea>
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	4639      	mov	r1, r7
 8007196:	4630      	mov	r0, r6
 8007198:	eb04 0903 	add.w	r9, r4, r3
 800719c:	f000 fe48 	bl	8007e30 <_sbrk_r>
 80071a0:	4581      	cmp	r9, r0
 80071a2:	d142      	bne.n	800722a <_malloc_r+0xea>
 80071a4:	6821      	ldr	r1, [r4, #0]
 80071a6:	1a6d      	subs	r5, r5, r1
 80071a8:	4629      	mov	r1, r5
 80071aa:	4630      	mov	r0, r6
 80071ac:	f7ff ffa6 	bl	80070fc <sbrk_aligned>
 80071b0:	3001      	adds	r0, #1
 80071b2:	d03a      	beq.n	800722a <_malloc_r+0xea>
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	442b      	add	r3, r5
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	f8d8 3000 	ldr.w	r3, [r8]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	bb62      	cbnz	r2, 800721c <_malloc_r+0xdc>
 80071c2:	f8c8 7000 	str.w	r7, [r8]
 80071c6:	e00f      	b.n	80071e8 <_malloc_r+0xa8>
 80071c8:	6822      	ldr	r2, [r4, #0]
 80071ca:	1b52      	subs	r2, r2, r5
 80071cc:	d420      	bmi.n	8007210 <_malloc_r+0xd0>
 80071ce:	2a0b      	cmp	r2, #11
 80071d0:	d917      	bls.n	8007202 <_malloc_r+0xc2>
 80071d2:	1961      	adds	r1, r4, r5
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	6025      	str	r5, [r4, #0]
 80071d8:	bf18      	it	ne
 80071da:	6059      	strne	r1, [r3, #4]
 80071dc:	6863      	ldr	r3, [r4, #4]
 80071de:	bf08      	it	eq
 80071e0:	f8c8 1000 	streq.w	r1, [r8]
 80071e4:	5162      	str	r2, [r4, r5]
 80071e6:	604b      	str	r3, [r1, #4]
 80071e8:	4630      	mov	r0, r6
 80071ea:	f000 f82f 	bl	800724c <__malloc_unlock>
 80071ee:	f104 000b 	add.w	r0, r4, #11
 80071f2:	1d23      	adds	r3, r4, #4
 80071f4:	f020 0007 	bic.w	r0, r0, #7
 80071f8:	1ac2      	subs	r2, r0, r3
 80071fa:	bf1c      	itt	ne
 80071fc:	1a1b      	subne	r3, r3, r0
 80071fe:	50a3      	strne	r3, [r4, r2]
 8007200:	e7af      	b.n	8007162 <_malloc_r+0x22>
 8007202:	6862      	ldr	r2, [r4, #4]
 8007204:	42a3      	cmp	r3, r4
 8007206:	bf0c      	ite	eq
 8007208:	f8c8 2000 	streq.w	r2, [r8]
 800720c:	605a      	strne	r2, [r3, #4]
 800720e:	e7eb      	b.n	80071e8 <_malloc_r+0xa8>
 8007210:	4623      	mov	r3, r4
 8007212:	6864      	ldr	r4, [r4, #4]
 8007214:	e7ae      	b.n	8007174 <_malloc_r+0x34>
 8007216:	463c      	mov	r4, r7
 8007218:	687f      	ldr	r7, [r7, #4]
 800721a:	e7b6      	b.n	800718a <_malloc_r+0x4a>
 800721c:	461a      	mov	r2, r3
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	42a3      	cmp	r3, r4
 8007222:	d1fb      	bne.n	800721c <_malloc_r+0xdc>
 8007224:	2300      	movs	r3, #0
 8007226:	6053      	str	r3, [r2, #4]
 8007228:	e7de      	b.n	80071e8 <_malloc_r+0xa8>
 800722a:	230c      	movs	r3, #12
 800722c:	6033      	str	r3, [r6, #0]
 800722e:	4630      	mov	r0, r6
 8007230:	f000 f80c 	bl	800724c <__malloc_unlock>
 8007234:	e794      	b.n	8007160 <_malloc_r+0x20>
 8007236:	6005      	str	r5, [r0, #0]
 8007238:	e7d6      	b.n	80071e8 <_malloc_r+0xa8>
 800723a:	bf00      	nop
 800723c:	20000450 	.word	0x20000450

08007240 <__malloc_lock>:
 8007240:	4801      	ldr	r0, [pc, #4]	@ (8007248 <__malloc_lock+0x8>)
 8007242:	f7ff b8a0 	b.w	8006386 <__retarget_lock_acquire_recursive>
 8007246:	bf00      	nop
 8007248:	20000448 	.word	0x20000448

0800724c <__malloc_unlock>:
 800724c:	4801      	ldr	r0, [pc, #4]	@ (8007254 <__malloc_unlock+0x8>)
 800724e:	f7ff b89b 	b.w	8006388 <__retarget_lock_release_recursive>
 8007252:	bf00      	nop
 8007254:	20000448 	.word	0x20000448

08007258 <_Balloc>:
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	69c6      	ldr	r6, [r0, #28]
 800725c:	4604      	mov	r4, r0
 800725e:	460d      	mov	r5, r1
 8007260:	b976      	cbnz	r6, 8007280 <_Balloc+0x28>
 8007262:	2010      	movs	r0, #16
 8007264:	f7ff ff42 	bl	80070ec <malloc>
 8007268:	4602      	mov	r2, r0
 800726a:	61e0      	str	r0, [r4, #28]
 800726c:	b920      	cbnz	r0, 8007278 <_Balloc+0x20>
 800726e:	4b18      	ldr	r3, [pc, #96]	@ (80072d0 <_Balloc+0x78>)
 8007270:	4818      	ldr	r0, [pc, #96]	@ (80072d4 <_Balloc+0x7c>)
 8007272:	216b      	movs	r1, #107	@ 0x6b
 8007274:	f000 fdec 	bl	8007e50 <__assert_func>
 8007278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800727c:	6006      	str	r6, [r0, #0]
 800727e:	60c6      	str	r6, [r0, #12]
 8007280:	69e6      	ldr	r6, [r4, #28]
 8007282:	68f3      	ldr	r3, [r6, #12]
 8007284:	b183      	cbz	r3, 80072a8 <_Balloc+0x50>
 8007286:	69e3      	ldr	r3, [r4, #28]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800728e:	b9b8      	cbnz	r0, 80072c0 <_Balloc+0x68>
 8007290:	2101      	movs	r1, #1
 8007292:	fa01 f605 	lsl.w	r6, r1, r5
 8007296:	1d72      	adds	r2, r6, #5
 8007298:	0092      	lsls	r2, r2, #2
 800729a:	4620      	mov	r0, r4
 800729c:	f000 fdf6 	bl	8007e8c <_calloc_r>
 80072a0:	b160      	cbz	r0, 80072bc <_Balloc+0x64>
 80072a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072a6:	e00e      	b.n	80072c6 <_Balloc+0x6e>
 80072a8:	2221      	movs	r2, #33	@ 0x21
 80072aa:	2104      	movs	r1, #4
 80072ac:	4620      	mov	r0, r4
 80072ae:	f000 fded 	bl	8007e8c <_calloc_r>
 80072b2:	69e3      	ldr	r3, [r4, #28]
 80072b4:	60f0      	str	r0, [r6, #12]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e4      	bne.n	8007286 <_Balloc+0x2e>
 80072bc:	2000      	movs	r0, #0
 80072be:	bd70      	pop	{r4, r5, r6, pc}
 80072c0:	6802      	ldr	r2, [r0, #0]
 80072c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072c6:	2300      	movs	r3, #0
 80072c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072cc:	e7f7      	b.n	80072be <_Balloc+0x66>
 80072ce:	bf00      	nop
 80072d0:	080082b1 	.word	0x080082b1
 80072d4:	08008331 	.word	0x08008331

080072d8 <_Bfree>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	69c6      	ldr	r6, [r0, #28]
 80072dc:	4605      	mov	r5, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	b976      	cbnz	r6, 8007300 <_Bfree+0x28>
 80072e2:	2010      	movs	r0, #16
 80072e4:	f7ff ff02 	bl	80070ec <malloc>
 80072e8:	4602      	mov	r2, r0
 80072ea:	61e8      	str	r0, [r5, #28]
 80072ec:	b920      	cbnz	r0, 80072f8 <_Bfree+0x20>
 80072ee:	4b09      	ldr	r3, [pc, #36]	@ (8007314 <_Bfree+0x3c>)
 80072f0:	4809      	ldr	r0, [pc, #36]	@ (8007318 <_Bfree+0x40>)
 80072f2:	218f      	movs	r1, #143	@ 0x8f
 80072f4:	f000 fdac 	bl	8007e50 <__assert_func>
 80072f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072fc:	6006      	str	r6, [r0, #0]
 80072fe:	60c6      	str	r6, [r0, #12]
 8007300:	b13c      	cbz	r4, 8007312 <_Bfree+0x3a>
 8007302:	69eb      	ldr	r3, [r5, #28]
 8007304:	6862      	ldr	r2, [r4, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800730c:	6021      	str	r1, [r4, #0]
 800730e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007312:	bd70      	pop	{r4, r5, r6, pc}
 8007314:	080082b1 	.word	0x080082b1
 8007318:	08008331 	.word	0x08008331

0800731c <__multadd>:
 800731c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007320:	690d      	ldr	r5, [r1, #16]
 8007322:	4607      	mov	r7, r0
 8007324:	460c      	mov	r4, r1
 8007326:	461e      	mov	r6, r3
 8007328:	f101 0c14 	add.w	ip, r1, #20
 800732c:	2000      	movs	r0, #0
 800732e:	f8dc 3000 	ldr.w	r3, [ip]
 8007332:	b299      	uxth	r1, r3
 8007334:	fb02 6101 	mla	r1, r2, r1, r6
 8007338:	0c1e      	lsrs	r6, r3, #16
 800733a:	0c0b      	lsrs	r3, r1, #16
 800733c:	fb02 3306 	mla	r3, r2, r6, r3
 8007340:	b289      	uxth	r1, r1
 8007342:	3001      	adds	r0, #1
 8007344:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007348:	4285      	cmp	r5, r0
 800734a:	f84c 1b04 	str.w	r1, [ip], #4
 800734e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007352:	dcec      	bgt.n	800732e <__multadd+0x12>
 8007354:	b30e      	cbz	r6, 800739a <__multadd+0x7e>
 8007356:	68a3      	ldr	r3, [r4, #8]
 8007358:	42ab      	cmp	r3, r5
 800735a:	dc19      	bgt.n	8007390 <__multadd+0x74>
 800735c:	6861      	ldr	r1, [r4, #4]
 800735e:	4638      	mov	r0, r7
 8007360:	3101      	adds	r1, #1
 8007362:	f7ff ff79 	bl	8007258 <_Balloc>
 8007366:	4680      	mov	r8, r0
 8007368:	b928      	cbnz	r0, 8007376 <__multadd+0x5a>
 800736a:	4602      	mov	r2, r0
 800736c:	4b0c      	ldr	r3, [pc, #48]	@ (80073a0 <__multadd+0x84>)
 800736e:	480d      	ldr	r0, [pc, #52]	@ (80073a4 <__multadd+0x88>)
 8007370:	21ba      	movs	r1, #186	@ 0xba
 8007372:	f000 fd6d 	bl	8007e50 <__assert_func>
 8007376:	6922      	ldr	r2, [r4, #16]
 8007378:	3202      	adds	r2, #2
 800737a:	f104 010c 	add.w	r1, r4, #12
 800737e:	0092      	lsls	r2, r2, #2
 8007380:	300c      	adds	r0, #12
 8007382:	f7ff f802 	bl	800638a <memcpy>
 8007386:	4621      	mov	r1, r4
 8007388:	4638      	mov	r0, r7
 800738a:	f7ff ffa5 	bl	80072d8 <_Bfree>
 800738e:	4644      	mov	r4, r8
 8007390:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007394:	3501      	adds	r5, #1
 8007396:	615e      	str	r6, [r3, #20]
 8007398:	6125      	str	r5, [r4, #16]
 800739a:	4620      	mov	r0, r4
 800739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a0:	08008320 	.word	0x08008320
 80073a4:	08008331 	.word	0x08008331

080073a8 <__hi0bits>:
 80073a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80073ac:	4603      	mov	r3, r0
 80073ae:	bf36      	itet	cc
 80073b0:	0403      	lslcc	r3, r0, #16
 80073b2:	2000      	movcs	r0, #0
 80073b4:	2010      	movcc	r0, #16
 80073b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073ba:	bf3c      	itt	cc
 80073bc:	021b      	lslcc	r3, r3, #8
 80073be:	3008      	addcc	r0, #8
 80073c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073c4:	bf3c      	itt	cc
 80073c6:	011b      	lslcc	r3, r3, #4
 80073c8:	3004      	addcc	r0, #4
 80073ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ce:	bf3c      	itt	cc
 80073d0:	009b      	lslcc	r3, r3, #2
 80073d2:	3002      	addcc	r0, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	db05      	blt.n	80073e4 <__hi0bits+0x3c>
 80073d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80073dc:	f100 0001 	add.w	r0, r0, #1
 80073e0:	bf08      	it	eq
 80073e2:	2020      	moveq	r0, #32
 80073e4:	4770      	bx	lr

080073e6 <__lo0bits>:
 80073e6:	6803      	ldr	r3, [r0, #0]
 80073e8:	4602      	mov	r2, r0
 80073ea:	f013 0007 	ands.w	r0, r3, #7
 80073ee:	d00b      	beq.n	8007408 <__lo0bits+0x22>
 80073f0:	07d9      	lsls	r1, r3, #31
 80073f2:	d421      	bmi.n	8007438 <__lo0bits+0x52>
 80073f4:	0798      	lsls	r0, r3, #30
 80073f6:	bf49      	itett	mi
 80073f8:	085b      	lsrmi	r3, r3, #1
 80073fa:	089b      	lsrpl	r3, r3, #2
 80073fc:	2001      	movmi	r0, #1
 80073fe:	6013      	strmi	r3, [r2, #0]
 8007400:	bf5c      	itt	pl
 8007402:	6013      	strpl	r3, [r2, #0]
 8007404:	2002      	movpl	r0, #2
 8007406:	4770      	bx	lr
 8007408:	b299      	uxth	r1, r3
 800740a:	b909      	cbnz	r1, 8007410 <__lo0bits+0x2a>
 800740c:	0c1b      	lsrs	r3, r3, #16
 800740e:	2010      	movs	r0, #16
 8007410:	b2d9      	uxtb	r1, r3
 8007412:	b909      	cbnz	r1, 8007418 <__lo0bits+0x32>
 8007414:	3008      	adds	r0, #8
 8007416:	0a1b      	lsrs	r3, r3, #8
 8007418:	0719      	lsls	r1, r3, #28
 800741a:	bf04      	itt	eq
 800741c:	091b      	lsreq	r3, r3, #4
 800741e:	3004      	addeq	r0, #4
 8007420:	0799      	lsls	r1, r3, #30
 8007422:	bf04      	itt	eq
 8007424:	089b      	lsreq	r3, r3, #2
 8007426:	3002      	addeq	r0, #2
 8007428:	07d9      	lsls	r1, r3, #31
 800742a:	d403      	bmi.n	8007434 <__lo0bits+0x4e>
 800742c:	085b      	lsrs	r3, r3, #1
 800742e:	f100 0001 	add.w	r0, r0, #1
 8007432:	d003      	beq.n	800743c <__lo0bits+0x56>
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	4770      	bx	lr
 8007438:	2000      	movs	r0, #0
 800743a:	4770      	bx	lr
 800743c:	2020      	movs	r0, #32
 800743e:	4770      	bx	lr

08007440 <__i2b>:
 8007440:	b510      	push	{r4, lr}
 8007442:	460c      	mov	r4, r1
 8007444:	2101      	movs	r1, #1
 8007446:	f7ff ff07 	bl	8007258 <_Balloc>
 800744a:	4602      	mov	r2, r0
 800744c:	b928      	cbnz	r0, 800745a <__i2b+0x1a>
 800744e:	4b05      	ldr	r3, [pc, #20]	@ (8007464 <__i2b+0x24>)
 8007450:	4805      	ldr	r0, [pc, #20]	@ (8007468 <__i2b+0x28>)
 8007452:	f240 1145 	movw	r1, #325	@ 0x145
 8007456:	f000 fcfb 	bl	8007e50 <__assert_func>
 800745a:	2301      	movs	r3, #1
 800745c:	6144      	str	r4, [r0, #20]
 800745e:	6103      	str	r3, [r0, #16]
 8007460:	bd10      	pop	{r4, pc}
 8007462:	bf00      	nop
 8007464:	08008320 	.word	0x08008320
 8007468:	08008331 	.word	0x08008331

0800746c <__multiply>:
 800746c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007470:	4617      	mov	r7, r2
 8007472:	690a      	ldr	r2, [r1, #16]
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	429a      	cmp	r2, r3
 8007478:	bfa8      	it	ge
 800747a:	463b      	movge	r3, r7
 800747c:	4689      	mov	r9, r1
 800747e:	bfa4      	itt	ge
 8007480:	460f      	movge	r7, r1
 8007482:	4699      	movge	r9, r3
 8007484:	693d      	ldr	r5, [r7, #16]
 8007486:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	6879      	ldr	r1, [r7, #4]
 800748e:	eb05 060a 	add.w	r6, r5, sl
 8007492:	42b3      	cmp	r3, r6
 8007494:	b085      	sub	sp, #20
 8007496:	bfb8      	it	lt
 8007498:	3101      	addlt	r1, #1
 800749a:	f7ff fedd 	bl	8007258 <_Balloc>
 800749e:	b930      	cbnz	r0, 80074ae <__multiply+0x42>
 80074a0:	4602      	mov	r2, r0
 80074a2:	4b41      	ldr	r3, [pc, #260]	@ (80075a8 <__multiply+0x13c>)
 80074a4:	4841      	ldr	r0, [pc, #260]	@ (80075ac <__multiply+0x140>)
 80074a6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80074aa:	f000 fcd1 	bl	8007e50 <__assert_func>
 80074ae:	f100 0414 	add.w	r4, r0, #20
 80074b2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80074b6:	4623      	mov	r3, r4
 80074b8:	2200      	movs	r2, #0
 80074ba:	4573      	cmp	r3, lr
 80074bc:	d320      	bcc.n	8007500 <__multiply+0x94>
 80074be:	f107 0814 	add.w	r8, r7, #20
 80074c2:	f109 0114 	add.w	r1, r9, #20
 80074c6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80074ca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80074ce:	9302      	str	r3, [sp, #8]
 80074d0:	1beb      	subs	r3, r5, r7
 80074d2:	3b15      	subs	r3, #21
 80074d4:	f023 0303 	bic.w	r3, r3, #3
 80074d8:	3304      	adds	r3, #4
 80074da:	3715      	adds	r7, #21
 80074dc:	42bd      	cmp	r5, r7
 80074de:	bf38      	it	cc
 80074e0:	2304      	movcc	r3, #4
 80074e2:	9301      	str	r3, [sp, #4]
 80074e4:	9b02      	ldr	r3, [sp, #8]
 80074e6:	9103      	str	r1, [sp, #12]
 80074e8:	428b      	cmp	r3, r1
 80074ea:	d80c      	bhi.n	8007506 <__multiply+0x9a>
 80074ec:	2e00      	cmp	r6, #0
 80074ee:	dd03      	ble.n	80074f8 <__multiply+0x8c>
 80074f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d055      	beq.n	80075a4 <__multiply+0x138>
 80074f8:	6106      	str	r6, [r0, #16]
 80074fa:	b005      	add	sp, #20
 80074fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007500:	f843 2b04 	str.w	r2, [r3], #4
 8007504:	e7d9      	b.n	80074ba <__multiply+0x4e>
 8007506:	f8b1 a000 	ldrh.w	sl, [r1]
 800750a:	f1ba 0f00 	cmp.w	sl, #0
 800750e:	d01f      	beq.n	8007550 <__multiply+0xe4>
 8007510:	46c4      	mov	ip, r8
 8007512:	46a1      	mov	r9, r4
 8007514:	2700      	movs	r7, #0
 8007516:	f85c 2b04 	ldr.w	r2, [ip], #4
 800751a:	f8d9 3000 	ldr.w	r3, [r9]
 800751e:	fa1f fb82 	uxth.w	fp, r2
 8007522:	b29b      	uxth	r3, r3
 8007524:	fb0a 330b 	mla	r3, sl, fp, r3
 8007528:	443b      	add	r3, r7
 800752a:	f8d9 7000 	ldr.w	r7, [r9]
 800752e:	0c12      	lsrs	r2, r2, #16
 8007530:	0c3f      	lsrs	r7, r7, #16
 8007532:	fb0a 7202 	mla	r2, sl, r2, r7
 8007536:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800753a:	b29b      	uxth	r3, r3
 800753c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007540:	4565      	cmp	r5, ip
 8007542:	f849 3b04 	str.w	r3, [r9], #4
 8007546:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800754a:	d8e4      	bhi.n	8007516 <__multiply+0xaa>
 800754c:	9b01      	ldr	r3, [sp, #4]
 800754e:	50e7      	str	r7, [r4, r3]
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007556:	3104      	adds	r1, #4
 8007558:	f1b9 0f00 	cmp.w	r9, #0
 800755c:	d020      	beq.n	80075a0 <__multiply+0x134>
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	4647      	mov	r7, r8
 8007562:	46a4      	mov	ip, r4
 8007564:	f04f 0a00 	mov.w	sl, #0
 8007568:	f8b7 b000 	ldrh.w	fp, [r7]
 800756c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007570:	fb09 220b 	mla	r2, r9, fp, r2
 8007574:	4452      	add	r2, sl
 8007576:	b29b      	uxth	r3, r3
 8007578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800757c:	f84c 3b04 	str.w	r3, [ip], #4
 8007580:	f857 3b04 	ldr.w	r3, [r7], #4
 8007584:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007588:	f8bc 3000 	ldrh.w	r3, [ip]
 800758c:	fb09 330a 	mla	r3, r9, sl, r3
 8007590:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007594:	42bd      	cmp	r5, r7
 8007596:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800759a:	d8e5      	bhi.n	8007568 <__multiply+0xfc>
 800759c:	9a01      	ldr	r2, [sp, #4]
 800759e:	50a3      	str	r3, [r4, r2]
 80075a0:	3404      	adds	r4, #4
 80075a2:	e79f      	b.n	80074e4 <__multiply+0x78>
 80075a4:	3e01      	subs	r6, #1
 80075a6:	e7a1      	b.n	80074ec <__multiply+0x80>
 80075a8:	08008320 	.word	0x08008320
 80075ac:	08008331 	.word	0x08008331

080075b0 <__pow5mult>:
 80075b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075b4:	4615      	mov	r5, r2
 80075b6:	f012 0203 	ands.w	r2, r2, #3
 80075ba:	4607      	mov	r7, r0
 80075bc:	460e      	mov	r6, r1
 80075be:	d007      	beq.n	80075d0 <__pow5mult+0x20>
 80075c0:	4c25      	ldr	r4, [pc, #148]	@ (8007658 <__pow5mult+0xa8>)
 80075c2:	3a01      	subs	r2, #1
 80075c4:	2300      	movs	r3, #0
 80075c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075ca:	f7ff fea7 	bl	800731c <__multadd>
 80075ce:	4606      	mov	r6, r0
 80075d0:	10ad      	asrs	r5, r5, #2
 80075d2:	d03d      	beq.n	8007650 <__pow5mult+0xa0>
 80075d4:	69fc      	ldr	r4, [r7, #28]
 80075d6:	b97c      	cbnz	r4, 80075f8 <__pow5mult+0x48>
 80075d8:	2010      	movs	r0, #16
 80075da:	f7ff fd87 	bl	80070ec <malloc>
 80075de:	4602      	mov	r2, r0
 80075e0:	61f8      	str	r0, [r7, #28]
 80075e2:	b928      	cbnz	r0, 80075f0 <__pow5mult+0x40>
 80075e4:	4b1d      	ldr	r3, [pc, #116]	@ (800765c <__pow5mult+0xac>)
 80075e6:	481e      	ldr	r0, [pc, #120]	@ (8007660 <__pow5mult+0xb0>)
 80075e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80075ec:	f000 fc30 	bl	8007e50 <__assert_func>
 80075f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075f4:	6004      	str	r4, [r0, #0]
 80075f6:	60c4      	str	r4, [r0, #12]
 80075f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80075fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007600:	b94c      	cbnz	r4, 8007616 <__pow5mult+0x66>
 8007602:	f240 2171 	movw	r1, #625	@ 0x271
 8007606:	4638      	mov	r0, r7
 8007608:	f7ff ff1a 	bl	8007440 <__i2b>
 800760c:	2300      	movs	r3, #0
 800760e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007612:	4604      	mov	r4, r0
 8007614:	6003      	str	r3, [r0, #0]
 8007616:	f04f 0900 	mov.w	r9, #0
 800761a:	07eb      	lsls	r3, r5, #31
 800761c:	d50a      	bpl.n	8007634 <__pow5mult+0x84>
 800761e:	4631      	mov	r1, r6
 8007620:	4622      	mov	r2, r4
 8007622:	4638      	mov	r0, r7
 8007624:	f7ff ff22 	bl	800746c <__multiply>
 8007628:	4631      	mov	r1, r6
 800762a:	4680      	mov	r8, r0
 800762c:	4638      	mov	r0, r7
 800762e:	f7ff fe53 	bl	80072d8 <_Bfree>
 8007632:	4646      	mov	r6, r8
 8007634:	106d      	asrs	r5, r5, #1
 8007636:	d00b      	beq.n	8007650 <__pow5mult+0xa0>
 8007638:	6820      	ldr	r0, [r4, #0]
 800763a:	b938      	cbnz	r0, 800764c <__pow5mult+0x9c>
 800763c:	4622      	mov	r2, r4
 800763e:	4621      	mov	r1, r4
 8007640:	4638      	mov	r0, r7
 8007642:	f7ff ff13 	bl	800746c <__multiply>
 8007646:	6020      	str	r0, [r4, #0]
 8007648:	f8c0 9000 	str.w	r9, [r0]
 800764c:	4604      	mov	r4, r0
 800764e:	e7e4      	b.n	800761a <__pow5mult+0x6a>
 8007650:	4630      	mov	r0, r6
 8007652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007656:	bf00      	nop
 8007658:	080083e4 	.word	0x080083e4
 800765c:	080082b1 	.word	0x080082b1
 8007660:	08008331 	.word	0x08008331

08007664 <__lshift>:
 8007664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007668:	460c      	mov	r4, r1
 800766a:	6849      	ldr	r1, [r1, #4]
 800766c:	6923      	ldr	r3, [r4, #16]
 800766e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007672:	68a3      	ldr	r3, [r4, #8]
 8007674:	4607      	mov	r7, r0
 8007676:	4691      	mov	r9, r2
 8007678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800767c:	f108 0601 	add.w	r6, r8, #1
 8007680:	42b3      	cmp	r3, r6
 8007682:	db0b      	blt.n	800769c <__lshift+0x38>
 8007684:	4638      	mov	r0, r7
 8007686:	f7ff fde7 	bl	8007258 <_Balloc>
 800768a:	4605      	mov	r5, r0
 800768c:	b948      	cbnz	r0, 80076a2 <__lshift+0x3e>
 800768e:	4602      	mov	r2, r0
 8007690:	4b28      	ldr	r3, [pc, #160]	@ (8007734 <__lshift+0xd0>)
 8007692:	4829      	ldr	r0, [pc, #164]	@ (8007738 <__lshift+0xd4>)
 8007694:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007698:	f000 fbda 	bl	8007e50 <__assert_func>
 800769c:	3101      	adds	r1, #1
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	e7ee      	b.n	8007680 <__lshift+0x1c>
 80076a2:	2300      	movs	r3, #0
 80076a4:	f100 0114 	add.w	r1, r0, #20
 80076a8:	f100 0210 	add.w	r2, r0, #16
 80076ac:	4618      	mov	r0, r3
 80076ae:	4553      	cmp	r3, sl
 80076b0:	db33      	blt.n	800771a <__lshift+0xb6>
 80076b2:	6920      	ldr	r0, [r4, #16]
 80076b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076b8:	f104 0314 	add.w	r3, r4, #20
 80076bc:	f019 091f 	ands.w	r9, r9, #31
 80076c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80076c8:	d02b      	beq.n	8007722 <__lshift+0xbe>
 80076ca:	f1c9 0e20 	rsb	lr, r9, #32
 80076ce:	468a      	mov	sl, r1
 80076d0:	2200      	movs	r2, #0
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	fa00 f009 	lsl.w	r0, r0, r9
 80076d8:	4310      	orrs	r0, r2
 80076da:	f84a 0b04 	str.w	r0, [sl], #4
 80076de:	f853 2b04 	ldr.w	r2, [r3], #4
 80076e2:	459c      	cmp	ip, r3
 80076e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80076e8:	d8f3      	bhi.n	80076d2 <__lshift+0x6e>
 80076ea:	ebac 0304 	sub.w	r3, ip, r4
 80076ee:	3b15      	subs	r3, #21
 80076f0:	f023 0303 	bic.w	r3, r3, #3
 80076f4:	3304      	adds	r3, #4
 80076f6:	f104 0015 	add.w	r0, r4, #21
 80076fa:	4560      	cmp	r0, ip
 80076fc:	bf88      	it	hi
 80076fe:	2304      	movhi	r3, #4
 8007700:	50ca      	str	r2, [r1, r3]
 8007702:	b10a      	cbz	r2, 8007708 <__lshift+0xa4>
 8007704:	f108 0602 	add.w	r6, r8, #2
 8007708:	3e01      	subs	r6, #1
 800770a:	4638      	mov	r0, r7
 800770c:	612e      	str	r6, [r5, #16]
 800770e:	4621      	mov	r1, r4
 8007710:	f7ff fde2 	bl	80072d8 <_Bfree>
 8007714:	4628      	mov	r0, r5
 8007716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800771a:	f842 0f04 	str.w	r0, [r2, #4]!
 800771e:	3301      	adds	r3, #1
 8007720:	e7c5      	b.n	80076ae <__lshift+0x4a>
 8007722:	3904      	subs	r1, #4
 8007724:	f853 2b04 	ldr.w	r2, [r3], #4
 8007728:	f841 2f04 	str.w	r2, [r1, #4]!
 800772c:	459c      	cmp	ip, r3
 800772e:	d8f9      	bhi.n	8007724 <__lshift+0xc0>
 8007730:	e7ea      	b.n	8007708 <__lshift+0xa4>
 8007732:	bf00      	nop
 8007734:	08008320 	.word	0x08008320
 8007738:	08008331 	.word	0x08008331

0800773c <__mcmp>:
 800773c:	690a      	ldr	r2, [r1, #16]
 800773e:	4603      	mov	r3, r0
 8007740:	6900      	ldr	r0, [r0, #16]
 8007742:	1a80      	subs	r0, r0, r2
 8007744:	b530      	push	{r4, r5, lr}
 8007746:	d10e      	bne.n	8007766 <__mcmp+0x2a>
 8007748:	3314      	adds	r3, #20
 800774a:	3114      	adds	r1, #20
 800774c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007750:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007754:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007758:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800775c:	4295      	cmp	r5, r2
 800775e:	d003      	beq.n	8007768 <__mcmp+0x2c>
 8007760:	d205      	bcs.n	800776e <__mcmp+0x32>
 8007762:	f04f 30ff 	mov.w	r0, #4294967295
 8007766:	bd30      	pop	{r4, r5, pc}
 8007768:	42a3      	cmp	r3, r4
 800776a:	d3f3      	bcc.n	8007754 <__mcmp+0x18>
 800776c:	e7fb      	b.n	8007766 <__mcmp+0x2a>
 800776e:	2001      	movs	r0, #1
 8007770:	e7f9      	b.n	8007766 <__mcmp+0x2a>
	...

08007774 <__mdiff>:
 8007774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007778:	4689      	mov	r9, r1
 800777a:	4606      	mov	r6, r0
 800777c:	4611      	mov	r1, r2
 800777e:	4648      	mov	r0, r9
 8007780:	4614      	mov	r4, r2
 8007782:	f7ff ffdb 	bl	800773c <__mcmp>
 8007786:	1e05      	subs	r5, r0, #0
 8007788:	d112      	bne.n	80077b0 <__mdiff+0x3c>
 800778a:	4629      	mov	r1, r5
 800778c:	4630      	mov	r0, r6
 800778e:	f7ff fd63 	bl	8007258 <_Balloc>
 8007792:	4602      	mov	r2, r0
 8007794:	b928      	cbnz	r0, 80077a2 <__mdiff+0x2e>
 8007796:	4b3f      	ldr	r3, [pc, #252]	@ (8007894 <__mdiff+0x120>)
 8007798:	f240 2137 	movw	r1, #567	@ 0x237
 800779c:	483e      	ldr	r0, [pc, #248]	@ (8007898 <__mdiff+0x124>)
 800779e:	f000 fb57 	bl	8007e50 <__assert_func>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077a8:	4610      	mov	r0, r2
 80077aa:	b003      	add	sp, #12
 80077ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b0:	bfbc      	itt	lt
 80077b2:	464b      	movlt	r3, r9
 80077b4:	46a1      	movlt	r9, r4
 80077b6:	4630      	mov	r0, r6
 80077b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80077bc:	bfba      	itte	lt
 80077be:	461c      	movlt	r4, r3
 80077c0:	2501      	movlt	r5, #1
 80077c2:	2500      	movge	r5, #0
 80077c4:	f7ff fd48 	bl	8007258 <_Balloc>
 80077c8:	4602      	mov	r2, r0
 80077ca:	b918      	cbnz	r0, 80077d4 <__mdiff+0x60>
 80077cc:	4b31      	ldr	r3, [pc, #196]	@ (8007894 <__mdiff+0x120>)
 80077ce:	f240 2145 	movw	r1, #581	@ 0x245
 80077d2:	e7e3      	b.n	800779c <__mdiff+0x28>
 80077d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80077d8:	6926      	ldr	r6, [r4, #16]
 80077da:	60c5      	str	r5, [r0, #12]
 80077dc:	f109 0310 	add.w	r3, r9, #16
 80077e0:	f109 0514 	add.w	r5, r9, #20
 80077e4:	f104 0e14 	add.w	lr, r4, #20
 80077e8:	f100 0b14 	add.w	fp, r0, #20
 80077ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80077f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	46d9      	mov	r9, fp
 80077f8:	f04f 0c00 	mov.w	ip, #0
 80077fc:	9b01      	ldr	r3, [sp, #4]
 80077fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007802:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007806:	9301      	str	r3, [sp, #4]
 8007808:	fa1f f38a 	uxth.w	r3, sl
 800780c:	4619      	mov	r1, r3
 800780e:	b283      	uxth	r3, r0
 8007810:	1acb      	subs	r3, r1, r3
 8007812:	0c00      	lsrs	r0, r0, #16
 8007814:	4463      	add	r3, ip
 8007816:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800781a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800781e:	b29b      	uxth	r3, r3
 8007820:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007824:	4576      	cmp	r6, lr
 8007826:	f849 3b04 	str.w	r3, [r9], #4
 800782a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800782e:	d8e5      	bhi.n	80077fc <__mdiff+0x88>
 8007830:	1b33      	subs	r3, r6, r4
 8007832:	3b15      	subs	r3, #21
 8007834:	f023 0303 	bic.w	r3, r3, #3
 8007838:	3415      	adds	r4, #21
 800783a:	3304      	adds	r3, #4
 800783c:	42a6      	cmp	r6, r4
 800783e:	bf38      	it	cc
 8007840:	2304      	movcc	r3, #4
 8007842:	441d      	add	r5, r3
 8007844:	445b      	add	r3, fp
 8007846:	461e      	mov	r6, r3
 8007848:	462c      	mov	r4, r5
 800784a:	4544      	cmp	r4, r8
 800784c:	d30e      	bcc.n	800786c <__mdiff+0xf8>
 800784e:	f108 0103 	add.w	r1, r8, #3
 8007852:	1b49      	subs	r1, r1, r5
 8007854:	f021 0103 	bic.w	r1, r1, #3
 8007858:	3d03      	subs	r5, #3
 800785a:	45a8      	cmp	r8, r5
 800785c:	bf38      	it	cc
 800785e:	2100      	movcc	r1, #0
 8007860:	440b      	add	r3, r1
 8007862:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007866:	b191      	cbz	r1, 800788e <__mdiff+0x11a>
 8007868:	6117      	str	r7, [r2, #16]
 800786a:	e79d      	b.n	80077a8 <__mdiff+0x34>
 800786c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007870:	46e6      	mov	lr, ip
 8007872:	0c08      	lsrs	r0, r1, #16
 8007874:	fa1c fc81 	uxtah	ip, ip, r1
 8007878:	4471      	add	r1, lr
 800787a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800787e:	b289      	uxth	r1, r1
 8007880:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007884:	f846 1b04 	str.w	r1, [r6], #4
 8007888:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800788c:	e7dd      	b.n	800784a <__mdiff+0xd6>
 800788e:	3f01      	subs	r7, #1
 8007890:	e7e7      	b.n	8007862 <__mdiff+0xee>
 8007892:	bf00      	nop
 8007894:	08008320 	.word	0x08008320
 8007898:	08008331 	.word	0x08008331

0800789c <__d2b>:
 800789c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078a0:	460f      	mov	r7, r1
 80078a2:	2101      	movs	r1, #1
 80078a4:	ec59 8b10 	vmov	r8, r9, d0
 80078a8:	4616      	mov	r6, r2
 80078aa:	f7ff fcd5 	bl	8007258 <_Balloc>
 80078ae:	4604      	mov	r4, r0
 80078b0:	b930      	cbnz	r0, 80078c0 <__d2b+0x24>
 80078b2:	4602      	mov	r2, r0
 80078b4:	4b23      	ldr	r3, [pc, #140]	@ (8007944 <__d2b+0xa8>)
 80078b6:	4824      	ldr	r0, [pc, #144]	@ (8007948 <__d2b+0xac>)
 80078b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80078bc:	f000 fac8 	bl	8007e50 <__assert_func>
 80078c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80078c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078c8:	b10d      	cbz	r5, 80078ce <__d2b+0x32>
 80078ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	f1b8 0300 	subs.w	r3, r8, #0
 80078d4:	d023      	beq.n	800791e <__d2b+0x82>
 80078d6:	4668      	mov	r0, sp
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	f7ff fd84 	bl	80073e6 <__lo0bits>
 80078de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80078e2:	b1d0      	cbz	r0, 800791a <__d2b+0x7e>
 80078e4:	f1c0 0320 	rsb	r3, r0, #32
 80078e8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ec:	430b      	orrs	r3, r1
 80078ee:	40c2      	lsrs	r2, r0
 80078f0:	6163      	str	r3, [r4, #20]
 80078f2:	9201      	str	r2, [sp, #4]
 80078f4:	9b01      	ldr	r3, [sp, #4]
 80078f6:	61a3      	str	r3, [r4, #24]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	bf0c      	ite	eq
 80078fc:	2201      	moveq	r2, #1
 80078fe:	2202      	movne	r2, #2
 8007900:	6122      	str	r2, [r4, #16]
 8007902:	b1a5      	cbz	r5, 800792e <__d2b+0x92>
 8007904:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007908:	4405      	add	r5, r0
 800790a:	603d      	str	r5, [r7, #0]
 800790c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007910:	6030      	str	r0, [r6, #0]
 8007912:	4620      	mov	r0, r4
 8007914:	b003      	add	sp, #12
 8007916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800791a:	6161      	str	r1, [r4, #20]
 800791c:	e7ea      	b.n	80078f4 <__d2b+0x58>
 800791e:	a801      	add	r0, sp, #4
 8007920:	f7ff fd61 	bl	80073e6 <__lo0bits>
 8007924:	9b01      	ldr	r3, [sp, #4]
 8007926:	6163      	str	r3, [r4, #20]
 8007928:	3020      	adds	r0, #32
 800792a:	2201      	movs	r2, #1
 800792c:	e7e8      	b.n	8007900 <__d2b+0x64>
 800792e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007932:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007936:	6038      	str	r0, [r7, #0]
 8007938:	6918      	ldr	r0, [r3, #16]
 800793a:	f7ff fd35 	bl	80073a8 <__hi0bits>
 800793e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007942:	e7e5      	b.n	8007910 <__d2b+0x74>
 8007944:	08008320 	.word	0x08008320
 8007948:	08008331 	.word	0x08008331

0800794c <__sfputc_r>:
 800794c:	6893      	ldr	r3, [r2, #8]
 800794e:	3b01      	subs	r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	b410      	push	{r4}
 8007954:	6093      	str	r3, [r2, #8]
 8007956:	da08      	bge.n	800796a <__sfputc_r+0x1e>
 8007958:	6994      	ldr	r4, [r2, #24]
 800795a:	42a3      	cmp	r3, r4
 800795c:	db01      	blt.n	8007962 <__sfputc_r+0x16>
 800795e:	290a      	cmp	r1, #10
 8007960:	d103      	bne.n	800796a <__sfputc_r+0x1e>
 8007962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007966:	f7fe bbfc 	b.w	8006162 <__swbuf_r>
 800796a:	6813      	ldr	r3, [r2, #0]
 800796c:	1c58      	adds	r0, r3, #1
 800796e:	6010      	str	r0, [r2, #0]
 8007970:	7019      	strb	r1, [r3, #0]
 8007972:	4608      	mov	r0, r1
 8007974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007978:	4770      	bx	lr

0800797a <__sfputs_r>:
 800797a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797c:	4606      	mov	r6, r0
 800797e:	460f      	mov	r7, r1
 8007980:	4614      	mov	r4, r2
 8007982:	18d5      	adds	r5, r2, r3
 8007984:	42ac      	cmp	r4, r5
 8007986:	d101      	bne.n	800798c <__sfputs_r+0x12>
 8007988:	2000      	movs	r0, #0
 800798a:	e007      	b.n	800799c <__sfputs_r+0x22>
 800798c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007990:	463a      	mov	r2, r7
 8007992:	4630      	mov	r0, r6
 8007994:	f7ff ffda 	bl	800794c <__sfputc_r>
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	d1f3      	bne.n	8007984 <__sfputs_r+0xa>
 800799c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079a0 <_vfiprintf_r>:
 80079a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a4:	460d      	mov	r5, r1
 80079a6:	b09d      	sub	sp, #116	@ 0x74
 80079a8:	4614      	mov	r4, r2
 80079aa:	4698      	mov	r8, r3
 80079ac:	4606      	mov	r6, r0
 80079ae:	b118      	cbz	r0, 80079b8 <_vfiprintf_r+0x18>
 80079b0:	6a03      	ldr	r3, [r0, #32]
 80079b2:	b90b      	cbnz	r3, 80079b8 <_vfiprintf_r+0x18>
 80079b4:	f7fe faec 	bl	8005f90 <__sinit>
 80079b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079ba:	07d9      	lsls	r1, r3, #31
 80079bc:	d405      	bmi.n	80079ca <_vfiprintf_r+0x2a>
 80079be:	89ab      	ldrh	r3, [r5, #12]
 80079c0:	059a      	lsls	r2, r3, #22
 80079c2:	d402      	bmi.n	80079ca <_vfiprintf_r+0x2a>
 80079c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079c6:	f7fe fcde 	bl	8006386 <__retarget_lock_acquire_recursive>
 80079ca:	89ab      	ldrh	r3, [r5, #12]
 80079cc:	071b      	lsls	r3, r3, #28
 80079ce:	d501      	bpl.n	80079d4 <_vfiprintf_r+0x34>
 80079d0:	692b      	ldr	r3, [r5, #16]
 80079d2:	b99b      	cbnz	r3, 80079fc <_vfiprintf_r+0x5c>
 80079d4:	4629      	mov	r1, r5
 80079d6:	4630      	mov	r0, r6
 80079d8:	f7fe fc02 	bl	80061e0 <__swsetup_r>
 80079dc:	b170      	cbz	r0, 80079fc <_vfiprintf_r+0x5c>
 80079de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079e0:	07dc      	lsls	r4, r3, #31
 80079e2:	d504      	bpl.n	80079ee <_vfiprintf_r+0x4e>
 80079e4:	f04f 30ff 	mov.w	r0, #4294967295
 80079e8:	b01d      	add	sp, #116	@ 0x74
 80079ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ee:	89ab      	ldrh	r3, [r5, #12]
 80079f0:	0598      	lsls	r0, r3, #22
 80079f2:	d4f7      	bmi.n	80079e4 <_vfiprintf_r+0x44>
 80079f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079f6:	f7fe fcc7 	bl	8006388 <__retarget_lock_release_recursive>
 80079fa:	e7f3      	b.n	80079e4 <_vfiprintf_r+0x44>
 80079fc:	2300      	movs	r3, #0
 80079fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a00:	2320      	movs	r3, #32
 8007a02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a0a:	2330      	movs	r3, #48	@ 0x30
 8007a0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007bbc <_vfiprintf_r+0x21c>
 8007a10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a14:	f04f 0901 	mov.w	r9, #1
 8007a18:	4623      	mov	r3, r4
 8007a1a:	469a      	mov	sl, r3
 8007a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a20:	b10a      	cbz	r2, 8007a26 <_vfiprintf_r+0x86>
 8007a22:	2a25      	cmp	r2, #37	@ 0x25
 8007a24:	d1f9      	bne.n	8007a1a <_vfiprintf_r+0x7a>
 8007a26:	ebba 0b04 	subs.w	fp, sl, r4
 8007a2a:	d00b      	beq.n	8007a44 <_vfiprintf_r+0xa4>
 8007a2c:	465b      	mov	r3, fp
 8007a2e:	4622      	mov	r2, r4
 8007a30:	4629      	mov	r1, r5
 8007a32:	4630      	mov	r0, r6
 8007a34:	f7ff ffa1 	bl	800797a <__sfputs_r>
 8007a38:	3001      	adds	r0, #1
 8007a3a:	f000 80a7 	beq.w	8007b8c <_vfiprintf_r+0x1ec>
 8007a3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a40:	445a      	add	r2, fp
 8007a42:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a44:	f89a 3000 	ldrb.w	r3, [sl]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 809f 	beq.w	8007b8c <_vfiprintf_r+0x1ec>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f04f 32ff 	mov.w	r2, #4294967295
 8007a54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a58:	f10a 0a01 	add.w	sl, sl, #1
 8007a5c:	9304      	str	r3, [sp, #16]
 8007a5e:	9307      	str	r3, [sp, #28]
 8007a60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a64:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a66:	4654      	mov	r4, sl
 8007a68:	2205      	movs	r2, #5
 8007a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a6e:	4853      	ldr	r0, [pc, #332]	@ (8007bbc <_vfiprintf_r+0x21c>)
 8007a70:	f7f8 fbce 	bl	8000210 <memchr>
 8007a74:	9a04      	ldr	r2, [sp, #16]
 8007a76:	b9d8      	cbnz	r0, 8007ab0 <_vfiprintf_r+0x110>
 8007a78:	06d1      	lsls	r1, r2, #27
 8007a7a:	bf44      	itt	mi
 8007a7c:	2320      	movmi	r3, #32
 8007a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a82:	0713      	lsls	r3, r2, #28
 8007a84:	bf44      	itt	mi
 8007a86:	232b      	movmi	r3, #43	@ 0x2b
 8007a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a92:	d015      	beq.n	8007ac0 <_vfiprintf_r+0x120>
 8007a94:	9a07      	ldr	r2, [sp, #28]
 8007a96:	4654      	mov	r4, sl
 8007a98:	2000      	movs	r0, #0
 8007a9a:	f04f 0c0a 	mov.w	ip, #10
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aa4:	3b30      	subs	r3, #48	@ 0x30
 8007aa6:	2b09      	cmp	r3, #9
 8007aa8:	d94b      	bls.n	8007b42 <_vfiprintf_r+0x1a2>
 8007aaa:	b1b0      	cbz	r0, 8007ada <_vfiprintf_r+0x13a>
 8007aac:	9207      	str	r2, [sp, #28]
 8007aae:	e014      	b.n	8007ada <_vfiprintf_r+0x13a>
 8007ab0:	eba0 0308 	sub.w	r3, r0, r8
 8007ab4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	9304      	str	r3, [sp, #16]
 8007abc:	46a2      	mov	sl, r4
 8007abe:	e7d2      	b.n	8007a66 <_vfiprintf_r+0xc6>
 8007ac0:	9b03      	ldr	r3, [sp, #12]
 8007ac2:	1d19      	adds	r1, r3, #4
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	9103      	str	r1, [sp, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	bfbb      	ittet	lt
 8007acc:	425b      	neglt	r3, r3
 8007ace:	f042 0202 	orrlt.w	r2, r2, #2
 8007ad2:	9307      	strge	r3, [sp, #28]
 8007ad4:	9307      	strlt	r3, [sp, #28]
 8007ad6:	bfb8      	it	lt
 8007ad8:	9204      	strlt	r2, [sp, #16]
 8007ada:	7823      	ldrb	r3, [r4, #0]
 8007adc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ade:	d10a      	bne.n	8007af6 <_vfiprintf_r+0x156>
 8007ae0:	7863      	ldrb	r3, [r4, #1]
 8007ae2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ae4:	d132      	bne.n	8007b4c <_vfiprintf_r+0x1ac>
 8007ae6:	9b03      	ldr	r3, [sp, #12]
 8007ae8:	1d1a      	adds	r2, r3, #4
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	9203      	str	r2, [sp, #12]
 8007aee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007af2:	3402      	adds	r4, #2
 8007af4:	9305      	str	r3, [sp, #20]
 8007af6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007bcc <_vfiprintf_r+0x22c>
 8007afa:	7821      	ldrb	r1, [r4, #0]
 8007afc:	2203      	movs	r2, #3
 8007afe:	4650      	mov	r0, sl
 8007b00:	f7f8 fb86 	bl	8000210 <memchr>
 8007b04:	b138      	cbz	r0, 8007b16 <_vfiprintf_r+0x176>
 8007b06:	9b04      	ldr	r3, [sp, #16]
 8007b08:	eba0 000a 	sub.w	r0, r0, sl
 8007b0c:	2240      	movs	r2, #64	@ 0x40
 8007b0e:	4082      	lsls	r2, r0
 8007b10:	4313      	orrs	r3, r2
 8007b12:	3401      	adds	r4, #1
 8007b14:	9304      	str	r3, [sp, #16]
 8007b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b1a:	4829      	ldr	r0, [pc, #164]	@ (8007bc0 <_vfiprintf_r+0x220>)
 8007b1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b20:	2206      	movs	r2, #6
 8007b22:	f7f8 fb75 	bl	8000210 <memchr>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d03f      	beq.n	8007baa <_vfiprintf_r+0x20a>
 8007b2a:	4b26      	ldr	r3, [pc, #152]	@ (8007bc4 <_vfiprintf_r+0x224>)
 8007b2c:	bb1b      	cbnz	r3, 8007b76 <_vfiprintf_r+0x1d6>
 8007b2e:	9b03      	ldr	r3, [sp, #12]
 8007b30:	3307      	adds	r3, #7
 8007b32:	f023 0307 	bic.w	r3, r3, #7
 8007b36:	3308      	adds	r3, #8
 8007b38:	9303      	str	r3, [sp, #12]
 8007b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b3c:	443b      	add	r3, r7
 8007b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b40:	e76a      	b.n	8007a18 <_vfiprintf_r+0x78>
 8007b42:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b46:	460c      	mov	r4, r1
 8007b48:	2001      	movs	r0, #1
 8007b4a:	e7a8      	b.n	8007a9e <_vfiprintf_r+0xfe>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	3401      	adds	r4, #1
 8007b50:	9305      	str	r3, [sp, #20]
 8007b52:	4619      	mov	r1, r3
 8007b54:	f04f 0c0a 	mov.w	ip, #10
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b5e:	3a30      	subs	r2, #48	@ 0x30
 8007b60:	2a09      	cmp	r2, #9
 8007b62:	d903      	bls.n	8007b6c <_vfiprintf_r+0x1cc>
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0c6      	beq.n	8007af6 <_vfiprintf_r+0x156>
 8007b68:	9105      	str	r1, [sp, #20]
 8007b6a:	e7c4      	b.n	8007af6 <_vfiprintf_r+0x156>
 8007b6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b70:	4604      	mov	r4, r0
 8007b72:	2301      	movs	r3, #1
 8007b74:	e7f0      	b.n	8007b58 <_vfiprintf_r+0x1b8>
 8007b76:	ab03      	add	r3, sp, #12
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	462a      	mov	r2, r5
 8007b7c:	4b12      	ldr	r3, [pc, #72]	@ (8007bc8 <_vfiprintf_r+0x228>)
 8007b7e:	a904      	add	r1, sp, #16
 8007b80:	4630      	mov	r0, r6
 8007b82:	f7fd fdc3 	bl	800570c <_printf_float>
 8007b86:	4607      	mov	r7, r0
 8007b88:	1c78      	adds	r0, r7, #1
 8007b8a:	d1d6      	bne.n	8007b3a <_vfiprintf_r+0x19a>
 8007b8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b8e:	07d9      	lsls	r1, r3, #31
 8007b90:	d405      	bmi.n	8007b9e <_vfiprintf_r+0x1fe>
 8007b92:	89ab      	ldrh	r3, [r5, #12]
 8007b94:	059a      	lsls	r2, r3, #22
 8007b96:	d402      	bmi.n	8007b9e <_vfiprintf_r+0x1fe>
 8007b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b9a:	f7fe fbf5 	bl	8006388 <__retarget_lock_release_recursive>
 8007b9e:	89ab      	ldrh	r3, [r5, #12]
 8007ba0:	065b      	lsls	r3, r3, #25
 8007ba2:	f53f af1f 	bmi.w	80079e4 <_vfiprintf_r+0x44>
 8007ba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ba8:	e71e      	b.n	80079e8 <_vfiprintf_r+0x48>
 8007baa:	ab03      	add	r3, sp, #12
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	462a      	mov	r2, r5
 8007bb0:	4b05      	ldr	r3, [pc, #20]	@ (8007bc8 <_vfiprintf_r+0x228>)
 8007bb2:	a904      	add	r1, sp, #16
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	f7fe f841 	bl	8005c3c <_printf_i>
 8007bba:	e7e4      	b.n	8007b86 <_vfiprintf_r+0x1e6>
 8007bbc:	0800838a 	.word	0x0800838a
 8007bc0:	08008394 	.word	0x08008394
 8007bc4:	0800570d 	.word	0x0800570d
 8007bc8:	0800797b 	.word	0x0800797b
 8007bcc:	08008390 	.word	0x08008390

08007bd0 <__sflush_r>:
 8007bd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd8:	0716      	lsls	r6, r2, #28
 8007bda:	4605      	mov	r5, r0
 8007bdc:	460c      	mov	r4, r1
 8007bde:	d454      	bmi.n	8007c8a <__sflush_r+0xba>
 8007be0:	684b      	ldr	r3, [r1, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	dc02      	bgt.n	8007bec <__sflush_r+0x1c>
 8007be6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	dd48      	ble.n	8007c7e <__sflush_r+0xae>
 8007bec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bee:	2e00      	cmp	r6, #0
 8007bf0:	d045      	beq.n	8007c7e <__sflush_r+0xae>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bf8:	682f      	ldr	r7, [r5, #0]
 8007bfa:	6a21      	ldr	r1, [r4, #32]
 8007bfc:	602b      	str	r3, [r5, #0]
 8007bfe:	d030      	beq.n	8007c62 <__sflush_r+0x92>
 8007c00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	0759      	lsls	r1, r3, #29
 8007c06:	d505      	bpl.n	8007c14 <__sflush_r+0x44>
 8007c08:	6863      	ldr	r3, [r4, #4]
 8007c0a:	1ad2      	subs	r2, r2, r3
 8007c0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c0e:	b10b      	cbz	r3, 8007c14 <__sflush_r+0x44>
 8007c10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c12:	1ad2      	subs	r2, r2, r3
 8007c14:	2300      	movs	r3, #0
 8007c16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c18:	6a21      	ldr	r1, [r4, #32]
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	47b0      	blx	r6
 8007c1e:	1c43      	adds	r3, r0, #1
 8007c20:	89a3      	ldrh	r3, [r4, #12]
 8007c22:	d106      	bne.n	8007c32 <__sflush_r+0x62>
 8007c24:	6829      	ldr	r1, [r5, #0]
 8007c26:	291d      	cmp	r1, #29
 8007c28:	d82b      	bhi.n	8007c82 <__sflush_r+0xb2>
 8007c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8007cd4 <__sflush_r+0x104>)
 8007c2c:	40ca      	lsrs	r2, r1
 8007c2e:	07d6      	lsls	r6, r2, #31
 8007c30:	d527      	bpl.n	8007c82 <__sflush_r+0xb2>
 8007c32:	2200      	movs	r2, #0
 8007c34:	6062      	str	r2, [r4, #4]
 8007c36:	04d9      	lsls	r1, r3, #19
 8007c38:	6922      	ldr	r2, [r4, #16]
 8007c3a:	6022      	str	r2, [r4, #0]
 8007c3c:	d504      	bpl.n	8007c48 <__sflush_r+0x78>
 8007c3e:	1c42      	adds	r2, r0, #1
 8007c40:	d101      	bne.n	8007c46 <__sflush_r+0x76>
 8007c42:	682b      	ldr	r3, [r5, #0]
 8007c44:	b903      	cbnz	r3, 8007c48 <__sflush_r+0x78>
 8007c46:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c4a:	602f      	str	r7, [r5, #0]
 8007c4c:	b1b9      	cbz	r1, 8007c7e <__sflush_r+0xae>
 8007c4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c52:	4299      	cmp	r1, r3
 8007c54:	d002      	beq.n	8007c5c <__sflush_r+0x8c>
 8007c56:	4628      	mov	r0, r5
 8007c58:	f7ff f9fe 	bl	8007058 <_free_r>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c60:	e00d      	b.n	8007c7e <__sflush_r+0xae>
 8007c62:	2301      	movs	r3, #1
 8007c64:	4628      	mov	r0, r5
 8007c66:	47b0      	blx	r6
 8007c68:	4602      	mov	r2, r0
 8007c6a:	1c50      	adds	r0, r2, #1
 8007c6c:	d1c9      	bne.n	8007c02 <__sflush_r+0x32>
 8007c6e:	682b      	ldr	r3, [r5, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d0c6      	beq.n	8007c02 <__sflush_r+0x32>
 8007c74:	2b1d      	cmp	r3, #29
 8007c76:	d001      	beq.n	8007c7c <__sflush_r+0xac>
 8007c78:	2b16      	cmp	r3, #22
 8007c7a:	d11e      	bne.n	8007cba <__sflush_r+0xea>
 8007c7c:	602f      	str	r7, [r5, #0]
 8007c7e:	2000      	movs	r0, #0
 8007c80:	e022      	b.n	8007cc8 <__sflush_r+0xf8>
 8007c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c86:	b21b      	sxth	r3, r3
 8007c88:	e01b      	b.n	8007cc2 <__sflush_r+0xf2>
 8007c8a:	690f      	ldr	r7, [r1, #16]
 8007c8c:	2f00      	cmp	r7, #0
 8007c8e:	d0f6      	beq.n	8007c7e <__sflush_r+0xae>
 8007c90:	0793      	lsls	r3, r2, #30
 8007c92:	680e      	ldr	r6, [r1, #0]
 8007c94:	bf08      	it	eq
 8007c96:	694b      	ldreq	r3, [r1, #20]
 8007c98:	600f      	str	r7, [r1, #0]
 8007c9a:	bf18      	it	ne
 8007c9c:	2300      	movne	r3, #0
 8007c9e:	eba6 0807 	sub.w	r8, r6, r7
 8007ca2:	608b      	str	r3, [r1, #8]
 8007ca4:	f1b8 0f00 	cmp.w	r8, #0
 8007ca8:	dde9      	ble.n	8007c7e <__sflush_r+0xae>
 8007caa:	6a21      	ldr	r1, [r4, #32]
 8007cac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007cae:	4643      	mov	r3, r8
 8007cb0:	463a      	mov	r2, r7
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	47b0      	blx	r6
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	dc08      	bgt.n	8007ccc <__sflush_r+0xfc>
 8007cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cc2:	81a3      	strh	r3, [r4, #12]
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ccc:	4407      	add	r7, r0
 8007cce:	eba8 0800 	sub.w	r8, r8, r0
 8007cd2:	e7e7      	b.n	8007ca4 <__sflush_r+0xd4>
 8007cd4:	20400001 	.word	0x20400001

08007cd8 <_fflush_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	690b      	ldr	r3, [r1, #16]
 8007cdc:	4605      	mov	r5, r0
 8007cde:	460c      	mov	r4, r1
 8007ce0:	b913      	cbnz	r3, 8007ce8 <_fflush_r+0x10>
 8007ce2:	2500      	movs	r5, #0
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	b118      	cbz	r0, 8007cf2 <_fflush_r+0x1a>
 8007cea:	6a03      	ldr	r3, [r0, #32]
 8007cec:	b90b      	cbnz	r3, 8007cf2 <_fflush_r+0x1a>
 8007cee:	f7fe f94f 	bl	8005f90 <__sinit>
 8007cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0f3      	beq.n	8007ce2 <_fflush_r+0xa>
 8007cfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007cfc:	07d0      	lsls	r0, r2, #31
 8007cfe:	d404      	bmi.n	8007d0a <_fflush_r+0x32>
 8007d00:	0599      	lsls	r1, r3, #22
 8007d02:	d402      	bmi.n	8007d0a <_fflush_r+0x32>
 8007d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d06:	f7fe fb3e 	bl	8006386 <__retarget_lock_acquire_recursive>
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	4621      	mov	r1, r4
 8007d0e:	f7ff ff5f 	bl	8007bd0 <__sflush_r>
 8007d12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d14:	07da      	lsls	r2, r3, #31
 8007d16:	4605      	mov	r5, r0
 8007d18:	d4e4      	bmi.n	8007ce4 <_fflush_r+0xc>
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	059b      	lsls	r3, r3, #22
 8007d1e:	d4e1      	bmi.n	8007ce4 <_fflush_r+0xc>
 8007d20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d22:	f7fe fb31 	bl	8006388 <__retarget_lock_release_recursive>
 8007d26:	e7dd      	b.n	8007ce4 <_fflush_r+0xc>

08007d28 <__swhatbuf_r>:
 8007d28:	b570      	push	{r4, r5, r6, lr}
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d30:	2900      	cmp	r1, #0
 8007d32:	b096      	sub	sp, #88	@ 0x58
 8007d34:	4615      	mov	r5, r2
 8007d36:	461e      	mov	r6, r3
 8007d38:	da0d      	bge.n	8007d56 <__swhatbuf_r+0x2e>
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d40:	f04f 0100 	mov.w	r1, #0
 8007d44:	bf14      	ite	ne
 8007d46:	2340      	movne	r3, #64	@ 0x40
 8007d48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	6031      	str	r1, [r6, #0]
 8007d50:	602b      	str	r3, [r5, #0]
 8007d52:	b016      	add	sp, #88	@ 0x58
 8007d54:	bd70      	pop	{r4, r5, r6, pc}
 8007d56:	466a      	mov	r2, sp
 8007d58:	f000 f848 	bl	8007dec <_fstat_r>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	dbec      	blt.n	8007d3a <__swhatbuf_r+0x12>
 8007d60:	9901      	ldr	r1, [sp, #4]
 8007d62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d6a:	4259      	negs	r1, r3
 8007d6c:	4159      	adcs	r1, r3
 8007d6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d72:	e7eb      	b.n	8007d4c <__swhatbuf_r+0x24>

08007d74 <__smakebuf_r>:
 8007d74:	898b      	ldrh	r3, [r1, #12]
 8007d76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d78:	079d      	lsls	r5, r3, #30
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	d507      	bpl.n	8007d90 <__smakebuf_r+0x1c>
 8007d80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	6123      	str	r3, [r4, #16]
 8007d88:	2301      	movs	r3, #1
 8007d8a:	6163      	str	r3, [r4, #20]
 8007d8c:	b003      	add	sp, #12
 8007d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d90:	ab01      	add	r3, sp, #4
 8007d92:	466a      	mov	r2, sp
 8007d94:	f7ff ffc8 	bl	8007d28 <__swhatbuf_r>
 8007d98:	9f00      	ldr	r7, [sp, #0]
 8007d9a:	4605      	mov	r5, r0
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	4630      	mov	r0, r6
 8007da0:	f7ff f9ce 	bl	8007140 <_malloc_r>
 8007da4:	b948      	cbnz	r0, 8007dba <__smakebuf_r+0x46>
 8007da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007daa:	059a      	lsls	r2, r3, #22
 8007dac:	d4ee      	bmi.n	8007d8c <__smakebuf_r+0x18>
 8007dae:	f023 0303 	bic.w	r3, r3, #3
 8007db2:	f043 0302 	orr.w	r3, r3, #2
 8007db6:	81a3      	strh	r3, [r4, #12]
 8007db8:	e7e2      	b.n	8007d80 <__smakebuf_r+0xc>
 8007dba:	89a3      	ldrh	r3, [r4, #12]
 8007dbc:	6020      	str	r0, [r4, #0]
 8007dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc2:	81a3      	strh	r3, [r4, #12]
 8007dc4:	9b01      	ldr	r3, [sp, #4]
 8007dc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007dca:	b15b      	cbz	r3, 8007de4 <__smakebuf_r+0x70>
 8007dcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f000 f81d 	bl	8007e10 <_isatty_r>
 8007dd6:	b128      	cbz	r0, 8007de4 <__smakebuf_r+0x70>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	f023 0303 	bic.w	r3, r3, #3
 8007dde:	f043 0301 	orr.w	r3, r3, #1
 8007de2:	81a3      	strh	r3, [r4, #12]
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	431d      	orrs	r5, r3
 8007de8:	81a5      	strh	r5, [r4, #12]
 8007dea:	e7cf      	b.n	8007d8c <__smakebuf_r+0x18>

08007dec <_fstat_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4d07      	ldr	r5, [pc, #28]	@ (8007e0c <_fstat_r+0x20>)
 8007df0:	2300      	movs	r3, #0
 8007df2:	4604      	mov	r4, r0
 8007df4:	4608      	mov	r0, r1
 8007df6:	4611      	mov	r1, r2
 8007df8:	602b      	str	r3, [r5, #0]
 8007dfa:	f7fb f964 	bl	80030c6 <_fstat>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	d102      	bne.n	8007e08 <_fstat_r+0x1c>
 8007e02:	682b      	ldr	r3, [r5, #0]
 8007e04:	b103      	cbz	r3, 8007e08 <_fstat_r+0x1c>
 8007e06:	6023      	str	r3, [r4, #0]
 8007e08:	bd38      	pop	{r3, r4, r5, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20000444 	.word	0x20000444

08007e10 <_isatty_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4d06      	ldr	r5, [pc, #24]	@ (8007e2c <_isatty_r+0x1c>)
 8007e14:	2300      	movs	r3, #0
 8007e16:	4604      	mov	r4, r0
 8007e18:	4608      	mov	r0, r1
 8007e1a:	602b      	str	r3, [r5, #0]
 8007e1c:	f7fb f963 	bl	80030e6 <_isatty>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d102      	bne.n	8007e2a <_isatty_r+0x1a>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	b103      	cbz	r3, 8007e2a <_isatty_r+0x1a>
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	20000444 	.word	0x20000444

08007e30 <_sbrk_r>:
 8007e30:	b538      	push	{r3, r4, r5, lr}
 8007e32:	4d06      	ldr	r5, [pc, #24]	@ (8007e4c <_sbrk_r+0x1c>)
 8007e34:	2300      	movs	r3, #0
 8007e36:	4604      	mov	r4, r0
 8007e38:	4608      	mov	r0, r1
 8007e3a:	602b      	str	r3, [r5, #0]
 8007e3c:	f7fb f96c 	bl	8003118 <_sbrk>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	d102      	bne.n	8007e4a <_sbrk_r+0x1a>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <_sbrk_r+0x1a>
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	20000444 	.word	0x20000444

08007e50 <__assert_func>:
 8007e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e52:	4614      	mov	r4, r2
 8007e54:	461a      	mov	r2, r3
 8007e56:	4b09      	ldr	r3, [pc, #36]	@ (8007e7c <__assert_func+0x2c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	68d8      	ldr	r0, [r3, #12]
 8007e5e:	b14c      	cbz	r4, 8007e74 <__assert_func+0x24>
 8007e60:	4b07      	ldr	r3, [pc, #28]	@ (8007e80 <__assert_func+0x30>)
 8007e62:	9100      	str	r1, [sp, #0]
 8007e64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e68:	4906      	ldr	r1, [pc, #24]	@ (8007e84 <__assert_func+0x34>)
 8007e6a:	462b      	mov	r3, r5
 8007e6c:	f000 f842 	bl	8007ef4 <fiprintf>
 8007e70:	f000 f852 	bl	8007f18 <abort>
 8007e74:	4b04      	ldr	r3, [pc, #16]	@ (8007e88 <__assert_func+0x38>)
 8007e76:	461c      	mov	r4, r3
 8007e78:	e7f3      	b.n	8007e62 <__assert_func+0x12>
 8007e7a:	bf00      	nop
 8007e7c:	20000018 	.word	0x20000018
 8007e80:	080083a5 	.word	0x080083a5
 8007e84:	080083b2 	.word	0x080083b2
 8007e88:	080083e0 	.word	0x080083e0

08007e8c <_calloc_r>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	fba1 5402 	umull	r5, r4, r1, r2
 8007e92:	b934      	cbnz	r4, 8007ea2 <_calloc_r+0x16>
 8007e94:	4629      	mov	r1, r5
 8007e96:	f7ff f953 	bl	8007140 <_malloc_r>
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	b928      	cbnz	r0, 8007eaa <_calloc_r+0x1e>
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	bd70      	pop	{r4, r5, r6, pc}
 8007ea2:	220c      	movs	r2, #12
 8007ea4:	6002      	str	r2, [r0, #0]
 8007ea6:	2600      	movs	r6, #0
 8007ea8:	e7f9      	b.n	8007e9e <_calloc_r+0x12>
 8007eaa:	462a      	mov	r2, r5
 8007eac:	4621      	mov	r1, r4
 8007eae:	f7fe f9ed 	bl	800628c <memset>
 8007eb2:	e7f4      	b.n	8007e9e <_calloc_r+0x12>

08007eb4 <__ascii_mbtowc>:
 8007eb4:	b082      	sub	sp, #8
 8007eb6:	b901      	cbnz	r1, 8007eba <__ascii_mbtowc+0x6>
 8007eb8:	a901      	add	r1, sp, #4
 8007eba:	b142      	cbz	r2, 8007ece <__ascii_mbtowc+0x1a>
 8007ebc:	b14b      	cbz	r3, 8007ed2 <__ascii_mbtowc+0x1e>
 8007ebe:	7813      	ldrb	r3, [r2, #0]
 8007ec0:	600b      	str	r3, [r1, #0]
 8007ec2:	7812      	ldrb	r2, [r2, #0]
 8007ec4:	1e10      	subs	r0, r2, #0
 8007ec6:	bf18      	it	ne
 8007ec8:	2001      	movne	r0, #1
 8007eca:	b002      	add	sp, #8
 8007ecc:	4770      	bx	lr
 8007ece:	4610      	mov	r0, r2
 8007ed0:	e7fb      	b.n	8007eca <__ascii_mbtowc+0x16>
 8007ed2:	f06f 0001 	mvn.w	r0, #1
 8007ed6:	e7f8      	b.n	8007eca <__ascii_mbtowc+0x16>

08007ed8 <__ascii_wctomb>:
 8007ed8:	4603      	mov	r3, r0
 8007eda:	4608      	mov	r0, r1
 8007edc:	b141      	cbz	r1, 8007ef0 <__ascii_wctomb+0x18>
 8007ede:	2aff      	cmp	r2, #255	@ 0xff
 8007ee0:	d904      	bls.n	8007eec <__ascii_wctomb+0x14>
 8007ee2:	228a      	movs	r2, #138	@ 0x8a
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eea:	4770      	bx	lr
 8007eec:	700a      	strb	r2, [r1, #0]
 8007eee:	2001      	movs	r0, #1
 8007ef0:	4770      	bx	lr
	...

08007ef4 <fiprintf>:
 8007ef4:	b40e      	push	{r1, r2, r3}
 8007ef6:	b503      	push	{r0, r1, lr}
 8007ef8:	4601      	mov	r1, r0
 8007efa:	ab03      	add	r3, sp, #12
 8007efc:	4805      	ldr	r0, [pc, #20]	@ (8007f14 <fiprintf+0x20>)
 8007efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f02:	6800      	ldr	r0, [r0, #0]
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	f7ff fd4b 	bl	80079a0 <_vfiprintf_r>
 8007f0a:	b002      	add	sp, #8
 8007f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f10:	b003      	add	sp, #12
 8007f12:	4770      	bx	lr
 8007f14:	20000018 	.word	0x20000018

08007f18 <abort>:
 8007f18:	b508      	push	{r3, lr}
 8007f1a:	2006      	movs	r0, #6
 8007f1c:	f000 f82c 	bl	8007f78 <raise>
 8007f20:	2001      	movs	r0, #1
 8007f22:	f7fb f89c 	bl	800305e <_exit>

08007f26 <_raise_r>:
 8007f26:	291f      	cmp	r1, #31
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	4605      	mov	r5, r0
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	d904      	bls.n	8007f3a <_raise_r+0x14>
 8007f30:	2316      	movs	r3, #22
 8007f32:	6003      	str	r3, [r0, #0]
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295
 8007f38:	bd38      	pop	{r3, r4, r5, pc}
 8007f3a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f3c:	b112      	cbz	r2, 8007f44 <_raise_r+0x1e>
 8007f3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f42:	b94b      	cbnz	r3, 8007f58 <_raise_r+0x32>
 8007f44:	4628      	mov	r0, r5
 8007f46:	f000 f831 	bl	8007fac <_getpid_r>
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	4601      	mov	r1, r0
 8007f4e:	4628      	mov	r0, r5
 8007f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f54:	f000 b818 	b.w	8007f88 <_kill_r>
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d00a      	beq.n	8007f72 <_raise_r+0x4c>
 8007f5c:	1c59      	adds	r1, r3, #1
 8007f5e:	d103      	bne.n	8007f68 <_raise_r+0x42>
 8007f60:	2316      	movs	r3, #22
 8007f62:	6003      	str	r3, [r0, #0]
 8007f64:	2001      	movs	r0, #1
 8007f66:	e7e7      	b.n	8007f38 <_raise_r+0x12>
 8007f68:	2100      	movs	r1, #0
 8007f6a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f6e:	4620      	mov	r0, r4
 8007f70:	4798      	blx	r3
 8007f72:	2000      	movs	r0, #0
 8007f74:	e7e0      	b.n	8007f38 <_raise_r+0x12>
	...

08007f78 <raise>:
 8007f78:	4b02      	ldr	r3, [pc, #8]	@ (8007f84 <raise+0xc>)
 8007f7a:	4601      	mov	r1, r0
 8007f7c:	6818      	ldr	r0, [r3, #0]
 8007f7e:	f7ff bfd2 	b.w	8007f26 <_raise_r>
 8007f82:	bf00      	nop
 8007f84:	20000018 	.word	0x20000018

08007f88 <_kill_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4d07      	ldr	r5, [pc, #28]	@ (8007fa8 <_kill_r+0x20>)
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	4604      	mov	r4, r0
 8007f90:	4608      	mov	r0, r1
 8007f92:	4611      	mov	r1, r2
 8007f94:	602b      	str	r3, [r5, #0]
 8007f96:	f7fb f852 	bl	800303e <_kill>
 8007f9a:	1c43      	adds	r3, r0, #1
 8007f9c:	d102      	bne.n	8007fa4 <_kill_r+0x1c>
 8007f9e:	682b      	ldr	r3, [r5, #0]
 8007fa0:	b103      	cbz	r3, 8007fa4 <_kill_r+0x1c>
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	bd38      	pop	{r3, r4, r5, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000444 	.word	0x20000444

08007fac <_getpid_r>:
 8007fac:	f7fb b83f 	b.w	800302e <_getpid>

08007fb0 <_init>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr

08007fbc <_fini>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	bf00      	nop
 8007fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc2:	bc08      	pop	{r3}
 8007fc4:	469e      	mov	lr, r3
 8007fc6:	4770      	bx	lr
